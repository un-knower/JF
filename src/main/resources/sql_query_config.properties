# \u914D\u7F6E\u7528\u4E8EKAP\u67E5\u8BE2\u7684SQL\u8BED\u53E5
# \u6CE8\u91CA\u4FE1\u606F\u683C\u5F0F\uFF1A
# # \u6307\u660E\u7528\u4E8E\u54EA\u4E2AController\u5C42
# # \u4EE5\u9875\u9762\u8DEF\u5F84\u7684\u5F62\u5F0F\uFF0C\u6307\u660ESQL\u7528\u9014\uFF0C\u7528"-"\u5206\u9694
# # \u8BF4\u660ESQL\u53C2\u6570\u4FE1\u606F
# # \u8BF4\u660ESQL\u8FD4\u56DE\u503C\u4FE1\u606F
# \u547D\u540D\u683C\u5F0F\uFF1Asel/ins/del/*.\u8DEF\u5F84\u4FE1\u606F.by.\u4E3B\u8981\u53D8\u91CF\uFF08\u7528\u4E8E\u533A\u5206\u540C\u7C7BSQL\uFF0C\u5982\uFF1Aday/month/year\uFF09
# \u53C2\u6570\u8BF4\u660E\uFF1A{Integer}\uFF0C\u4ECE0\u5F00\u59CB
# \u6709\u53C2\u6570\u4F20\u9012\u65F6\uFF0C\u56E0\u4F7F\u7528formate\u51FD\u6570\uFF0C\u7528''String''\u66FF\u4EE3'String'

# TestController
# KAP\u6837\u4F8B\u67E5\u8BE2K\u7EBF\u6307\u6570\u56FD\u5BB6
# \u53C2\u6570\u4E3Acountry limit
sel.kline.country.by.country = \
SELECT * FROM KYLIN_COUNTRY WHERE country = ''{0}'' LIMIT {1}

# Universal
# \u901A\u7528-\u5F53\u524D\u65E5\u671F\u4E0A\u4E00\u4EA4\u6613\u65E5
# \u53C2\u6570\u4E3AendDate
sel.universal.pioneer.trading.by.day = \
select DAY_ID, \
TRADE_MARK, \
TRADE_DAY_ID \
from UF20_EDW.DIM_DATE \
where DAY_ID = {0}

# Universal
# \u901A\u7528-\u5F53\u524D\u65E5\u671F\u8303\u56F4\u5185\u6240\u6709\u4EA4\u6613\u65E5
# \u53C2\u6570\u4E3AstartDate endDate
sel.universal.trading.by.day = \
select DAY_ID \
from UF20_EDW.DIM_DATE \
where DAY_ID between {0} and {1} and TRADE_MARK = ''1'' \
order by DAY_ID
  
# Universal
# \u901A\u7528-\u5F53\u524D\u65E5\u671F\u8303\u56F4\u5185\u6240\u6709\u6708\u4EFD\u6700\u540E\u4E00\u4E2A\u4EA4\u6613\u65E5
# \u53C2\u6570\u4E3AstartDate endDate
sel.universal.trading.by.month = \
select max(DAY_ID) as DAY_ID \
from UF20_EDW.DIM_DATE \
where DAY_ID between {0} and {1} and TRADE_MARK = ''1'' \
group by substring(cast(DAY_ID as varchar),1,6) \
order by DAY_ID
  
# Universal
# \u901A\u7528-\u5F53\u524D\u65E5\u671F\u8303\u56F4\u5185\u6240\u6709\u5E74\u4EFD\u6700\u540E\u4E00\u4E2A\u4EA4\u6613\u65E5
# \u53C2\u6570\u4E3AstartDate endDate
sel.universal.trading.by.year = \
select max(DAY_ID) as DAY_ID \
from UF20_EDW.DIM_DATE \
where DAY_ID between {0} and {1} and TRADE_MARK = ''1'' \
group by substring(cast(DAY_ID as varchar),1,4) \
order by DAY_ID

# Universal
# \u901A\u7528-\u83B7\u53D6\u7CFB\u7EDF\u65E5\u671F
# \u65E0\u53C2\u6570
sel.universal.clear.date = \
SELECT CLEAR_DATE FROM UF20_EDW.KAP_CLEAR_DATE

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u5173\u952E\u6307\u6807-\u5DE6
# \u65E0\u53C2\u6570
sel.kpi.kpi.left = \
with \
index_main as( \
select row_number() over(order by MONTH_ID desc) as ROW_NUM, \
MONTH_ID, \
BUY_SELL_NET_INCOME_SUM, \
BUY_SELL_MARKET_RATE_SUM, \
BUY_SELL_RANK_SUM, \
SECURITY_COMPANY_NUM, \
BUY_SELL_RANK_GOAL, \
INTE_SERVICE_INCOME_SUM, \
INTE_SERVICE_INCOME_RATE, \
INTE_SERVICE_INCOME_GOAL, \
INTE_SERVICE_FINISH_RATE, \
lag(BUY_SELL_NET_INCOME_SUM,12) over(order by MONTH_ID) as BUY_SELL_NET_INCOME_SUM_LY, \
lag(BUY_SELL_RANK_SUM,12) over(order by MONTH_ID) as BUY_SELL_RANK_SUM_LY, \
lag(INTE_SERVICE_INCOME_SUM,12) over(order by MONTH_ID) as INTE_SERVICE_INCOME_SUM_LY, \
lag(INTE_SERVICE_INCOME_GOAL,12) over(order by MONTH_ID) as INTE_SERVICE_INCOME_GOAL_LY \
from DASHBOARD.KPI_SUB_DASHBOARD) \
select MONTH_ID, \
round(cast(BUY_SELL_NET_INCOME_SUM/10000 as decimal),2) as BUY_SELL_NET_INCOME_SUM, \
round(cast((case when (BUY_SELL_NET_INCOME_SUM-BUY_SELL_NET_INCOME_SUM_LY) = 0 then 0 \
when BUY_SELL_NET_INCOME_SUM_LY = 0 then 9999999999.0 \
else (BUY_SELL_NET_INCOME_SUM-BUY_SELL_NET_INCOME_SUM_LY)/BUY_SELL_NET_INCOME_SUM_LY*100 \
end) as decimal),2) as BUY_SELL_NET_INCOME_SUM_RATE, \
round(cast(BUY_SELL_MARKET_RATE_SUM as decimal)*100,4) as BUY_SELL_MARKET_RATE_SUM, \
BUY_SELL_RANK_SUM, \
SECURITY_COMPANY_NUM, \
(BUY_SELL_RANK_SUM_LY - BUY_SELL_RANK_SUM) as BUY_SELL_RANK_DIFF, \
BUY_SELL_RANK_GOAL, \
round(cast(INTE_SERVICE_INCOME_SUM/10000 as decimal),2) as INTE_SERVICE_INCOME_SUM, \
round(cast(INTE_SERVICE_INCOME_RATE*100 as decimal),2) as INTE_SERVICE_INCOME_RATE, \
round(cast((case when (INTE_SERVICE_INCOME_SUM-INTE_SERVICE_INCOME_SUM_LY) = 0 then 0 \
when INTE_SERVICE_INCOME_SUM_LY= 0 then 9999999999.0 \
else (INTE_SERVICE_INCOME_SUM-INTE_SERVICE_INCOME_SUM_LY)/INTE_SERVICE_INCOME_SUM_LY*100 \
end) as decimal),4) as INTE_SERVICE_INCOME_SUM_RATE, \
round(INTE_SERVICE_INCOME_GOAL/10000,2) as INTE_SERVICE_INCOME_GOAL, \
round(cast((case when (INTE_SERVICE_INCOME_GOAL-INTE_SERVICE_INCOME_GOAL_LY) = 0 then 0 \
when INTE_SERVICE_INCOME_GOAL_LY = 0 then 9999999999.0 \
else round((INTE_SERVICE_INCOME_GOAL-INTE_SERVICE_INCOME_GOAL_LY)/INTE_SERVICE_INCOME_GOAL_LY*100,2) \
end) as decimal),4) as INTE_SERVICE_INCOME_GOAL_RATE, \
round(INTE_SERVICE_FINISH_RATE*100,2) as INTE_SERVICE_FINISH_RATE \
from index_main \
where MONTH_ID = (select max(MONTH_ID) from DASHBOARD.KPI_SUB_DASHBOARD)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u5173\u952E\u6307\u6807-\u53F3-\u6309\u65E5
# \u65E0\u53C2\u6570
sel.kpi.kpi.right.by.day = \
select init_date, \
round(cast(coalesce(sf_amount,0)/100000000 as decimal),0) as sf_amount, \
round(cast((case when (sf_amount-yesterday_sf_amount) = 0 or (sf_amount-yesterday_sf_amount) is null then 0.0 \
when yesterday_sf_amount = 0 or yesterday_sf_amount is null then 9999999999.0 \
else (sf_amount-yesterday_sf_amount)/yesterday_sf_amount*100 end) as decimal),2) as sf_amount_rate, \
round(cast((case when sf_amount = 0 or sf_amount is null then 0.0 \
when sf_market_amount = 0 or sf_market_amount is null then 9999999999.0 \
else sf_amount/sf_market_amount *100 end) as decimal),4) as sf_amount_market_rate, \
round(cast((case when all_sf_amount = 0 or all_sf_amount is null then 0.0 \
when all_sf_market_amount = 0 or all_sf_market_amount is null then 9999999999.0 \
else all_sf_amount/all_sf_market_amount*100 end) as decimal),4) as all_sf_amount_market_rate, \
round(cast(case when (sf_market_amount = 0 or yesterday_sf_market_amount = 0 or yesterday_sf_market_amount is null) then 9999999999.0 \
else (sf_amount/sf_market_amount *100 - yesterday_sf_amount/yesterday_sf_market_amount *100) end as decimal),2) as sf_market_rate_hb, \
round(cast((case when commission = 0 or commission is null then 0.0 \
when stock_amount = 0 or stock_amount is null then 9999999999.0 \
else commission/stock_amount*1000 end) as decimal),4) as stock_commission_rate, \
round(cast(case when (stock_amount = 0 or yesterday_stock_amount = 0 or yesterday_stock_amount is null) then 9999999999.0 \
else (commission/stock_amount *100 - yesterday_commission/yesterday_stock_amount *100) end as decimal),2) as stock_commission_rate_hb, \
round(cast(coalesce(commission,0)/10000 as decimal),0) as commission, \
round(cast((case when (commission-yesterday_commission) = 0 or (commission-yesterday_commission) is null then 0.0 \
when yesterday_commission = 0 or yesterday_commission is null then 9999999999.0 \
else (commission-yesterday_commission)/yesterday_commission*100 end) as decimal),2) as commission_rate, \
round(cast(coalesce(asset,0)/100000000 as decimal),0) as asset, \
round(cast((case when (asset-yesterday_asset) = 0 or (asset-yesterday_asset) is null then 0.0 \
when yesterday_asset = 0 or yesterday_asset is null then 9999999999.0 \
else (asset-yesterday_asset)/yesterday_asset*100 end) as decimal),2) as asset_rate, \
round(cast(coalesce(margin_balance,0)/100000000 as decimal),2) as margin_balance, \
round(cast((case when (margin_balance-yesterday_margin_balance) = 0 or (margin_balance-yesterday_margin_balance) is null then 0.0 \
when yesterday_margin_balance = 0 or yesterday_margin_balance is null then 9999999999.0 \
else (margin_balance-yesterday_margin_balance)/yesterday_margin_balance*100 end) as decimal),2) as margin_balance_rate, \
round(cast((case when margin_balance = 0 or margin_balance is null then 0.0 \
when margin_market_balance = 0 or margin_market_balance is null then 9999999999.0 \
else margin_balance/margin_market_balance*100 end) as decimal),4) as margin_balance_market_rate, \
coalesce(open_cust_num,0) as open_cust_num, \
round((case when (open_cust_num-yesterday_open_cust_num) = 0 or (open_cust_num-yesterday_open_cust_num) is null then 0.0 \
when yesterday_open_cust_num = 0 or yesterday_open_cust_num is null then 9999999999.0 \
else cast((open_cust_num-yesterday_open_cust_num) as double)/cast(yesterday_open_cust_num as double)*100 \
end),2) as open_cust_num_rate \
from DASHBOARD.KPI_DASHBOARD_DAILY_DATA \
where init_date = (select max(init_date) \
from DASHBOARD.KPI_DASHBOARD_DAILY_DATA a \
inner join UF20_EDW.DIM_DATE b on a.INIT_DATE=b.DAY_ID \
where b.TRADE_MARK='1')

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u5173\u952E\u6307\u6807-\u53F3-\u4E0D\u542B\u5BA2\u6237\u8D44\u4EA7\u53CA\u878D\u8D44\u878D\u5238\u7B49\u671F\u672B\u503C\u5B57\u6BB5\u53CA\u65B0\u589E\u65E5\u5747\u8D44\u4EA7\u548C\u73AF\u6BD4-\u6309\u6708
# \u65E0\u53C2\u6570
sel.kpi.kpi.right.01.by.month = \
with \
source_main as( \
select substring(cast(INIT_DATE as char(8)) from 1 for 6) as MONTH_ID, \
sum(SF_AMOUNT) as SF_AMOUNT_MTH, \
sum(SF_MARKET_AMOUNT) as SF_MARKET_AMOUNT_MTH, \
sum(STOCK_AMOUNT) as STOCK_AMOUNT_MTH, \
sum(COMMISSION) as COMMISSION_MTH, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM \
from DASHBOARD.KPI_DASHBOARD_DAILY_DATA \
group by substring(cast(INIT_DATE as char(8)) from 1 for 6)), \
index_main as ( \
select MONTH_ID, \
SF_AMOUNT_MTH, \
lag(SF_AMOUNT_MTH) over(order by MONTH_ID) as SF_AMOUNT_LM, \
SF_MARKET_AMOUNT_MTH, \
lag(SF_MARKET_AMOUNT_MTH) over(order by MONTH_ID) as SF_MARKET_AMOUNT_LM, \
STOCK_AMOUNT_MTH, \
lag(STOCK_AMOUNT_MTH) over(order by MONTH_ID) as STOCK_AMOUNT_LM, \
COMMISSION_MTH, \
lag(COMMISSION_MTH) over(order by MONTH_ID) as COMMISSION_LM, \
OPEN_CUST_NUM, \
lag(OPEN_CUST_NUM) over(order by MONTH_ID) as OPEN_CUST_NUM_LM \
from source_main) \
select MONTH_ID, \
round(cast(SF_AMOUNT_MTH/100000000 as decimal),0) as SF_AMOUNT_MTH, \
round(cast((case when SF_AMOUNT_LM is null or SF_AMOUNT_LM = 0 then 9999999999.0 \
else (SF_AMOUNT_MTH-SF_AMOUNT_LM)/SF_AMOUNT_LM*100 end) as decimal),2) as SF_AMOUNT_MTH_RATE, \
round(cast((case when SF_MARKET_AMOUNT_MTH = 0 or SF_MARKET_AMOUNT_MTH is null then 9999999999.0 \
else SF_AMOUNT_MTH/SF_MARKET_AMOUNT_MTH*100 end) as decimal),4) as SF_AMOUNT_MARKET_MTH_RATE, \
round(cast((case when SF_MARKET_AMOUNT_MTH = 0 or SF_MARKET_AMOUNT_LM = 0 or SF_MARKET_AMOUNT_LM is null then 9999999999.0 \
else (SF_AMOUNT_MTH/SF_MARKET_AMOUNT_MTH - SF_AMOUNT_LM/SF_MARKET_AMOUNT_LM)*100 end) as decimal),2) as SF_AMOUNT_MARKET_MTH_RATE_HB, \
round(cast(case when STOCK_AMOUNT_MTH = 0 or STOCK_AMOUNT_MTH is null then 9999999999.0 \
else COMMISSION_MTH/STOCK_AMOUNT_MTH*1000 end as decimal),4) as STOCK_COMMISSION_MTH_RATE, \
round(cast((case when STOCK_AMOUNT_MTH = 0 or STOCK_AMOUNT_LM = 0 or STOCK_AMOUNT_LM is null then 9999999999.0 \
else (COMMISSION_MTH/STOCK_AMOUNT_MTH - COMMISSION_LM/STOCK_AMOUNT_LM)*100 end) as decimal),2) as STOCK_COMMISSION_MTH_RATE_HB, \
round(cast(COMMISSION_MTH/10000 as decimal),0) as COMMISSION_MTH, \
round(cast((case when COMMISSION_LM = 0 or COMMISSION_LM is null then 9999999999.0 \
else (COMMISSION_MTH-COMMISSION_LM)/COMMISSION_LM*100 end) as decimal),2) as COMMISSION_MTH_RATE, \
coalesce(OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
round(case when OPEN_CUST_NUM_LM = 0 or OPEN_CUST_NUM_LM is null then 9999999999.0 \
else cast(OPEN_CUST_NUM-OPEN_CUST_NUM_LM as double)/cast(OPEN_CUST_NUM_LM as double)*100 end,2) as OPEN_CUST_NUM_MTH_RATE \
from index_main \
where MONTH_ID = (select max(MONTH_ID) from source_main)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u5173\u952E\u6307\u6807-\u53F3-\u5BA2\u6237\u8D44\u4EA7\u53CA\u878D\u8D44\u878D\u5238\u7B49\u671F\u672B\u503C\u5B57\u6BB5-\u6309\u6708
# \u65E0\u53C2\u6570
sel.kpi.kpi.right.02.by.month = \
with trade_day as ( \
select substring(cast(INIT_DATE as char(8)) from 1 for 6) as TRADE_MONTH, \
max(INIT_DATE) as TRADE_DAY \
from DASHBOARD.KPI_DASHBOARD_DAILY_DATA \
group by substring(cast(INIT_DATE as char(8)) from 1 for 6) \
order by TRADE_DAY desc limit 2), \
index_main as( \
select TRADE_MONTH as MONTH_ID, \
ASSET, \
lag(ASSET) over(order by TRADE_DAY) as ASSET_LM, \
MARGIN_BALANCE, \
lag(MARGIN_BALANCE) over(order by TRADE_DAY) as MARGIN_BALANCE_LM, \
MARGIN_MARKET_BALANCE \
from trade_day a \
left join DASHBOARD.KPI_DASHBOARD_DAILY_DATA b on a.TRADE_DAY=b.INIT_DATE) \
select MONTH_ID, \
round(cast(ASSET/100000000 as decimal), 0) as LAST_ASSET_MTH, \
round(cast((case when ASSET_LM = 0 or ASSET_LM is null then 9999999999.0 \
else (ASSET-ASSET_LM)/ASSET_LM*100 end) as decimal), 2) as LAST_ASSET_MTH_RATE, \
round(cast(MARGIN_BALANCE/100000000 as decimal), 2) as LAST_MARGIN_BALANCE_MTH, \
round(cast((case when MARGIN_BALANCE_LM = 0 or MARGIN_BALANCE_LM is null then 9999999999.0 \
else (MARGIN_BALANCE-MARGIN_BALANCE_LM)/MARGIN_BALANCE_LM*100 end) as decimal), 2) as LAST_MARGIN_BALANCE_MTH_RATE, \
round(cast(case when MARGIN_MARKET_BALANCE = 0 or MARGIN_MARKET_BALANCE is null then 9999999999.0 \
else MARGIN_BALANCE/MARGIN_MARKET_BALANCE*100 end as decimal),4) as MARGIN_BALANCE_MARKET_RATE \
from index_main \
where MONTH_ID = (select max(TRADE_MONTH) from trade_day)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u5173\u952E\u6307\u6807-\u53F3-\u4E0D\u542B\u5BA2\u6237\u8D44\u4EA7\u53CA\u878D\u8D44\u878D\u5238\u7B49\u671F\u672B\u503C\u5B57\u6BB5\u53CA\u65B0\u589E\u65E5\u5747\u8D44\u4EA7\u548C\u540C\u6BD4-\u6309\u5E74
# \u65E0\u53C2\u6570
sel.kpi.kpi.right.01.by.year = \
with \
source_main as( \
select substring(cast(INIT_DATE as char(8)) from 1 for 6) as MONTH_ID, \
sum(SF_AMOUNT) as SF_AMOUNT_MTH, \
sum(SF_MARKET_AMOUNT) as SF_MARKET_AMOUNT_MTH, \
sum(STOCK_AMOUNT) as STOCK_AMOUNT_MTH, \
sum(COMMISSION) as COMMISSION_MTH, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM \
from DASHBOARD.kpi_dashboard_daily_data \
group by substring(cast(INIT_DATE as char(8)) from 1 for 6)), \
index_main as ( \
select MONTH_ID, \
SF_AMOUNT_MTH, \
lag(SF_AMOUNT_MTH,12) over(order by MONTH_ID) as SF_AMOUNT_LM, \
SF_MARKET_AMOUNT_MTH, \
lag(SF_MARKET_AMOUNT_MTH,12) over(order by MONTH_ID) as SF_MARKET_AMOUNT_LM, \
STOCK_AMOUNT_MTH, \
lag(STOCK_AMOUNT_MTH,12) over(order by MONTH_ID) as STOCK_AMOUNT_LM, \
COMMISSION_MTH, \
lag(COMMISSION_MTH,12) over(order by MONTH_ID) as COMMISSION_LM, \
OPEN_CUST_NUM, \
lag(OPEN_CUST_NUM,12) over(order by MONTH_ID) as OPEN_CUST_NUM_LM \
from source_main) \
select substring(cast(MONTH_ID as char(6)) from 1 for 4) as YEAR_ID, \
round(cast(sum(SF_AMOUNT_MTH)/100000000 as decimal),0) as SF_AMOUNT_MTH, \
round(cast((case when sum(SF_AMOUNT_LM) is null or sum(SF_AMOUNT_LM) = 0 then 9999999999.0 \
else (sum(SF_AMOUNT_MTH)-sum(SF_AMOUNT_LM))/sum(SF_AMOUNT_LM)*100 end) as decimal),2) as SF_AMOUNT_MTH_RATE, \
round(cast((case when sum(SF_MARKET_AMOUNT_MTH) = 0 or sum(SF_MARKET_AMOUNT_MTH) is null then 9999999999.0 \
else sum(SF_AMOUNT_MTH)/sum(SF_MARKET_AMOUNT_MTH)*100 end) as decimal),4) as SF_AMOUNT_MARKET_MTH_RATE, \
round(cast((case when sum(SF_MARKET_AMOUNT_MTH) = 0 or sum(SF_MARKET_AMOUNT_LM) = 0 or sum(SF_MARKET_AMOUNT_LM) is null then 9999999999.0 \
else (sum(SF_AMOUNT_MTH)/sum(SF_MARKET_AMOUNT_MTH) - sum(SF_AMOUNT_LM)/sum(SF_MARKET_AMOUNT_LM))*100 end) as decimal),2) as SF_AMOUNT_MARKET_MTH_RATE_HB, \
round(cast(case when sum(STOCK_AMOUNT_MTH) = 0 or sum(STOCK_AMOUNT_MTH) is null then 9999999999.0 \
else sum(COMMISSION_MTH)/sum(STOCK_AMOUNT_MTH)*1000 end as decimal),4) as STOCK_COMMISSION_MTH_RATE, \
round(cast((case when sum(STOCK_AMOUNT_MTH) = 0 or sum(STOCK_AMOUNT_LM) = 0 or sum(STOCK_AMOUNT_LM) is null then 9999999999.0 \
else (sum(COMMISSION_MTH)/sum(STOCK_AMOUNT_MTH) - sum(COMMISSION_LM)/sum(STOCK_AMOUNT_LM))*100 end) as decimal),2) as STOCK_COMMISSION_MTH_RATE_HB, \
round(cast(sum(COMMISSION_MTH)/10000 as decimal),0) as COMMISSION_MTH, \
round(cast((case when sum(COMMISSION_LM) = 0 or sum(COMMISSION_LM) is null then 9999999999.0 \
else (sum(COMMISSION_MTH)-sum(COMMISSION_LM))/sum(COMMISSION_LM)*100 end) as decimal),2) as COMMISSION_MTH_RATE, \
coalesce(sum(OPEN_CUST_NUM),0) as OPEN_CUST_NUM, \
round(case when sum(OPEN_CUST_NUM_LM) = 0 or sum(OPEN_CUST_NUM_LM) is null then 9999999999.0 \
else cast(sum(OPEN_CUST_NUM)-sum(OPEN_CUST_NUM_LM) as double)/cast(sum(OPEN_CUST_NUM_LM) as double)*100 end,2) as OPEN_CUST_NUM_MTH_RATE \
from index_main \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from source_main) \
group by substring(cast(MONTH_ID as char(6)) from 1 for 4)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u5173\u952E\u6307\u6807-\u53F3-\u5BA2\u6237\u8D44\u4EA7\u53CA\u878D\u8D44\u878D\u5238\u7B49\u671F\u672B\u503C\u5B57\u6BB5-\u6309\u5E74
# \u65E0\u53C2\u6570
sel.kpi.kpi.right.02.by.year = \
with trade_day as ( \
select substring(cast(INIT_DATE as char(8)) from 1 for 4) as TRADE_YEAR, \
max(INIT_DATE) as TRADE_DAY \
from DASHBOARD.KPI_DASHBOARD_DAILY_DATA \
group by substring(cast(INIT_DATE as char(8)) from 1 for 4) \
order by TRADE_DAY desc limit 2), \
index_main as( \
select TRADE_YEAR as YEAR_ID, \
ASSET, \
lag(ASSET) over(order by TRADE_DAY) as ASSET_LY, \
MARGIN_BALANCE, \
lag(MARGIN_BALANCE) over(order by TRADE_DAY) as MARGIN_BALANCE_LY, \
MARGIN_MARKET_BALANCE \
from trade_day a \
left join DASHBOARD.KPI_DASHBOARD_DAILY_DATA b on a.TRADE_DAY=b.INIT_DATE) \
select YEAR_ID, \
round(cast(ASSET/100000000 as decimal), 0) as LAST_ASSET_MTH, \
round(cast((case when ASSET_LY = 0 or ASSET_LY is null then 9999999999.0 \
else (ASSET-ASSET_LY)/ASSET_LY*100 end) as decimal), 2) as LAST_ASSET_MTH_RATE, \
round(cast(MARGIN_BALANCE/100000000 as decimal), 2) as LAST_MARGIN_BALANCE_MTH, \
round(cast((case when MARGIN_BALANCE_LY = 0 or MARGIN_BALANCE_LY is null then 9999999999.0 \
else (MARGIN_BALANCE-MARGIN_BALANCE_LY)/MARGIN_BALANCE_LY*100 end) as decimal), 2) as LAST_MARGIN_BALANCE_MTH_RATE, \
round(cast(case when MARGIN_MARKET_BALANCE = 0 or MARGIN_MARKET_BALANCE is null then 9999999999.0 \
else MARGIN_BALANCE/MARGIN_MARKET_BALANCE*100 end as decimal),4) as MARGIN_BALANCE_MARKET_RATE \
from index_main \
where YEAR_ID = (select max(TRADE_YEAR) from trade_day)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u5173\u952E\u6307\u6807-\u53F3-\u65B0\u589E\u65E5\u5747\u8D44\u4EA7\u548C\u540C\u6BD4\u3001\u73AF\u6BD4-\u6309\u6708\u3001\u5E74
# \u53C2\u6570fromDate toDate fromDate1 toDate1
sel.kpi.kpi.right.03 = \
with day_count as ( \
select COUNT(DISTINCT DAY_ID) as DAY_NUM \
from UF20_EDW.DIM_DATE \
where DAY_ID between {0} and {1}), \
day_count_lm as ( \
select COUNT(DISTINCT DAY_ID) as DAY_NUM_LM \
from UF20_EDW.DIM_DATE \
where DAY_ID between {2} and {3}), \
sum_amount as ( \
select sum(ASSET) as SUM_ASSET \
from REPORT.CLIENT_STATISTICS \
where INIT_DATE between {0} and {1} and OPEN_DATE between {0} and {1}), \
sum_amount_lm as ( \
select sum(ASSET) as SUM_ASSET_LM \
from REPORT.CLIENT_STATISTICS \
where INIT_DATE between {2} and {3} and OPEN_DATE between {2} and {3}) \
select round(cast((case when a.SUM_ASSET = 0 or a.SUM_ASSET is null then 0.0 \
when b.DAY_NUM = 0 or b.DAY_NUM is null then 9999999999.0 \
else a.SUM_ASSET/b.DAY_NUM end) as decimal)/100000000,2) as AVG_ASSET_MTH, \
round(cast((case when c.SUM_ASSET_LM = 0 or c.SUM_ASSET_LM is null then 9999999999.0 \
when a.SUM_ASSET = 0 or a.SUM_ASSET is null then 0.0 \
else (a.SUM_ASSET/b.DAY_NUM - c.SUM_ASSET_LM/d.DAY_NUM_LM)/(c.SUM_ASSET_LM/d.DAY_NUM_LM)*100 end) as decimal),2) as AVG_ASSET_MTH_RATE \
from sum_amount a,day_count b,sum_amount_lm c,day_count_lm d

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u4E1A\u52A1\u7EE9\u6548-\u516C\u53F8\u4EE3\u7406\u4E70\u5356\u4EA4\u6613\u91CF\u5F53\u6708\u53CA\u7D2F\u8BA1\u5E02\u5360\u7387\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
sel.kpi.trend.performance.01 = \
with main as( \
select MONTH_ID, \
BUY_SELL_AMOUNT, \
lag(BUY_SELL_AMOUNT) over(order by MONTH_ID) as BUY_SELL_AMOUNT_PER, \
BUY_SELL_RATE_ZHEJIANG, \
BUY_SELL_RATE_ZHEJIANG_SUM, \
BUY_SELL_RATE_CHINA, \
BUY_SELL_RATE_CHINA_SUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(BUY_SELL_AMOUNT/100000000 as decimal),2) as BUY_SELL_AMOUNT, \
round(cast((case when (BUY_SELL_AMOUNT-BUY_SELL_AMOUNT_PER) = 0 then 0.0000 \
when BUY_SELL_AMOUNT_PER = 0 or BUY_SELL_AMOUNT_PER is null then 9999999999.0000 \
else (BUY_SELL_AMOUNT-BUY_SELL_AMOUNT_PER)/BUY_SELL_AMOUNT_PER*100 \
end) as decimal),2) as BUY_SELL_AMOUNT_RATE, \
round(cast(BUY_SELL_RATE_ZHEJIANG*100 as decimal),4) as BUY_SELL_RATE_ZHEJIANG, \
round(cast(BUY_SELL_RATE_ZHEJIANG_SUM*100 as decimal),4) as BUY_SELL_RATE_ZHEJIANG_SUM, \
round(cast(BUY_SELL_RATE_CHINA*100 as decimal),4) as BUY_SELL_MARKET_RATE, \
round(cast(BUY_SELL_RATE_CHINA_SUM*100 as decimal),4) as BUY_SELL_MARKET_RATE_SUM \
from main \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u4E1A\u52A1\u7EE9\u6548-\u516C\u53F8\u4E24\u878D\u5E02\u5360\u7387\u548C\u603B\u4EA4\u6613\u5E02\u5360\u7387\u7684\u5355\u6708\u8D8B\u52BF\u5BF9\u6BD4\u56FE
# \u53C2\u6570fromDate toDate
# \u73AF\u6BD4\u5220\u9664\u5206\u6BCD
sel.kpi.trend.performance.02 = \
with main as( \
select MONTH_ID, \
MARGIN_TRADING_MARKET_RATE, \
lag(MARGIN_TRADING_MARKET_RATE) over(order by MONTH_ID) as MARGIN_TRADING_MARKET_RATE_PER, \
ALL_TRADING_MARKET_RATE, \
lag(ALL_TRADING_MARKET_RATE) over(order by MONTH_ID) as ALL_TRADING_MARKET_RATE_PER \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(MARGIN_TRADING_MARKET_RATE*100 as decimal),4) as MARGIN_TRADING_MARKET_RATE, \
round(cast((case when (MARGIN_TRADING_MARKET_RATE-MARGIN_TRADING_MARKET_RATE_PER) = 0 then 0.0000 \
when MARGIN_TRADING_MARKET_RATE_PER = 0 or MARGIN_TRADING_MARKET_RATE_PER is null then 9999999999.0000 \
else (MARGIN_TRADING_MARKET_RATE-MARGIN_TRADING_MARKET_RATE_PER)*100 \
end) as decimal),2) as MARGIN_TRADING_MARKET_RATE_MOM, \
round(cast(ALL_TRADING_MARKET_RATE as decimal)*100,4) as ALL_TRADING_MARKET_RATE, \
round(cast((case when (ALL_TRADING_MARKET_RATE-ALL_TRADING_MARKET_RATE_PER) = 0 then 0.0000 \
when ALL_TRADING_MARKET_RATE_PER = 0 or ALL_TRADING_MARKET_RATE_PER is null then 9999999999.0000 \
else (ALL_TRADING_MARKET_RATE-ALL_TRADING_MARKET_RATE_PER)*100 \
end) as decimal),2) as ALL_TRADING_MARKET_RATE_MOM \
from main \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u4E1A\u52A1\u7EE9\u6548-\u516C\u53F8\u548C\u5E02\u573A\u7684\u5355\u6708\u51C0\u4F63\u91D1\u8D39\u7387\u8D8B\u52BF\u5BF9\u6BD4\u56FE
# \u53C2\u6570fromDate toDate
sel.kpi.trend.performance.03 = \
select MONTH_ID, \
round(cast(STOCK_TRADING_FEE_RATE*1000 as decimal),4) as STOCK_TRADING_FEE_RATE, \
round(cast(MARGIN_TRADING_FEE_RATE*1000 as decimal),4) as MARGIN_TRADING_FEE_RATE, \
round(cast(CTZQ_NET_COMMISSION_FEE_RATE*1000 as decimal),4) as CTZQ_NET_COMMISSION_FEE_RATE, \
round(cast(MARKET_NET_COMMISSION_FEE_RATE*1000 as decimal),4) as MARKET_NET_COMMISSION_FEE_RATE \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u4E1A\u52A1\u7EE9\u6548-\u4E24\u878D\u4F59\u989D\u53CA\u5E02\u5360\u7387\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
# \u73AF\u6BD4\u5220\u9664\u5206\u6BCD
sel.kpi.trend.performance.04 = \
with main as ( \
select MONTH_ID, \
MARGIN_TRADING_BALANCE, \
lag(MARGIN_TRADING_BALANCE) over(order by MONTH_ID) as MARGIN_TRADING_BALANCE_LM, \
lag(MARGIN_TRADING_BALANCE,12) over(order by MONTH_ID) as MARGIN_TRADING_BALANCE_LY, \
MARGIN_TRADING_MARKET_RATE, \
lag(MARGIN_TRADING_MARKET_RATE) over(order by MONTH_ID) as MARGIN_TRADING_MARKET_RATE_LM \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(MARGIN_TRADING_BALANCE/100000000 as decimal),2) as MARGIN_TRADING_BALANCE, \
round(cast((case when (MARGIN_TRADING_BALANCE-MARGIN_TRADING_BALANCE_LM) = 0 then 0.0000 \
when MARGIN_TRADING_BALANCE_LM = 0 or MARGIN_TRADING_BALANCE_LM is null then 9999999999.0000 \
else (MARGIN_TRADING_BALANCE-MARGIN_TRADING_BALANCE_LM)/MARGIN_TRADING_BALANCE_LM*100 \
end) as decimal),2) as MARGIN_TRADING_BALANCE_MOM, \
round(cast((case when (MARGIN_TRADING_BALANCE-MARGIN_TRADING_BALANCE_LY) = 0 then 0.0000 \
when MARGIN_TRADING_BALANCE_LY = 0 or MARGIN_TRADING_BALANCE_LY is null then 9999999999.0000 \
else (MARGIN_TRADING_BALANCE-MARGIN_TRADING_BALANCE_LY)/MARGIN_TRADING_BALANCE_LY*100 \
end) as decimal),2) as MARGIN_TRADING_BALANCE_YOY, \
round(cast(MARGIN_TRADING_MARKET_RATE*100 as decimal),4) as MARGIN_TRADING_MARKET_RATE, \
round(cast((case when (MARGIN_TRADING_MARKET_RATE-MARGIN_TRADING_MARKET_RATE_LM) = 0 then 0.0000 \
when MARGIN_TRADING_MARKET_RATE_LM = 0 or MARGIN_TRADING_MARKET_RATE_LM is null then 9999999999.0000 \
else (MARGIN_TRADING_MARKET_RATE-MARGIN_TRADING_MARKET_RATE_LM)*100 \
end) as decimal),2) as MARGIN_TRADING_MARKET_RATE_MOM  \
from main \
order by MONTH_ID desc limit 13
  
# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u4E1A\u52A1\u7EE9\u6548-\u5206\u516C\u53F8KPI\u6307\u6807\u5B8C\u6210\u60C5\u51B5
# \u65E0\u53C2\u6570
sel.kpi.trend.performance.05 = \
select b.NAME as BRANCH_NAME, \
round(cast(a.MARKET_RATE as decimal),4) as MARKET_RATE, \
(case when a.BRANCH_ID in ('3370','2050') then 9999999999.00 \
else round(cast(a.MARKET_RATE_COMPLETE_RATE*100 as decimal),2) end) as MARKET_RATE_COMPLETE_RATE, \
round(cast(a.PROFIT/10000 as decimal),2) as PROFIT, \
(case when a.BRANCH_ID in ('3370','2050') then 9999999999.00 \
else round(cast(a.PROFIT_COMPLETE_RATE*100 as decimal),2) end) as PROFIT_COMPLETE_RATE \
from DASHBOARD.KPI_BRANCH a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_ID=b.ID \
where a.MONTH_ID = (select max(MONTH_ID) from DASHBOARD.KPI_BRANCH) \
and b.CATEGORY = '' and b.NAME like '%\u5206\u516C\u53F8' \
order by a.MARKET_RATE desc

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u4E1A\u52A1\u7EE9\u6548-\u8425\u4E1A\u90E8\u7ECF\u8425\u60C5\u51B5
# \u65E0\u53C2\u6570
sel.kpi.trend.performance.06 = \
with \
max_month as (select distinct max(MONTH_ID) as MAX_MONTH \
from DASHBOARD.KPI_BRANCH), \
branch_main1 as ( \
select BRANCH_ID, \
KPI_INCOME, \
PROFIT \
from DASHBOARD.KPI_BRANCH a \
inner join max_month b on a.MONTH_ID = b.MAX_MONTH), \
branch_main2 as ( \
select BRANCH_CODE, \
ALL_TRADE_AMOUNT \
from REPORT.TRADE_STATISTICS_MONTHLY a \
inner join max_month b on a.INIT_MONTH = b.MAX_MONTH \
) \
select c.PROVINCE, \
c.CITY, \
c.NAME as BRANCH_NAME, \
c.LAT, \
c.LNG, \
round(cast(coalesce(b.ALL_TRADE_AMOUNT,0)/10000 as decimal),2) as TRADE_AMOUNT, \
round(cast(coalesce(a.KPI_INCOME,0)/10000 as decimal),2) as KPI_INCOME, \
round(cast(coalesce(a.PROFIT,0)/10000 as decimal),2) as PROFIT  \
from branch_main1 a \
left join branch_main2 b on a.BRANCH_ID=b.BRANCH_CODE \
left join UF20_EDW.DIM_BRANCH c on a.BRANCH_ID=c.ID

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u4E1A\u52A1\u7EE9\u6548-TOP25\u5BB6\u5238\u5546\u4EA4\u6613\u91CF(\u80A1+\u57FA)\u53CA\u5E02\u573A\u4EFD\u989D\u6392\u884C
# \u65E0\u53C2\u6570
sel.kpi.trend.performance.07 = \
with \
max_month as (select distinct max(MONTH_ID) as MAX_MONTH \
from DASHBOARD.KPI_MARKET_RANK), \
main as (select SECU_ID, \
SECU_NAME, \
MONTH_ID, \
MARKET_RANK, \
SECU_AMOUNT, \
lag(SECU_AMOUNT) over(partition by SECU_ID order by MONTH_ID) as SECU_AMOUNT_LM, \
SECU_RATE, \
ALL_SECU_AMOUNT, \
lag(ALL_SECU_AMOUNT,12) over (partition by SECU_ID order by MONTH_ID) as ALL_SECU_AMOUNT_LY, \
ALL_SECU_RATE, \
MARKET_RANK_CHANGE \
from DASHBOARD.KPI_MARKET_RANK), \
his_rank as (select SECU_ID, \
substring(cast(MONTH_ID as char(8)),1,4) as YEAR_ID, \
MARKET_RANK as MARKET_RANK_LY \
from DASHBOARD.KPI_MARKET_RANK \
where substring(cast(MONTH_ID as char(8)),5,2) = '12') \
select MONTH_ID, \
substring(SECU_NAME,1,4) as SECU_NAME, \
MARKET_RANK, \
round(cast(SECU_AMOUNT/100000000 as decimal),2) as SECU_AMOUNT, \
round(cast(SECU_RATE*100 as decimal),2) as SECU_RATE, \
round(cast((case when (SECU_AMOUNT-SECU_AMOUNT_LM) = 0 then 0.0 \
when SECU_AMOUNT_LM = 0 or SECU_AMOUNT_LM is null then 9999999999.0 \
else (SECU_AMOUNT-SECU_AMOUNT_LM)/SECU_AMOUNT_LM*100 end) as decimal),2) as SECU_RATE_MOM, \
round(cast(ALL_SECU_AMOUNT/100000000 as decimal),2) as ALL_SECU_AMOUNT, \
round(cast(ALL_SECU_RATE*100 as decimal),2) as ALL_SECU_RATE, \
round(cast((case when (ALL_SECU_AMOUNT-ALL_SECU_AMOUNT_LY) = 0 then 0.0 \
when ALL_SECU_AMOUNT_LY = 0 or ALL_SECU_AMOUNT_LY is null then 9999999999.0 \
else (ALL_SECU_AMOUNT-ALL_SECU_AMOUNT_LY)/ALL_SECU_AMOUNT_LY*100 end) as decimal),2) as ALL_SECU_RATE_YOY, \
MARKET_RANK_CHANGE, \
(MARKET_RANK_LY - MARKET_RANK) as MARKET_RANK_CHANGE_YOY \
from max_month a \
left join main b on a.MAX_MONTH=b.MONTH_ID \
left join his_rank c on b.SECU_ID=c.SECU_ID \
and cast(cast(substring(cast(a.MAX_MONTH as char(8)),1,4) as int)-1 as char(4)) = c.YEAR_ID \
where MARKET_RANK <= 25 \
order by MARKET_RANK

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u6536\u5165\u652F\u51FA-\u4EE3\u7406\u4E70\u5356\u51C0\u6536\u5165\u5E02\u5360\u7387\u53CA\u6392\u540D
# \u53C2\u6570fromDate toDate
sel.kpi.trend.income.expenditure.01 = \
with main as ( \
select MONTH_ID, \
BUY_SELL_NET_INCOME, \
BUY_SELL_MARKET_RATE, \
BUY_SELL_RANK, \
SECURITY_COMPANY_NUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(BUY_SELL_NET_INCOME/10000 as decimal),2) as BUY_SELL_NET_INCOME, \
round(cast(BUY_SELL_MARKET_RATE*100 as decimal),4) as BUY_SELL_MARKET_RATE, \
BUY_SELL_RANK, \
concat(concat(cast(BUY_SELL_RANK as varchar),'/'),cast(SECURITY_COMPANY_NUM as varchar)) as BUY_SELL_RANK_LABEL \
from main \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u6536\u5165\u652F\u51FA-\u7ECF\u7EAA\u4E1A\u52A1\u4E3B\u8981\u6536\u5165\u5360\u6BD4\u53D8\u52A8
# \u65E0\u53C2\u6570
sel.kpi.trend.income.expenditure.02 = \
with base as ( \
select MONTH_ID, \
(case when BROKER_FEE_COMMISSION_INCOME = 0 or BROKER_FEE_COMMISSION_INCOME is null then lag(BROKER_FEE_COMMISSION_INCOME) over(order by MONTH_ID) \
else BROKER_FEE_COMMISSION_INCOME end) as BROKER_FEE_COMMISSION_INCOME, \
(case when BROKER_INTEREST_INCOME = 0 or BROKER_INTEREST_INCOME is null then lag(BROKER_INTEREST_INCOME) over(order by MONTH_ID) \
else BROKER_INTEREST_INCOME end) as BROKER_INTEREST_INCOME, \
(case when MARGIN_TRADING_BALANCE_DIVID = 0 or MARGIN_TRADING_BALANCE_DIVID is null then lag(MARGIN_TRADING_BALANCE_DIVID) over(order by MONTH_ID) \
else MARGIN_TRADING_BALANCE_DIVID end) as MARGIN_TRADING_BALANCE_DIVID, \
(case when BROKER_INTE_SERVICE_INCOME = 0 or BROKER_INTE_SERVICE_INCOME is null then lag(BROKER_INTE_SERVICE_INCOME) over(order by MONTH_ID) \
else BROKER_INTE_SERVICE_INCOME end) as BROKER_INTE_SERVICE_INCOME \
from DASHBOARD.KPI_SUB_DASHBOARD), \
main as ( \
select MONTH_ID, \
coalesce(BROKER_FEE_COMMISSION_INCOME,0) as BROKER_FEE_COMMISSION_INCOME, \
coalesce(BROKER_INTEREST_INCOME,0) as BROKER_INTEREST_INCOME, \
coalesce(MARGIN_TRADING_BALANCE_DIVID,0) as MARGIN_TRADING_BALANCE_DIVID, \
coalesce(BROKER_INTE_SERVICE_INCOME,0) as BROKER_INTE_SERVICE_INCOME, \
(coalesce(BROKER_FEE_COMMISSION_INCOME,0)+coalesce(BROKER_INTEREST_INCOME,0)+coalesce(MARGIN_TRADING_BALANCE_DIVID,0)+coalesce(BROKER_INTE_SERVICE_INCOME,0)) as TOTAL \
from base) \
select MONTH_ID, \
round(cast(BROKER_FEE_COMMISSION_INCOME as decimal)/10000,2) as BROKER_FEE_COMMISSION_INCOME, \
round(cast((case when BROKER_FEE_COMMISSION_INCOME = 0 then 0.0 \
when TOTAL = 0 then 9999999999.00 \
else BROKER_FEE_COMMISSION_INCOME/TOTAL*100 end) as decimal),2) as BROKER_FEE_COMMISSION_INCOME_RATE, \
round(cast(BROKER_INTEREST_INCOME as decimal)/10000,2) as BROKER_INTEREST_INCOME, \
round(cast((case when BROKER_INTEREST_INCOME = 0 then 0.0 \
when TOTAL = 0 then 9999999999.00 \
else BROKER_INTEREST_INCOME/TOTAL*100 end) as decimal),2) as BROKER_INTEREST_INCOME_RATE, \
round(cast(MARGIN_TRADING_BALANCE_DIVID as decimal)/10000,2) as MARGIN_TRADING_BALANCE_DIVID, \
round(cast((case when MARGIN_TRADING_BALANCE_DIVID = 0 then 0.0 \
when TOTAL = 0 then 9999999999.00 \
else MARGIN_TRADING_BALANCE_DIVID/TOTAL*100 end) as decimal),2) as MARGIN_TRADING_BALANCE_DIVID_RATE, \
round(cast(BROKER_INTE_SERVICE_INCOME as decimal)/10000,2) as BROKER_INTE_SERVICE_INCOME, \
round(cast((case when BROKER_INTE_SERVICE_INCOME = 0 then 0.0 \
when TOTAL = 0 then 9999999999.00 \
else BROKER_INTE_SERVICE_INCOME/TOTAL*100 end) as decimal),2) as BROKER_INTE_SERVICE_INCOME_RATE \
from main \
order by MONTH_ID desc limit 2

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u6536\u5165\u652F\u51FA-\u4F63\u91D1\u6536\u5165\u589E\u957F\u8D8B\u52BF\u56FE
# \u53C2\u6570fromDate toDate
sel.kpi.trend.income.expenditure.03 = \
with main as ( \
select MONTH_ID, \
BROKER_FEE_COMMISSION_INCOME, \
lag(BROKER_FEE_COMMISSION_INCOME) over(order by MONTH_ID) as BROKER_FEE_COMMISSION_INCOME_LM \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(coalesce(BROKER_FEE_COMMISSION_INCOME,0)/10000 as decimal),2) as BROKER_FEE_COMMISSION_INCOME, \
round(cast((case when BROKER_FEE_COMMISSION_INCOME = 0 or BROKER_FEE_COMMISSION_INCOME is null then 0.00 \
when BROKER_FEE_COMMISSION_INCOME_LM = 0 or BROKER_FEE_COMMISSION_INCOME_LM is null then 9999999999.00 \
else (BROKER_FEE_COMMISSION_INCOME-BROKER_FEE_COMMISSION_INCOME_LM)/BROKER_FEE_COMMISSION_INCOME_LM*100 \
end) as decimal),2) as BROKER_FEE_COMMISSION_INCOME_MOM \
from main \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u6536\u5165\u652F\u51FA-\u4E24\u878D\u4F59\u989D\u606F\u8D39\u5206\u6210
# \u53C2\u6570fromDate toDate
sel.kpi.trend.income.expenditure.04 = \
with main_list as ( \
select MONTH_ID, \
MARGIN_TRADING_BALANCE_DIVID, \
lag(MARGIN_TRADING_BALANCE_DIVID) over(order by MONTH_ID) as MARGIN_TRADING_BALANCE_DIVID_LM, \
sum(MARGIN_TRADING_BALANCE_DIVID) over(partition by substring(cast(MONTH_ID as varchar),1,4) order by MONTH_ID) as MARGIN_TRADING_BALANCE_DIVID_SUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID), \
main as ( \
select MONTH_ID, \
MARGIN_TRADING_BALANCE_DIVID, \
MARGIN_TRADING_BALANCE_DIVID_LM, \
MARGIN_TRADING_BALANCE_DIVID_SUM, \
lag(MARGIN_TRADING_BALANCE_DIVID_SUM,12) over(order by MONTH_ID) as MARGIN_TRADING_BALANCE_DIVID_LY_SUM \
from main_list) \
select MONTH_ID, \
round(cast(coalesce(MARGIN_TRADING_BALANCE_DIVID,0)/10000 as decimal),2) as MARGIN_TRADING_BALANCE_DIVID, \
round(cast((case when (MARGIN_TRADING_BALANCE_DIVID-MARGIN_TRADING_BALANCE_DIVID_LM) = 0 or (MARGIN_TRADING_BALANCE_DIVID-MARGIN_TRADING_BALANCE_DIVID_LM) is null then 0.00 \
when MARGIN_TRADING_BALANCE_DIVID_LM = 0 or MARGIN_TRADING_BALANCE_DIVID_LM is null then 9999999999.00 \
else (MARGIN_TRADING_BALANCE_DIVID-MARGIN_TRADING_BALANCE_DIVID_LM)/MARGIN_TRADING_BALANCE_DIVID_LM*100 \
end) as decimal),2) as MARGIN_TRADING_BALANCE_DIVID_MOM, \
round(cast(coalesce(MARGIN_TRADING_BALANCE_DIVID_SUM,0)/10000 as decimal),2) as MARGIN_TRADING_BALANCE_DIVID_SUM, \
round(cast((case when (MARGIN_TRADING_BALANCE_DIVID_SUM-MARGIN_TRADING_BALANCE_DIVID_LY_SUM) = 0 or (MARGIN_TRADING_BALANCE_DIVID_SUM-MARGIN_TRADING_BALANCE_DIVID_LY_SUM) is null then 0.00 \
when MARGIN_TRADING_BALANCE_DIVID_LY_SUM = 0 or MARGIN_TRADING_BALANCE_DIVID_LY_SUM is null then 9999999999.00 \
else (MARGIN_TRADING_BALANCE_DIVID_SUM-MARGIN_TRADING_BALANCE_DIVID_LY_SUM)/MARGIN_TRADING_BALANCE_DIVID_LY_SUM*100 \
end) as decimal),2) as MARGIN_TRADING_BALANCE_DIVID_SUM_YOY \
from main \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u6536\u5165\u652F\u51FA-\u6210\u672C\u652F\u51FA\u53D8\u5316\u8D8B\u52BF\u56FE&\u56FA\u5B9A\u8D39\u7528\u5404\u9879\u652F\u51FA\u8D8B\u52BF\u56FE
# \u53C2\u6570fromDate toDate
sel.kpi.trend.income.expenditure.05 = \
with main as ( \
select MONTH_ID, \
(case when ALL_EXPENSES = 0 or ALL_EXPENSES is null then lag(ALL_EXPENSES) over(order by MONTH_ID) \
else ALL_EXPENSES end) as ALL_EXPENSES, \
lag(ALL_EXPENSES) over(order by MONTH_ID) as ALL_EXPENSES_LM, \
(case when TAXES_EXPENSES = 0 or TAXES_EXPENSES is null then lag(TAXES_EXPENSES) over(order by MONTH_ID) \
else TAXES_EXPENSES end) as TAXES_EXPENSES, \
lag(TAXES_EXPENSES) over(order by MONTH_ID) as TAXES_EXPENSES_LM, \
(case when PROTECTION_FUND_EXPENSES = 0 or PROTECTION_FUND_EXPENSES is null then lag(PROTECTION_FUND_EXPENSES) over(order by MONTH_ID) \
else PROTECTION_FUND_EXPENSES end) as PROTECTION_FUND_EXPENSES, \
lag(PROTECTION_FUND_EXPENSES) over(order by MONTH_ID) as PROTECTION_FUND_EXPENSES_LM, \
(case when MANAGEMENT_FEE_EXPENSES = 0 or MANAGEMENT_FEE_EXPENSES is null then lag(MANAGEMENT_FEE_EXPENSES) over(order by MONTH_ID) \
else MANAGEMENT_FEE_EXPENSES end) as MANAGEMENT_FEE_EXPENSES, \
lag(MANAGEMENT_FEE_EXPENSES) over(order by MONTH_ID) as MANAGEMENT_FEE_EXPENSES_LM, \
(case when FIXED_EXPENSES = 0 or FIXED_EXPENSES is null then lag(FIXED_EXPENSES) over(order by MONTH_ID) \
else FIXED_EXPENSES end) as FIXED_EXPENSES, \
lag(FIXED_EXPENSES) over(order by MONTH_ID) as FIXED_EXPENSES_LM, \
(case when CHANGE_EXPENSES = 0 or CHANGE_EXPENSES is null then lag(CHANGE_EXPENSES) over(order by MONTH_ID) \
else CHANGE_EXPENSES end) as CHANGE_EXPENSES, \
lag(CHANGE_EXPENSES) over(order by MONTH_ID) as CHANGE_EXPENSES_LM, \
(case when HR_EXPENSES = 0 or HR_EXPENSES is null then lag(HR_EXPENSES) over(order by MONTH_ID) \
else HR_EXPENSES end) as HR_EXPENSES, \
lag(HR_EXPENSES) over(order by MONTH_ID) as HR_EXPENSES_LM \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(coalesce(ALL_EXPENSES,0)/10000 as decimal),2) as ALL_EXPENSES, \
round(cast((case when (ALL_EXPENSES-ALL_EXPENSES_LM) = 0 or (ALL_EXPENSES-ALL_EXPENSES_LM) is null then 0.00 \
when ALL_EXPENSES_LM = 0 or ALL_EXPENSES_LM is null then 9999999999.00 \
else (ALL_EXPENSES-ALL_EXPENSES_LM)/ALL_EXPENSES_LM*100 \
end) as decimal),2) as ALL_EXPENSES_MOM, \
round(cast(coalesce(TAXES_EXPENSES,0)/10000 as decimal),2) as TAXES_EXPENSES, \
round(cast((case when (TAXES_EXPENSES-TAXES_EXPENSES_LM) = 0 or (TAXES_EXPENSES-TAXES_EXPENSES_LM) is null then 0.00 \
when TAXES_EXPENSES_LM = 0 or TAXES_EXPENSES_LM is null then 9999999999.00 \
else (TAXES_EXPENSES-TAXES_EXPENSES_LM)/TAXES_EXPENSES_LM*100 \
end) as decimal),2) as TAXES_EXPENSES_MOM, \
round(cast(coalesce(PROTECTION_FUND_EXPENSES,0)/10000 as decimal),2) as PROTECTION_FUND_EXPENSES, \
round(cast((case when (PROTECTION_FUND_EXPENSES-PROTECTION_FUND_EXPENSES_LM) = 0 or (PROTECTION_FUND_EXPENSES-PROTECTION_FUND_EXPENSES_LM) is null then 0.00 \
when PROTECTION_FUND_EXPENSES_LM = 0 or PROTECTION_FUND_EXPENSES_LM is null then 9999999999.00 \
else (PROTECTION_FUND_EXPENSES-PROTECTION_FUND_EXPENSES_LM)/PROTECTION_FUND_EXPENSES_LM*100 \
end) as decimal),2) as PROTECTION_FUND_EXPENSES_MOM, \
round(cast(coalesce(MANAGEMENT_FEE_EXPENSES,0)/10000 as decimal),2) as MANAGEMENT_FEE_EXPENSES, \
round(cast((case when (MANAGEMENT_FEE_EXPENSES-MANAGEMENT_FEE_EXPENSES_LM) = 0 or (MANAGEMENT_FEE_EXPENSES-MANAGEMENT_FEE_EXPENSES_LM) is null then 0.00 \
when MANAGEMENT_FEE_EXPENSES_LM = 0 or MANAGEMENT_FEE_EXPENSES_LM is null then 9999999999.00 \
else (MANAGEMENT_FEE_EXPENSES-MANAGEMENT_FEE_EXPENSES_LM)/MANAGEMENT_FEE_EXPENSES_LM*100 \
end) as decimal),2) as MANAGEMENT_FEE_EXPENSES_MOM, \
round(cast(coalesce(FIXED_EXPENSES,0)/10000 as decimal),2) as FIXED_EXPENSES, \
round(cast((case when (FIXED_EXPENSES-FIXED_EXPENSES_LM) = 0 or (FIXED_EXPENSES-FIXED_EXPENSES_LM) is null then 0.00 \
when FIXED_EXPENSES_LM = 0 or FIXED_EXPENSES_LM is null then 9999999999.00 \
else (FIXED_EXPENSES-FIXED_EXPENSES_LM)/FIXED_EXPENSES_LM*100 \
end) as decimal),2) as FIXED_EXPENSES_MOM, \
round(cast(coalesce(CHANGE_EXPENSES,0)/10000 as decimal),2) as CHANGE_EXPENSES, \
round(cast((case when (CHANGE_EXPENSES-CHANGE_EXPENSES_LM) = 0 or (CHANGE_EXPENSES-CHANGE_EXPENSES_LM) is null then 0.00 \
when CHANGE_EXPENSES_LM = 0 or CHANGE_EXPENSES_LM is null then 9999999999.00 \
else (CHANGE_EXPENSES-CHANGE_EXPENSES_LM)/CHANGE_EXPENSES_LM*100 \
end) as decimal),2) as CHANGE_EXPENSES_MOM, \
round(cast(coalesce(HR_EXPENSES,0)/10000 as decimal),2) as HR_EXPENSES, \
round(cast((case when (HR_EXPENSES-HR_EXPENSES_LM) = 0 or (HR_EXPENSES-HR_EXPENSES_LM) is null then 0.00 \
when HR_EXPENSES_LM = 0 or HR_EXPENSES_LM is null then 9999999999.00 \
else (HR_EXPENSES-HR_EXPENSES_LM)/HR_EXPENSES_LM*100 \
end) as decimal),2) as HR_EXPENSES_MOM \
from main \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)


# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u6536\u5165\u652F\u51FA-\u7ECF\u6D4E\u4E1A\u52A1\u5229\u6DA6\u53D8\u5316\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
sel.kpi.trend.income.expenditure.06 = \
with main as ( \
select MONTH_ID, \
BROKER_PROFIT_GOAL, \
lag(BROKER_PROFIT_GOAL) over(order by MONTH_ID) as BROKER_PROFIT_GOAL_LM, \
BROKER_PROFIT, \
BROKER_PROFIT_INDEX_GOAL, \
sum(BROKER_PROFIT_GOAL) over(partition by substring(cast(MONTH_ID as varchar),1,4) order by MONTH_ID) as BROKER_PROFIT_GOAL_SUM, \
BROKER_PROFIT_INDEX_GOAL_ING as BROKER_PROFIT_INDEX_GOAL_SUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(coalesce(BROKER_PROFIT_GOAL,0)/10000 as decimal),2) as BROKER_PROFIT_GOAL, \
round(cast(coalesce(BROKER_PROFIT,0)/10000 as decimal),2) as BROKER_PROFIT, \
round(cast((case when (BROKER_PROFIT_GOAL-BROKER_PROFIT_GOAL_LM) = 0 or (BROKER_PROFIT_GOAL-BROKER_PROFIT_GOAL_LM) is null then 0.00 \
when BROKER_PROFIT_GOAL_LM = 0 or BROKER_PROFIT_GOAL_LM is null then 9999999999.00 \
else (BROKER_PROFIT_GOAL-BROKER_PROFIT_GOAL_LM)/BROKER_PROFIT_GOAL_LM*100 \
end) as decimal),2) as BROKER_PROFIT_GOAL_MOM, \
round(cast(coalesce(BROKER_PROFIT_GOAL_SUM,0)/10000 as decimal),2) as BROKER_PROFIT_GOAL_SUM, \
round(cast(coalesce(BROKER_PROFIT_INDEX_GOAL_SUM,0)/10000 as decimal),2) as BROKER_PROFIT_INDEX_GOAL_SUM, \
round(cast((case when BROKER_PROFIT_GOAL_SUM = 0 or BROKER_PROFIT_GOAL_SUM is null then 0.00 \
when BROKER_PROFIT_INDEX_GOAL_SUM = 0 or BROKER_PROFIT_INDEX_GOAL_SUM is null then 9999999999.00 \
else BROKER_PROFIT_GOAL_SUM/BROKER_PROFIT_INDEX_GOAL_SUM*100 \
end) as decimal),2) as BROKER_PROFIT_GOAL_RATE \
from main \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u6536\u5165\u652F\u51FA-\u5404\u7C7B\u7F51\u70B9\u8003\u6838\u5E02\u5360\u7387\u53CA\u5229\u6DA6\u53D8\u5316\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
sel.kpi.trend.income.expenditure.07 = \
select MONTH_ID, \
round(cast(coalesce(CENTER_BRANCH_PROFIT,0)/10000 as decimal),2) as CENTER_BRANCH_PROFIT, \
round(cast(coalesce(A_BRANCH_PROFIT,0)/10000 as decimal),2) as A_BRANCH_PROFIT, \
round(cast(coalesce(B_BRANCH_PROFIT,0)/10000 as decimal),2) as B_BRANCH_PROFIT, \
round(cast(coalesce(C_BRANCH_PROFIT,0)/10000 as decimal),2) as C_BRANCH_PROFIT, \
round(cast(coalesce(D_BRANCH_PROFIT,0)/10000 as decimal),2) as D_BRANCH_PROFIT, \
round(cast(coalesce(X_BRANCH_PROFIT,0)/10000 as decimal),2) as X_BRANCH_PROFIT, \
round(cast(coalesce(SENCOND_BRANCH_PROFIT,0)/10000 as decimal),2) as SECOND_BRANCH_PROFIT, \
round(cast(coalesce(CENTER_BRANCH_MARKET_RATE,0)*100 as decimal),4) as CENTER_BRANCH_MARKET_RATE, \
round(cast(coalesce(A_BRANCH_MARKET_RATE,0)*100 as decimal),4) as A_BRANCH_MARKET_RATE, \
round(cast(coalesce(B_BRANCH_MARKET_RATE,0)*100 as decimal),4) as B_BRANCH_MARKET_RATE, \
round(cast(coalesce(C_BRANCH_MARKET_RATE,0)*100 as decimal),4) as C_BRANCH_MARKET_RATE, \
round(cast(coalesce(D_BRANCH_MARKET_RATE,0)*100 as decimal),4) as D_BRANCH_MARKET_RATE, \
round(cast(coalesce(X_BRANCH_MARKET_RATE,0)*100 as decimal),4) as X_BRANCH_MARKET_RATE, \
round(cast(coalesce(SENCOND_BRANCH_MARKET_RATE,0)*100 as decimal),4) as SECOND_BRANCH_MARKET_RATE \
from DASHBOARD.KPI_SUB_DASHBOARD \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u516C\u53F8\u5BA2\u6237\u8D44\u4EA7\u53D8\u52A8\u4E0E\u5E02\u573A\u89C4\u6A21\u5BF9\u6807
# \u53C2\u6570fromDate toDate
sel.kpi.trend.customer.01 = \
with main as ( \
select MONTH_ID, \
asset, \
lag(asset) over(order by MONTH_ID) as asset_LM, \
market_balance, \
lag(market_balance) over(order by MONTH_ID) as market_balance_LM, \
secu_balance, \
lag(secu_balance) over(order by MONTH_ID) as secu_balance_LM \
from DASHBOARD.KPI_01_SUB_DASHBOARD \
order by MONTH_ID) \
select MONTH_ID, \
round(cast(coalesce(asset/100000000,0) as decimal),2) as asset, \
round(cast((case when (asset-asset_LM) = 0 or (asset-asset_LM) is null then 0.00 \
when asset_LM = 0 or asset_LM is null then 9999999999.00 \
else (asset-asset_LM)/asset_LM*100 \
end) as decimal),2) as asset_MOM , \
round(cast(coalesce(market_balance/1000000000000,0) as decimal),2) as market_balance, \
round(cast((case when (market_balance-market_balance_LM) = 0 or (market_balance-market_balance_LM) is null then 0.00 \
when market_balance_LM = 0 or market_balance_LM is null then 9999999999.00 \
else (market_balance-market_balance_LM)/market_balance_LM*100 \
end) as decimal),2) as market_balance_MOM, \
round(cast(coalesce(secu_balance/100000000,0) as decimal),2) assecu_balance, \
round(cast((case when (secu_balance-secu_balance_LM) = 0 or (secu_balance-secu_balance_LM) is null then 0.00 \
when secu_balance_LM = 0 or secu_balance_LM is null then 9999999999.00 \
else (secu_balance-secu_balance_LM)/secu_balance_LM*100 \
end) as decimal),2) as secu_balance_MOM \
from main \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u8D44\u4EA7\u4FDD\u503C\u7387\u53CA\u8D44\u4EA7\u5468\u8F6C\u7387\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
sel.kpi.trend.customer.02 = \
with base as ( \
select a.MONTH_ID, \
AVG_AMOUNT*b.days as AVG_AMOUNT_DAY, \
AVG_AMOUNT, \
ALL_AVG_AMOUNT, \
ALL_AVG_AMOUNT*sum(days) over(partition by b.YEAR_ID order by a.month_id) as ALL_AVG_AMOUNT_YEAR, \
AVG_ASSET, \
lag(AVG_ASSET) over(order by a.MONTH_ID) as AVG_ASSET_LM, \
lag(AVG_ASSET,12) over(order by a.MONTH_ID) as AVG_ASSET_LY, \
ALL_AVG_ASSET, \
lag(ALL_AVG_ASSET,12) over(order by a.MONTH_ID) as ALL_AVG_ASSET_LY, \
MARKET_BALANCE, \
lag(MARKET_BALANCE) over(order by a.MONTH_ID) as MARKET_BALANCE_LM, \
lag(MARKET_BALANCE,12) over(order by a.MONTH_ID) as MARKET_BALANCE_LY \
from DASHBOARD.KPI_01_SUB_DASHBOARD a \
join ( \
select cast(concat(substring(MONTH_ID,1,4), substring(MONTH_ID,6,2)) as integer) as MONTH_ID,YEAR_ID, count(distinct DAY_ID) as days \
from UF20_EDW.DIM_DATE \
where  TRADE_MARK = '1' \
group by cast(concat(substring(MONTH_ID,1,4), substring(MONTH_ID,6,2)) as integer),YEAR_ID \
) b \
on a.MONTH_ID = b.MONTH_ID \
order by a.MONTH_ID) \
select MONTH_ID, \
round(cast((case when (AVG_ASSET/AVG_ASSET_LM) = 0 or (AVG_ASSET/AVG_ASSET_LM) is null then 0.0 \
when MARKET_BALANCE = 0 or (MARKET_BALANCE/MARKET_BALANCE_LM) = 0 or (MARKET_BALANCE/MARKET_BALANCE_LM) is null then 9999999999.0 \
else (AVG_ASSET/AVG_ASSET_LM)/(MARKET_BALANCE/MARKET_BALANCE_LM)*100 end) as decimal),2) as ASSET_HEDGE_RATE, \
round(cast((case when AVG_AMOUNT = 0 or AVG_AMOUNT is null then 0.0 \
when AVG_ASSET = 0 or AVG_ASSET is null then 9999999999.0 \
else AVG_AMOUNT_DAY/AVG_ASSET*100 end) as decimal),2) as ASSET_TURNOVER_RATE, \
round(cast((case when (ALL_AVG_ASSET/ALL_AVG_ASSET_LY) = 0 or (ALL_AVG_ASSET/ALL_AVG_ASSET_LY) is null then 0.0 \
when MARKET_BALANCE = 0 or (MARKET_BALANCE/MARKET_BALANCE_LY) = 0 or (MARKET_BALANCE/MARKET_BALANCE_LY) is null then 9999999999.0 \
else (ALL_AVG_ASSET/ALL_AVG_ASSET_LY)/(MARKET_BALANCE/MARKET_BALANCE_LY)*100 end) as decimal),2) as ASSET_TURNOVER_RATE_SUM, \
round(cast((case when ALL_AVG_AMOUNT = 0 or ALL_AVG_AMOUNT is null then 0.0 \
when ALL_AVG_ASSET = 0 or ALL_AVG_ASSET is null then 9999999999.0 \
else ALL_AVG_AMOUNT_YEAR/ALL_AVG_ASSET*100 end) as decimal),2) as ASSET_HEDGE_RATE_SUM \
from base a \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u5BA2\u6237\u4E1A\u52A1\u7C7B\u578B \u5BA2\u6237\u8D44\u4EA7\u7ED3\u6784
# \u53C2\u6570endDate
sel.kpi.trend.customer.03 = \
select a.MONTH_ID, \
b.BUSINESSFLAG_NAME, \
a.CUST_NUM \
from DASHBOARD.KPI_03_SUB_DASHBOARD a \
join UF20_EDW.USER_DEFINE_CODE b on a.TYPE_CODE = b.TYPE_CODE \
and a.BUSINESS_CODE = b.BUSINESSFLAG_CODE \
where a.MONTH_ID = (select max(MONTH_ID) from DASHBOARD.KPI_03_SUB_DASHBOARD) \
order by a.CUST_NUM desc

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u51C0\u5B58\u5165\u8D44\u91D1\u4E0E\u51C0\u8F6C\u5165\u5E02\u503C\u53D8\u5316\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
sel.kpi.trend.customer.04 = \
select MONTH_ID, \
round(cast(coalesce(in_capital/100000000,0) as decimal),2) as in_capital, \
round(cast((sum(in_capital) over(order by MONTH_ID))/100000000 as decimal),2) as in_capital_sum, \
round(cast(coalesce(in_value/100000000,0) as decimal),2) as in_value, \
round(cast((sum(in_value) over(order by MONTH_ID))/100000000 as decimal),2) as in_value_sum \
from DASHBOARD.KPI_01_SUB_DASHBOARD \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u516C\u53F8\u53CA\u5168\u56FD\u65B0\u589E\u5F00\u6237\u6570\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
sel.kpi.trend.customer.05 = \
select MONTH_ID, \
round(cast(NEW_CUSTOM as decimal),0) as NEW_CUSTOM, \
round(cast(NEW_CUSTOM_MARKET_RATE as decimal)*100,2) as NEW_CUSTOM_MARKET_RATE \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u516C\u53F8\u53CA\u5168\u56FD\u7D2F\u8BA1\u65B0\u589E\u5F00\u6237\u6570\u8D8B\u52BF
# \u53C2\u6570fromDate toDate fromDate1 toDate1
sel.kpi.trend.customer.06 = \
select a.MONTH_ID, \
a.NEW_CUSTOM_SUM as NEW_CUSTOM_SUM_LY, \
a.NEW_CUSTOM_MARKET_RATE_SUM as NEW_CUSTOM_MARKET_RATE_SUM_LY, \
b.NEW_CUSTOM_SUM, \
b.NEW_CUSTOM_MARKET_RATE_SUM \
from ( \
select substring(cast(MONTH_ID as varchar),5,2) as MONTH_ID, \
round(cast(NEW_CUSTOM_SUM as decimal),0) as NEW_CUSTOM_SUM, \
round(cast(NEW_CUSTOM_MARKET_RATE_SUM as decimal)*100,2) as NEW_CUSTOM_MARKET_RATE_SUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID-100 as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)) a \
left join ( \
select substring(cast(MONTH_ID as varchar),5,2) as MONTH_ID, \
round(cast(NEW_CUSTOM_SUM as decimal),0) as NEW_CUSTOM_SUM, \
round(cast(NEW_CUSTOM_MARKET_RATE_SUM as decimal)*100,2) as NEW_CUSTOM_MARKET_RATE_SUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)) b on a.MONTH_ID=b.MONTH_ID \
order by a.MONTH_ID

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u65B0\u5F00\u6237\u8D44\u4EA7\u989D\u53CA\u4EA4\u6613\u4F63\u91D1\u8D8B\u52BF
# \u53C2\u6570fromDate toDate
sel.kpi.trend.customer.07 = \
select MONTH_ID, \
round(cast(NEW_CUSTOM_ASSET/100000000 as decimal),2) as NEW_CUSTOM_ASSET, \
round(cast(NEW_CUSTOM_COMMISSION/10000 as decimal),2) as NEW_CUSTOM_COMMISSION  \
from DASHBOARD.KPI_SUB_DASHBOARD \
order by MONTH_ID desc limit 13

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u65B0\u5F00\u6237\u8D44\u4EA7\u989D\u53CA\u4EA4\u6613\u4F63\u91D1\u7D2F\u8BA1\u8D8B\u52BF
# \u53C2\u6570fromDate toDate fromDate1 toDate1
sel.kpi.trend.customer.08 = \
select a.MONTH_ID, \
a.NEW_CUSTOM_ASSET_SUM as NEW_CUSTOM_ASSET_SUM_LY, \
a.NEW_CUSTOM_COMMISSION_SUM as NEW_CUSTOM_COMMISSION_SUM_LY, \
b.NEW_CUSTOM_ASSET_SUM, \
b.NEW_CUSTOM_COMMISSION_SUM  \
from ( \
select substring(cast(MONTH_ID as varchar),5,2) as MONTH_ID, \
round(cast(NEW_CUSTOM_ASSET_SUM/100000000 as decimal),2) as NEW_CUSTOM_ASSET_SUM, \
round(cast(NEW_CUSTOM_COMMISSION_SUM/10000 as decimal),2) as NEW_CUSTOM_COMMISSION_SUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID-100 as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)) a \
left join ( \
select substring(cast(MONTH_ID as varchar),5,2) as MONTH_ID, \
round(cast(NEW_CUSTOM_ASSET_SUM/100000000 as decimal),2) as NEW_CUSTOM_ASSET_SUM, \
round(cast(NEW_CUSTOM_COMMISSION_SUM/10000 as decimal),2) as NEW_CUSTOM_COMMISSION_SUM \
from DASHBOARD.KPI_SUB_DASHBOARD \
where substring(cast(MONTH_ID as char(6)) from 1 for 4) = (select max(substring(cast(MONTH_ID as char(6)) from 1 for 4)) from DASHBOARD.KPI_SUB_DASHBOARD)) b on a.MONTH_ID=b.MONTH_ID \
order by MONTH_ID

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u8FD1\u4E00\u6708\u65B0\u589E\u5BA2\u6237\u53CA\u4F63\u91D1\u5206\u5E03
# \u65E0\u53C2\u6570
sel.kpi.trend.customer.09 = \
select a.MONTH_ID, \
b.PROVINCE, \
round(cast(sum(a.open_cust_num) as decimal),0) as open_sum, \
round(cast(sum(a.reward_cust_num) as decimal),0) as  reward_sum, \
round(cast(sum(a.commission)/100000000 as decimal),2) as  commission_sum \
from DASHBOARD.KPI_02_SUB_DASHBOARD a \
join UF20_EDW.DIM_BRANCH b on a.branch_code = b.ID \
where a.MONTH_ID = (select max(MONTH_ID) from DASHBOARD.KPI_02_SUB_DASHBOARD) \
group by a.month_id,b.PROVINCE

# KPIController
# \u9886\u5BFC\u9A7E\u9A76\u8231-KPI-\u8D8B\u52BF\u5206\u6790-\u5BA2\u6237\u8D44\u4EA7-\u6D59\u6C5F\u7701\u7684\u65B0\u5BA2\u53CA\u65B0\u5BA2\u4EA4\u6613\u4F63\u91D1
# \u65E0\u53C2\u6570
sel.kpi.trend.customer.10 = \
select a.MONTH_ID, \
b.PROVINCE, \
b.CITY, \
round(cast(sum(a.open_cust_num) as decimal),0) as open_sum, \
round(cast(sum(a.reward_cust_num) as decimal),0) as  reward_sum, \
round(cast(sum(a.commission)/100000000 as decimal),2) as  commission_sum \
from DASHBOARD.KPI_02_SUB_DASHBOARD a \
join UF20_EDW.DIM_BRANCH b on a.branch_code = b.ID \
where a.MONTH_ID = (select max(MONTH_ID) from DASHBOARD.KPI_02_SUB_DASHBOARD) \
and b.PROVINCE='\u6D59\u6C5F' \
group by a.month_id,b.PROVINCE,b.city

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u6307\u6570\u6982\u89C8-\u6309\u65E5
# \u65E0\u53C2\u6570
sel.market.k.line.by.day = \
select SECU_CODE, \
INIT_DATE, \
OPEN_PRICE, \
HIGH_PRICE, \
LOW_PRICE, \
CLOSE_PRICE \
from JY.JY_K_DAY \
where secu_code in({0}) and init_date>={1} \
order by SECU_CODE,INIT_DATE

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u57FA\u4EA4\u6613-\u80A1\u57FA\u4EA4\u6613\u4FE1\u606F\u6982\u89C8-\u5168\u56FD\u80A1\u57FA\u603B\u5E02\u503C-\u6309\u5929\u3001\u6708\u3001\u5E74
# \u53C2\u6570endDate preEndDate
sel.market.stock.fund.by.date.01 = \
WITH \
total_sf as ( \
select INIT_DATE, \
       (SH_TOTAL_STOCK_BALANCE + SH_TOTAL_FUND_BALANCE + SZ_TOTAL_STOCK_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_SF \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {0}), \
total_sf_base as ( \
select INIT_DATE, \
       (SH_TOTAL_STOCK_BALANCE + SH_TOTAL_FUND_BALANCE + SZ_TOTAL_STOCK_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_SF \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {1}), \
sf as ( \
select INIT_DATE, \
       sum(SECU_BALANCE) as SF \
from REPORT.ASSET_CHANGE_DETAIL_DAILY \
where INIT_DATE = {0} \
group by INIT_DATE), \
sf_base as ( \
select INIT_DATE, \
       sum(SECU_BALANCE) as SF \
from REPORT.ASSET_CHANGE_DETAIL_DAILY \
where INIT_DATE = {1} \
group by INIT_DATE) \
select sort_id,name,detail,mom \
from ( \
select 1 as sort_id, ''\u5168\u56FD\u80A1\u57FA\u603B\u5E02\u503C'' as name, \
       round(cast(coalesce(a.TOTAL_SF,0)/100000000 as decimal),2) as detail, \
       round(cast((case when (a.TOTAL_SF-b.TOTAL_SF) = 0 or (a.TOTAL_SF-b.TOTAL_SF) is null then 0.0 \
when b.TOTAL_SF = 0 or b.TOTAL_SF is null then 9999999999.0 \
else (a.TOTAL_SF-b.TOTAL_SF)/b.TOTAL_SF*100 end) as decimal),2) as mom \
from total_sf a \
left join total_sf_base b on 1=1 \
union \
select 2 as sort_id, ''\u516C\u53F8\u80A1\u57FA\u603B\u5E02\u503C'' as name, \
       round(cast(coalesce(a.SF,0)/100000000 as decimal),2) as detail, \
       round(cast((case when (a.SF-b.SF) = 0 or (a.SF-b.SF) is null then 0.0 \
            when b.SF = 0 or b.SF is null then 9999999999.0 \
       else (a.SF-b.SF)/b.SF*100 end) as decimal),2) as mom \
from sf a \
left join sf_base b on 1=1 \
union \
select 3 as sort_id, ''\u516C\u53F8\u80A1\u57FA\u4EA4\u6613\u989D\u5E02\u573A\u5360\u6709\u7387'' as name, \
       round(cast((case when c.SF = 0 or c.SF is null then 0 \
            when a.TOTAL_SF = 0 or a.TOTAL_SF is null then 9999999999.0 \
       else c.SF/a.TOTAL_SF*100 end) as decimal),2) as detail, \
round(cast((case when (c.SF*10000/a.TOTAL_SF - d.SF*10000/b.TOTAL_SF) = 0 or \
(c.SF*10000/a.TOTAL_SF - d.SF*10000/b.TOTAL_SF) is null then 0.0 \
when (d.SF*10000/b.TOTAL_SF) = 0 or (d.SF*10000/b.TOTAL_SF) is null then 9999999999.0 \
else (c.SF*10000/a.TOTAL_SF - d.SF*10000/b.TOTAL_SF)*100 end) as decimal),2) as mom \
from total_sf a \
left join total_sf_base b on 1=1 \
left join sf c on 1=1 \
left join sf_base d on 1=1 \
where 1=1) \
order by sort_id

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u7968\u4EA4\u6613-\u80A1\u7968\u4EA4\u6613\u4FE1\u606F\u6982\u89C8-\u5168\u56FD\u80A1\u7968\u6570\u636E-\u6309\u5929\u3001\u6708\u3001\u5E74
# \u53C2\u6570endDate preEndDate
sel.market.stock.by.date.01 = \
WITH \
total_s as ( \
select INIT_DATE, \
       (SH_TOTAL_STOCK_BALANCE + SZ_TOTAL_STOCK_BALANCE + STB_TOTAL_STOCK_BALANCE) as TOTAL_S, \
       SH_TOTAL_STOCK_BALANCE as TOTAL_S_SH, \
       SZ_TOTAL_STOCK_BALANCE as TOTAL_S_SZ, \
       STB_TOTAL_STOCK_BALANCE as TOTAL_S_STB \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {0}), \
total_s_base as ( \
select INIT_DATE, \
       (SH_TOTAL_STOCK_BALANCE + SZ_TOTAL_STOCK_BALANCE + STB_TOTAL_STOCK_BALANCE) as TOTAL_S, \
       SH_TOTAL_STOCK_BALANCE as TOTAL_S_SH, \
       SZ_TOTAL_STOCK_BALANCE as TOTAL_S_SZ, \
       STB_TOTAL_STOCK_BALANCE as TOTAL_S_STB \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {1}), \
s as ( \
select INIT_DATE, \
       sum(STOCK_BALANCE) as S, \
       sum(SH_A_BALANCE+SH_B_BALANCE) as S_SH, \
       sum(SZ_A_BALANCE+SZ_B_BALANCE) as S_SZ, \
       sum(STB_BALANCE) as S_STB \
from REPORT.ASSET_CHANGE_DAILY \
where INIT_DATE = {0} \
group by INIT_DATE), \
s_base as ( \
select INIT_DATE, \
       sum(STOCK_BALANCE) as S, \
       sum(SH_A_BALANCE+SH_B_BALANCE) as S_SH, \
       sum(SZ_A_BALANCE+SZ_B_BALANCE) as S_SZ, \
       sum(STB_BALANCE) as S_STB \
from REPORT.ASSET_CHANGE_DAILY \
where INIT_DATE = {1} \
group by INIT_DATE) \
select sort_id,name,detail,mom \
from ( \
select 1 as sort_id, ''\u5168\u56FD\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.TOTAL_S,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.TOTAL_S-b.TOTAL_S) = 0 or (a.TOTAL_S-b.TOTAL_S) is null then 0.0 \
when b.TOTAL_S = 0 or b.TOTAL_S is null then 9999999999.0 \
else (a.TOTAL_S-b.TOTAL_S)/b.TOTAL_S*100 end) as decimal),2) as mom \
from total_s a \
left join total_s_base b on 1=1 \
union \
select 2 as sort_id, ''\u6CAA\u5E02\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.TOTAL_S_SH,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.TOTAL_S_SH-b.TOTAL_S_SH) = 0 or (a.TOTAL_S_SH-b.TOTAL_S_SH) is null then 0.0 \
when b.TOTAL_S_SH = 0 or b.TOTAL_S_SH is null then 9999999999.0 \
else (a.TOTAL_S_SH-b.TOTAL_S_SH)/b.TOTAL_S_SH*100 end) as decimal),2) as mom \
from total_s a \
left join total_s_base b on 1=1 \
union \
select 3 as sort_id, ''\u6DF1\u5E02\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.TOTAL_S_SZ,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.TOTAL_S_SZ-b.TOTAL_S_SZ) = 0 or (a.TOTAL_S_SZ-b.TOTAL_S_SZ) is null then 0.0 \
when b.TOTAL_S_SZ = 0 or b.TOTAL_S_SZ is null then 9999999999.0 \
else (a.TOTAL_S_SZ-b.TOTAL_S_SZ)/b.TOTAL_S_SZ*100 end) as decimal),2) as mom \
from total_s a \
left join total_s_base b on 1=1 \
union \
select 4 as sort_id, ''\u80A1\u8F6C\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.TOTAL_S_STB,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.TOTAL_S_STB-b.TOTAL_S_STB) = 0 or (a.TOTAL_S_STB-b.TOTAL_S_STB) is null then 0.0 \
when b.TOTAL_S_STB = 0 or b.TOTAL_S_STB is null then 9999999999.0 \
else (a.TOTAL_S_STB-b.TOTAL_S_STB)/b.TOTAL_S_STB*100 end) as decimal),2) as mom \
from total_s a \
left join total_s_base b on 1=1 \
union \
select 5 as sort_id, ''\u516C\u53F8\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.S,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.S-b.S) = 0 or (a.S-b.S) is null then 0.0 \
when b.S = 0 or b.S is null then 9999999999.0 \
else (a.S-b.S)/b.S*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
union \
select 6 as sort_id, ''\u6CAA\u5E02\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.S_SH,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.S_SH-b.S_SH) = 0 or (a.S_SH-b.S_SH) is null then 0.0 \
when b.S_SH = 0 or b.S_SH is null then 9999999999.0 \
else (a.S_SH-b.S_SH)/b.S_SH*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
union \
select 7 as sort_id, ''\u6DF1\u5E02\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.S_SZ,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.S_SZ-b.S_SZ) = 0 or (a.S_SZ-b.S_SZ) is null then 0.0 \
when b.S_SZ = 0 or b.S_SZ is null then 9999999999.0 \
else (a.S_SZ-b.S_SZ)/b.S_SZ*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
union \
select 8 as sort_id, ''\u80A1\u8F6C\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.S_STB,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.S_STB-b.S_STB) = 0 or (a.S_STB-b.S_STB) is null then 0.0 \
when b.S_STB = 0 or b.S_STB is null then 9999999999 \
else (a.S_STB-b.S_STB)/b.S_STB*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
union \
select 9 as sort_id, ''\u6E2F\u80A1\u901A\u80A1\u7968\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.S_STB,0) as decimal)/100000000,2) as detail, \
round(cast((case when (a.S_STB-b.S_STB) = 0 or (a.S_STB-b.S_STB) is null then 0.0 \
when b.S_STB = 0 or b.S_STB is null then 9999999999 \
else (a.S_STB-b.S_STB)/b.S_STB*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
union \
select 10 as sort_id, ''\u516C\u53F8\u80A1\u7968\u5E02\u503C\u5360\u6709\u7387'' as name, \
round(cast((case when a.S = 0 or a.S is null then 0.0 \
when c.TOTAL_S = 0 or c.TOTAL_S is null then 9999999999 \
else a.S/c.TOTAL_S*100 end) as decimal),2) as detail, \
round(cast((case when (a.S/c.TOTAL_S-b.S/d.TOTAL_S) = 0 or (a.S/c.TOTAL_S-b.S/d.TOTAL_S) is null then 0.0 \
when b.S/d.TOTAL_S = 0 or b.S/d.TOTAL_S is null then 9999999999 \
else (a.S/c.TOTAL_S-b.S/d.TOTAL_S)*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
left join total_s c on 1=1 \
left join total_s_base d on 1=1 \
union \
select 11 as sort_id, ''\u80A1\u7968\u5E02\u503C\u6CAA\u5E02\u5360\u6709\u7387'' as name, \
round(cast((case when a.S_SH = 0 or a.S_SH is null then 0.0 \
when c.TOTAL_S_SH = 0 or c.TOTAL_S_SH is null then 9999999999.0 \
else a.S_SH/c.TOTAL_S_SH*100 end) as decimal),2) as detail, \
round(cast((case when c.TOTAL_S_SH = 0 or c.TOTAL_S_SH is null or d.TOTAL_S_SH = 0 or d.TOTAL_S_SH is null then 9999999999.0 \
when a.S_SH = 0 or a.S_SH is null then b.S_SH/d.TOTAL_S_SH*100 \
when b.S_SH = 0 or b.S_SH is null then a.S_SH/c.TOTAL_S_SH*100 \
else (a.S_SH/c.TOTAL_S_SH-b.S_SH/d.TOTAL_S_SH)*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
left join total_s c on 1=1 \
left join total_s_base d on 1=1 \
union \
select 12 as sort_id, ''\u80A1\u7968\u5E02\u503C\u6DF1\u5E02\u5360\u6709\u7387'' as name, \
round(cast((case when a.S_SZ = 0 or a.S_SZ is null then 0.0 \
when c.TOTAL_S_SZ = 0 or c.TOTAL_S_SZ is null then 9999999999.0 \
else a.S_SZ/c.TOTAL_S_SZ*100 end) as decimal),2) as detail, \
round(cast((case when (a.S_SZ/c.TOTAL_S_SZ-b.S_SZ/d.TOTAL_S_SZ) = 0 or (a.S_SZ/c.TOTAL_S_SZ-b.S_SZ/d.TOTAL_S_SZ) is null then 0.0 \
when (b.S_SZ/d.TOTAL_S_SZ) = 0 or (b.S_SZ/d.TOTAL_S_SZ) is null then 9999999999.0 \
else (a.S_SZ/c.TOTAL_S_SZ-b.S_SZ/d.TOTAL_S_SZ)*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
left join total_s c on 1=1 \
left join total_s_base d on 1=1 \
union \
select 13 as sort_id, ''\u80A1\u7968\u5E02\u503C\u80A1\u8F6C\u5360\u6709\u7387'' as name, \
round(cast((case when a.S_STB = 0 or a.S_STB is null then 0.0 \
when c.TOTAL_S_STB = 0 or c.TOTAL_S_STB is null then 9999999999 \
else a.S_STB/c.TOTAL_S_STB*100 end) as decimal),2) as detail, \
round(cast((case when (a.S_STB/c.TOTAL_S_STB-b.S_STB/d.TOTAL_S_STB) = 0 or (a.S_STB/c.TOTAL_S_STB-b.S_STB/d.TOTAL_S_STB) is null then 0.0 \
when (b.S_STB/d.TOTAL_S_STB) = 0 or (b.S_STB/d.TOTAL_S_STB) is null then 9999999999.0 \
else (a.S_STB/c.TOTAL_S_STB-b.S_STB/d.TOTAL_S_STB)*100 end) as decimal),2) as mom \
from s a \
left join s_base b on 1=1 \
left join total_s c on 1=1 \
left join total_s_base d on 1=1 \
) \
order by sort_id

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u57FA\u91D1\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u6CAA\u6DF1\u4E24\u5E02\u57FA\u91D1\u603B\u5E02\u503C\u8D8B\u52BF-\u5168\u56FD\u6CAA\u6DF1\u57FA\u91D1\u603B\u5E02\u503C\u8D8B\u52BF\u56FE-\u6309\u5929\u3001\u6708\u3001\u5E74
# \u53C2\u6570endDate preEndDate
sel.market.fund.by.date.01 = \
WITH \
total_f as ( \
select INIT_DATE, \
       (SH_TOTAL_FUND_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_F, \
       SH_TOTAL_FUND_BALANCE as TOTAL_F_SH, \
       SZ_TOTAL_FUND_BALANCE as TOTAL_F_SZ \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {0}), \
total_f_base as ( \
select INIT_DATE, \
       (SH_TOTAL_FUND_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_F, \
       SH_TOTAL_FUND_BALANCE as TOTAL_F_SH, \
       SZ_TOTAL_FUND_BALANCE as TOTAL_F_SZ \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {1}), \
f as ( \
select INIT_DATE, \
       sum(FUND_BALANCE) as F, \
       sum(SH_FUND_BALANCE) as F_SH, \
       sum(SZ_FUND_BALANCE) as F_SZ \
from REPORT.ASSET_CHANGE_DAILY \
where INIT_DATE = {0} \
group by INIT_DATE), \
f_base as ( \
select INIT_DATE, \
       sum(FUND_BALANCE) as F, \
       sum(SH_FUND_BALANCE) as F_SH, \
       sum(SZ_FUND_BALANCE) as F_SZ \
from REPORT.ASSET_CHANGE_DAILY \
where INIT_DATE = {1}       \
group by INIT_DATE) \
select sort_id,name,detail,mom \
from ( \
select 1 as sort_id, ''\u5168\u56FD\u6CAA\u6DF1\u57FA\u91D1\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.TOTAL_F,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.TOTAL_F-b.TOTAL_F) = 0 or (a.TOTAL_F-b.TOTAL_F) is null then 0.0 \
when b.TOTAL_F = 0 or b.TOTAL_F is null then 9999999999.0 \
else (a.TOTAL_F-b.TOTAL_F)/b.TOTAL_F*100 end) as decimal),2) as mom \
from total_f a \
left join total_f_base b on 1=1 \
union \
select 2 as sort_id, ''\u6CAA\u5E02\u57FA\u91D1\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.TOTAL_F_SH,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.TOTAL_F_SH-b.TOTAL_F_SH) = 0 or (a.TOTAL_F_SH-b.TOTAL_F_SH) is null then 0.0 \
when b.TOTAL_F_SH = 0 or b.TOTAL_F_SH is null then 9999999999.0 \
else (a.TOTAL_F_SH-b.TOTAL_F_SH)/b.TOTAL_F_SH*100 end) as decimal),2) as mom \
from total_f a \
left join total_f_base b on 1=1 \
union \
select 3 as sort_id, ''\u6DF1\u5E02\u57FA\u91D1\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.TOTAL_F_SZ,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.TOTAL_F_SZ-b.TOTAL_F_SZ) = 0 or (a.TOTAL_F_SZ-b.TOTAL_F_SZ) is null then 0.0 \
when b.TOTAL_F_SZ = 0 or b.TOTAL_F_SZ is null then 9999999999.0 \
else (a.TOTAL_F_SZ-b.TOTAL_F_SZ)/b.TOTAL_F_SZ*100 end) as decimal),2) as mom \
from total_f a \
left join total_f_base b on 1=1 \
union \
select 4 as sort_id, ''\u516C\u53F8\u6CAA\u6DF1\u57FA\u91D1\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.F,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.F-b.F) = 0 or (a.F-b.F) is null then 0.0 \
when b.F = 0 or b.F is null then 9999999999.0 \
else (a.F-b.F)/b.F*100 end) as decimal),2) as mom \
from f a \
left join f_base b on 1=1 \
union \
select 5 as sort_id, ''\u6CAA\u5E02\u57FA\u91D1\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.F_SH,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.F_SH-b.F_SH) = 0 or (a.F_SH-b.F_SH) is null then 0.0 \
when b.F_SH = 0 or b.F_SH is null then 9999999999.0 \
else (a.F_SH-b.F_SH)/b.F_SH*100 end) as decimal),2) as mom \
from f a \
left join f_base b on 1=1 \
union \
select 6 as sort_id, ''\u6DF1\u5E02\u57FA\u91D1\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.F_SZ,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.F_SZ-b.F_SZ) = 0 or (a.F_SZ-b.F_SZ) is null then 0.0 \
when b.F_SZ = 0 or b.F_SZ is null then 9999999999 \
else (a.F_SZ-b.F_SZ)/b.F_SZ*100 end) as decimal),2) as mom \
from f a \
left join f_base b on 1=1 \
union \
select 7 as sort_id, ''\u516C\u53F8\u57FA\u91D1\u5E02\u503C\u6CAA\u6DF1\u5360\u6709\u7387'' as name, \
round(cast((case when a.F = 0 or a.F is null then 0.0 \
when c.TOTAL_F = 0 or c.TOTAL_F is null then 9999999999.0 \
else a.F/c.TOTAL_F*100 end) as decimal),2) as detail, \
round(cast((case when (a.F/c.TOTAL_F-b.F/d.TOTAL_F) = 0 or (a.F/c.TOTAL_F-b.F/d.TOTAL_F) is null then 0.0 \
when b.F/d.TOTAL_F = 0 or b.F/d.TOTAL_F is null then 9999999999.0 \
else (a.F/c.TOTAL_F-b.F/d.TOTAL_F)*100 end) as decimal),2) as mom \
from f a \
left join f_base b on 1=1 \
left join total_f c on 1=1 \
left join total_f_base d on 1=1 \
union \
select 8 as sort_id, ''\u57FA\u91D1\u5E02\u503C\u6CAA\u5E02\u5360\u6709\u7387'' as name, \
round(cast((case when a.F_SH = 0 or a.F_SH is null then 0.0 \
when c.TOTAL_F_SH = 0 or c.TOTAL_F_SH is null then 9999999999.0 \
else a.F_SH/c.TOTAL_F_SH*100 end) as decimal),2) as detail, \
round(cast((case when (a.F_SH/c.TOTAL_F_SH-b.F_SH/d.TOTAL_F_SH) = 0 or (a.F_SH/c.TOTAL_F_SH-b.F_SH/d.TOTAL_F_SH) is null then 0.0 \
when (b.F_SH/d.TOTAL_F_SH) = 0 or (b.F_SH/d.TOTAL_F_SH) is null then 9999999999.0 \
else (a.F_SH/c.TOTAL_F_SH-b.F_SH/d.TOTAL_F_SH)*100 end) as decimal),2) as mom \
from f a \
left join f_base b on 1=1 \
left join total_f c on 1=1 \
left join total_f_base d on 1=1 \
union \
select 9 as sort_id, ''\u57FA\u91D1\u5E02\u503C\u6DF1\u5E02\u5360\u6709\u7387'' as name, \
round(cast((case when a.F_SZ = 0 or a.F_SZ is null then 0.0 \
when c.TOTAL_F_SZ = 0 or c.TOTAL_F_SZ is null then 9999999999.0 \
else a.F_SZ/c.TOTAL_F_SZ*100 end) as decimal),2) as detail, \
round(cast((case when (a.F_SZ/c.TOTAL_F_SZ-b.F_SZ/d.TOTAL_F_SZ) = 0 or (a.F_SZ/c.TOTAL_F_SZ-b.F_SZ/d.TOTAL_F_SZ) is null then 0.0 \
when (b.F_SZ/d.TOTAL_F_SZ) = 0 or (b.F_SZ/d.TOTAL_F_SZ) is null then 9999999999.0 \
else (a.F_SZ/c.TOTAL_F_SZ-b.F_SZ/d.TOTAL_F_SZ)*100 end) as decimal),2) as mom \
from f a \
left join f_base b on 1=1 \
left join total_f c on 1=1 \
left join total_f_base d on 1=1 \
) \
order by sort_id

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u878D\u8D44\u878D\u5238-\u878D\u8D44\u878D\u5238\u4FE1\u606F\u6982\u89C8-\u5168\u5E02\u573A\u878D\u8D44\u878D\u5238\u6307\u6807-\u6309\u5929,\u6708,\u5E74
# \u53C2\u6570endDate preEndDate
sel.market.margin.by.day.01 = \
WITH \
total_fin_slo as ( \
select INIT_DATE, \
       (SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE + SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_FIN_SLO, \
       (SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE) as TOTAL_FIN, \
       (SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_SLO \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {0}), \
total_fin_slo_base as ( \
select INIT_DATE, \
       (SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE + SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_FIN_SLO, \
       (SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE) as TOTAL_FIN, \
       (SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_SLO \
from WIND.MARKET_TRADE_STATISTICS \
where INIT_DATE = {1}), \
fin_slo as ( \
select INIT_DATE, \
       sum(FINANCE_DEBIT_BALANCE + SECURITY_DEBIT_AMOUNT) as FIN_SLO, \
       sum(FINANCE_DEBIT_BALANCE) as FIN, \
       sum(SECURITY_DEBIT_AMOUNT) as SLO \
from REPORT.MARGIN_TRADING_STATISTICS \
where INIT_DATE = {0} \
group by INIT_DATE), \
fin_slo_base as ( \
select INIT_DATE, \
       sum(FINANCE_DEBIT_BALANCE + SECURITY_DEBIT_AMOUNT) as FIN_SLO, \
       sum(FINANCE_DEBIT_BALANCE) as FIN, \
       sum(SECURITY_DEBIT_AMOUNT) as SLO \
from REPORT.MARGIN_TRADING_STATISTICS \
where INIT_DATE = {1} \
group by INIT_DATE) \
select sort_id,name,detail,mom \
from ( \
select 1 as sort_id, ''\u878D\u8D44\u878D\u5238\u4F59\u989D\u5E02\u573A\u603B\u91CF'' as name, \
round(cast(coalesce(a.TOTAL_FIN_SLO,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.TOTAL_FIN_SLO-b.TOTAL_FIN_SLO) = 0 or (a.TOTAL_FIN_SLO-b.TOTAL_FIN_SLO) is null then 0.0 \
when b.TOTAL_FIN_SLO = 0 or b.TOTAL_FIN_SLO is null then 9999999999.0 \
else (a.TOTAL_FIN_SLO-b.TOTAL_FIN_SLO)/b.TOTAL_FIN_SLO*100 end) as decimal),2) as mom \
from total_fin_slo a \
left join total_fin_slo_base b on 1=1 \
union \
select 2 as sort_id, ''\u878D\u8D44\u4F59\u989D\u5E02\u573A\u603B\u91CF'' as name, \
round(cast(coalesce(a.TOTAL_FIN,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.TOTAL_FIN-b.TOTAL_FIN) = 0 or (a.TOTAL_FIN-b.TOTAL_FIN) is null then 0.0 \
when b.TOTAL_FIN = 0 or b.TOTAL_FIN is null then 9999999999.0 \
else (a.TOTAL_FIN-b.TOTAL_FIN)/b.TOTAL_FIN*100 end) as decimal),2) as mom \
from total_fin_slo a \
left join total_fin_slo_base b on 1=1 \
union \
select 3 as sort_id, ''\u878D\u5238\u4F59\u989D\u5E02\u573A\u603B\u91CF'' as name, \
round(cast(coalesce(a.TOTAL_SLO,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.TOTAL_SLO-b.TOTAL_SLO) = 0 or (a.TOTAL_SLO-b.TOTAL_SLO) is null then 0.0 \
when b.TOTAL_SLO = 0 or b.TOTAL_SLO is null then 9999999999.0 \
else (a.TOTAL_SLO-b.TOTAL_SLO)/b.TOTAL_SLO*100 end) as decimal),2) as mom \
from total_fin_slo a \
left join total_fin_slo_base b on 1=1 \
union \
select 4 as sort_id, ''\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D'' as name, \
round(cast(coalesce(a.FIN_SLO,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.FIN_SLO-b.FIN_SLO) = 0 or (a.FIN_SLO-b.FIN_SLO) is null then 0.0 \
when b.FIN_SLO = 0 or b.FIN_SLO is null then 9999999999.0 \
else (a.FIN_SLO-b.FIN_SLO)/b.FIN_SLO*100 end) as decimal),2) as mom \
from fin_slo a \
left join fin_slo_base b on 1=1 \
union \
select 5 as sort_id, ''\u878D\u8D44\u4F59\u989D'' as name, \
round(cast(coalesce(a.FIN,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.FIN-b.FIN) = 0 or (a.FIN-b.FIN) is null then 0.0 \
when b.FIN = 0 or b.FIN is null then 9999999999 \
else (a.FIN-b.FIN)/b.FIN*100 end) as decimal),2) as mom \
from fin_slo a \
left join fin_slo_base b on 1=1 \
union \
select 6 as sort_id, ''\u6DF1\u5E02\u57FA\u91D1\u603B\u5E02\u503C'' as name, \
round(cast(coalesce(a.SLO,0)/100000000 as decimal),2) as detail, \
round(cast((case when (a.SLO-b.SLO) = 0 or (a.SLO-b.SLO) is null then 0.0 \
when b.SLO = 0 or b.SLO is null then 9999999999.0 \
else (a.SLO-b.SLO)/b.SLO*100 end) as decimal),2) as mom \
from fin_slo a \
left join fin_slo_base b on 1=1 \
union \
select 7 as sort_id, ''\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D\u5E02\u573A\u5360\u6709\u7387'' as name, \
round(cast((case when a.FIN_SLO = 0 or a.FIN_SLO is null then 0.0 \
when c.TOTAL_FIN_SLO = 0 or c.TOTAL_FIN_SLO is null then 9999999999.0 \
else a.FIN_SLO/c.TOTAL_FIN_SLO*100 end) as decimal),4) as detail, \
round(cast((case when c.TOTAL_FIN_SLO = 0 or c.TOTAL_FIN_SLO is null or d.TOTAL_FIN_SLO = 0 or d.TOTAL_FIN_SLO is null then 9999999999.0 \
when a.FIN_SLO = 0 or a.FIN_SLO is null then b.FIN_SLO/d.TOTAL_FIN_SLO*100 \
when b.FIN_SLO = 0 or b.FIN_SLO is null then a.FIN_SLO/c.TOTAL_FIN_SLO*100 \
else (a.FIN_SLO/c.TOTAL_FIN_SLO-b.FIN_SLO/d.TOTAL_FIN_SLO)*100 end) as decimal),4)  as mom \
from fin_Slo a \
left join fin_Slo_base b on 1=1 \
left join total_fin_Slo c on 1=1 \
left join total_fin_Slo_base d on 1=1 \
) \
order by sort_id

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u57FA\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u80A1\u57FA\u603B\u5E02\u503C\u53D8\u5316 & \u516C\u53F8\u80A1\u57FA\u4EA4\u6613\u91D1\u989D\u5E02\u5360\u7387\u53D8\u5316-\u6309\u5929
# \u53C2\u6570endDate
sel.market.stock.fund.by.date.11 = \
with trade_day as ( \
select DAY_ID as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
order by DAY_ID desc limit 15), \
total_sf as ( \
select a.TRADE_DAY, \
       (SH_TOTAL_STOCK_BALANCE + SH_TOTAL_FUND_BALANCE + SZ_TOTAL_STOCK_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_SF \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
sf as ( \
select a.TRADE_DAY, \
       sum(b.SECU_BALANCE) as SF \
from trade_day a \
left join REPORT.ASSET_CHANGE_DETAIL_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_DAY) \
select a.TRADE_DAY, \
       round(cast(coalesce(a.TOTAL_SF,0)/100000000 as decimal),2) as TOTAL_SF, \
       round(cast(coalesce(b.SF,0)/100000000 as decimal),2) as SF, \
       round(cast((case when b.SF = 0 or b.SF is null then 0.0 \
            when a.TOTAL_SF = 0 or a.TOTAL_SF is null then 9999999999.0 \
       else b.SF/a.TOTAL_SF*100 end) as decimal),2) as SF_RATE \
from total_sf a \
left join sf b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_DAY

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u57FA\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u80A1\u57FA\u603B\u5E02\u503C\u53D8\u5316 & \u516C\u53F8\u80A1\u57FA\u4EA4\u6613\u91D1\u989D\u5E02\u5360\u7387\u53D8\u5316-\u6309\u6708
# \u53C2\u6570endDate
sel.market.stock.fund.by.date.12 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 6) as TRADE_MONTH, \
       max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 6) \
order by TRADE_DAY desc limit 13), \
total_sf as ( \
select a.TRADE_MONTH, \
       a.TRADE_DAY, \
       (SH_TOTAL_STOCK_BALANCE + SH_TOTAL_FUND_BALANCE + SZ_TOTAL_STOCK_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_SF \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
sf as ( \
select a.TRADE_MONTH, \
       a.TRADE_DAY, \
       sum(b.SECU_BALANCE) as SF \
from trade_day a \
left join REPORT.ASSET_CHANGE_DETAIL_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by TRADE_MONTH,a.TRADE_DAY) \
select a.TRADE_MONTH, \
       round(cast(coalesce(a.TOTAL_SF,0)/100000000 as decimal),2) as TOTAL_SF, \
       round(cast(coalesce(b.SF,0)/100000000 as decimal),2) as SF, \
       round(cast((case when b.SF = 0 or b.SF is null then 0.0 \
            when a.TOTAL_SF = 0 or a.TOTAL_SF is null then 9999999999.0 \
       else b.SF/a.TOTAL_SF*100 end) as decimal),2) as SF_RATE \
from total_sf a \
left join sf b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_MONTH


# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u57FA\u4EA4\u6613-\u5168\u5168\u56FD\u53CA\u516C\u53F8\u80A1\u57FA\u603B\u5E02\u503C\u53D8\u5316 & \u516C\u53F8\u80A1\u57FA\u4EA4\u6613\u91D1\u989D\u5E02\u5360\u7387\u53D8\u5316-\u6309\u5E74
# \u53C2\u6570endDate
sel.market.stock.fund.by.date.13 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
       max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 4) \
order by TRADE_DAY desc limit 5), \
total_sf as ( \
select a.TRADE_YEAR, \
       a.TRADE_DAY, \
       (SH_TOTAL_STOCK_BALANCE + SH_TOTAL_FUND_BALANCE + SZ_TOTAL_STOCK_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_SF \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
sf as ( \
select a.TRADE_YEAR, \
       a.TRADE_DAY, \
       sum(b.SECU_BALANCE) as SF \
from trade_day a \
left join REPORT.ASSET_CHANGE_DETAIL_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by TRADE_YEAR,a.TRADE_DAY) \
select a.TRADE_YEAR, \
       round(cast(coalesce(a.TOTAL_SF,0)/100000000 as decimal),2) as TOTAL_SF, \
       round(cast(coalesce(b.SF,0)/100000000 as decimal),2) as SF, \
       round(cast((case when b.SF = 0 or b.SF is null then 0.0 \
            when a.TOTAL_SF = 0 or a.TOTAL_SF is null then 9999999999.0 \
       else b.SF/a.TOTAL_SF*100 end) as decimal),2) as SF_RATE \
from total_sf a \
left join sf b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_YEAR


# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u7968\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u6CAA\u6DF1\u80A1\u7968\u603B\u5E02\u503C\u8D70\u52BF&\u516C\u53F8\u80A1\u7968\u5E02\u503C\u5360\u6709\u7387\u53D8\u5316\u8D70\u52BF-\u6309\u5929
# \u53C2\u6570endDate
sel.market.stock.by.date.11 = \
with trade_day as ( \
select DAY_ID as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
order by DAY_ID desc limit 15), \
total_s as ( \
select a.TRADE_DAY, \
       (SH_TOTAL_STOCK_BALANCE + SZ_TOTAL_STOCK_BALANCE + STB_TOTAL_STOCK_BALANCE) as TOTAL_S, \
       SH_TOTAL_STOCK_BALANCE as TOTAL_S_SH, \
       SZ_TOTAL_STOCK_BALANCE as TOTAL_S_SZ, \
       STB_TOTAL_STOCK_BALANCE as TOTAL_S_STB \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
s as ( \
select a.TRADE_DAY, \
       sum(STOCK_BALANCE) as S, \
       sum(SH_A_BALANCE+SH_B_BALANCE) as S_SH, \
       sum(SZ_A_BALANCE+SZ_B_BALANCE) as S_SZ, \
       sum(STB_BALANCE) as S_STB, \
       sum(HK_BALANCE) as S_HK \
from trade_day a \
left join REPORT.ASSET_CHANGE_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_DAY) \
select a.TRADE_DAY, \
       round(cast(coalesce(a.TOTAL_S,0)/100000000 as decimal),2) as TOTAL_S, \
       round(cast(coalesce(a.TOTAL_S_SH,0)/100000000 as decimal),2) as TOTAL_S_SH, \
       round(cast(coalesce(a.TOTAL_S_SZ,0)/100000000 as decimal),2) as TOTAL_S_SZ, \
       round(cast(coalesce(a.TOTAL_S_STB,0)/100000000 as decimal),2) as TOTAL_S_STB, \
       round(cast(coalesce(b.S,0)/100000000 as decimal),2) as S, \
       round(cast(coalesce(b.S_SH,0)/100000000 as decimal),2) as S_SH, \
       round(cast(coalesce(b.S_SZ,0)/100000000 as decimal),2) as S_SZ, \
       round(cast(coalesce(b.S_STB,0)/100000000 as decimal),2) as S_STB, \
       round(cast(coalesce(b.S_HK,0)/100000000 as decimal),2) as S_HK, \
       round(cast((case when b.S_SH = 0 or b.S_SH is null then 0.0 \
            when a.TOTAL_S_SH = 0 or a.TOTAL_S_SH is null then 9999999999.0 \
       else b.S_SH/a.TOTAL_S_SH*100 end) as decimal),2) as S_SH_RATE, \
       round(cast((case when b.S_SZ = 0 or b.S_SZ is null then 0.0 \
            when a.TOTAL_S_SZ = 0 or a.TOTAL_S_SZ is null then 9999999999.0 \
       else b.S_SZ/a.TOTAL_S_SZ*100 end) as decimal),2) as S_SZ_RATE \
from total_s a \
left join s b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_DAY


# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u7968\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u6CAA\u6DF1\u80A1\u7968\u603B\u5E02\u503C\u8D70\u52BF&\u516C\u53F8\u80A1\u7968\u5E02\u503C\u5360\u6709\u7387\u53D8\u5316\u8D70\u52BF-\u6309\u6708
# \u53C2\u6570endDate
sel.market.stock.by.date.12 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 6) as TRADE_MONTH, \
       max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 6) \
order by TRADE_DAY desc limit 13), \
total_s as ( \
select a.TRADE_MONTH, \
       a.TRADE_DAY, \
       (SH_TOTAL_STOCK_BALANCE + SZ_TOTAL_STOCK_BALANCE + STB_TOTAL_STOCK_BALANCE) as TOTAL_S, \
       SH_TOTAL_STOCK_BALANCE as TOTAL_S_SH, \
       SZ_TOTAL_STOCK_BALANCE as TOTAL_S_SZ, \
       STB_TOTAL_STOCK_BALANCE as TOTAL_S_STB \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
s as ( \
select a.TRADE_MONTH, \
       a.TRADE_DAY, \
       sum(STOCK_BALANCE) as S, \
       sum(SH_A_BALANCE+SH_B_BALANCE) as S_SH, \
       sum(SZ_A_BALANCE+SZ_B_BALANCE) as S_SZ, \
       sum(STB_BALANCE) as S_STB, \
       sum(HK_BALANCE) as S_HK \
from trade_day a \
left join REPORT.ASSET_CHANGE_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_MONTH,a.TRADE_DAY) \
select a.TRADE_MONTH, \
       round(cast(coalesce(a.TOTAL_S,0)/100000000 as decimal),2) as TOTAL_S, \
       round(cast(coalesce(a.TOTAL_S_SH,0)/100000000 as decimal),2) as TOTAL_S_SH, \
       round(cast(coalesce(a.TOTAL_S_SZ,0)/100000000 as decimal),2) as TOTAL_S_SZ, \
       round(cast(coalesce(a.TOTAL_S_STB,0)/100000000 as decimal),2) as TOTAL_S_STB, \
       round(cast(coalesce(b.S,0)/100000000 as decimal),2) as S, \
       round(cast(coalesce(b.S_SH,0)/100000000 as decimal),2) as S_SH, \
       round(cast(coalesce(b.S_SZ,0)/100000000 as decimal),2) as S_SZ, \
       round(cast(coalesce(b.S_STB,0)/100000000 as decimal),2) as S_STB, \
       round(cast(coalesce(b.S_HK,0)/100000000 as decimal),2) as S_HK, \
       round(cast((case when b.S_SH = 0 or b.S_SH is null then 0.0 \
            when a.TOTAL_S_SH = 0 or a.TOTAL_S_SH is null then 9999999999.0 \
       else b.S_SH/a.TOTAL_S_SH*100 end) as decimal),2) as S_SH_RATE, \
       round(cast((case when b.S_SZ = 0 or b.S_SZ is null then 0.0 \
            when a.TOTAL_S_SZ = 0 or a.TOTAL_S_SZ is null then 9999999999.0 \
       else b.S_SZ/a.TOTAL_S_SZ*100 end) as decimal),2) as S_SZ_RATE \
from total_s a \
left join s b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_MONTH


# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u80A1\u7968\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u6CAA\u6DF1\u80A1\u7968\u603B\u5E02\u503C\u8D70\u52BF&\u516C\u53F8\u80A1\u7968\u5E02\u503C\u5360\u6709\u7387\u53D8\u5316\u8D70\u52BF-\u6309\u5E74
# \u53C2\u6570endDate
sel.market.stock.by.date.13 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
       max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 4) \
order by TRADE_DAY desc limit 5), \
total_s as ( \
select a.TRADE_YEAR, \
       a.TRADE_DAY, \
       (SH_TOTAL_STOCK_BALANCE + SZ_TOTAL_STOCK_BALANCE + SH_TOTAL_STOCK_BALANCE) as TOTAL_S, \
       SH_TOTAL_STOCK_BALANCE as TOTAL_S_SH, \
       SZ_TOTAL_STOCK_BALANCE as TOTAL_S_SZ, \
       STB_TOTAL_STOCK_BALANCE as TOTAL_S_STB \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
s as ( \
select a.TRADE_YEAR, \
       a.TRADE_DAY, \
       sum(STOCK_BALANCE) as S, \
       sum(SH_A_BALANCE+SH_B_BALANCE) as S_SH, \
       sum(SZ_A_BALANCE+SZ_B_BALANCE) as S_SZ, \
       sum(STB_BALANCE) as S_STB, \
       sum(HK_BALANCE) as S_HK \
from trade_day a \
left join REPORT.ASSET_CHANGE_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_YEAR,a.TRADE_DAY) \
select a.TRADE_YEAR, \
       round(cast(coalesce(a.TOTAL_S,0)/100000000 as decimal),2) as TOTAL_S, \
       round(cast(coalesce(a.TOTAL_S_SH,0)/100000000 as decimal),2) as TOTAL_S_SH, \
       round(cast(coalesce(a.TOTAL_S_SZ,0)/100000000 as decimal),2) as TOTAL_S_SZ, \
       round(cast(coalesce(a.TOTAL_S_STB,0)/100000000 as decimal),2) as TOTAL_S_STB, \
       round(cast(coalesce(b.S,0)/100000000 as decimal),2) as S,  \
       round(cast(coalesce(b.S_SH,0)/100000000 as decimal),2) as S_SH, \
       round(cast(coalesce(b.S_SZ,0)/100000000 as decimal),2) as S_SZ, \
       round(cast(coalesce(b.S_STB,0)/100000000 as decimal),2) as S_STB, \
       round(cast(coalesce(b.S_HK,0)/100000000 as decimal),2) as S_HK, \
       round(cast((case when b.S_SH = 0 or b.S_SH is null then 0.0 \
            when a.TOTAL_S_SH = 0 or a.TOTAL_S_SH is null then 9999999999.0 \
       else b.S_SH/a.TOTAL_S_SH*100 end) as decimal),2) as S_SH_RATE, \
       round(cast((case when b.S_SZ = 0 or b.S_SZ is null then 0.0 \
            when a.TOTAL_S_SZ = 0 or a.TOTAL_S_SZ is null then 9999999999.0 \
       else b.S_SZ/a.TOTAL_S_SZ*100 end) as decimal),2) as S_SZ_RATE \
from total_s a \
left join s b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_YEAR

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u57FA\u91D1\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u6CAA\u6DF1\u4E24\u5E02\u57FA\u91D1\u4EA4\u6613\u8D70\u52BF&\u516C\u53F8\u57FA\u91D1\u5E02\u5360\u7387\u8D70\u52BF-\u6309\u5929
# \u53C2\u6570endDate
sel.market.fund.by.date.11 = \
with trade_day as ( \
select DAY_ID as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
order by DAY_ID desc limit 15), \
total_f as ( \
select a.TRADE_DAY, \
       (SH_TOTAL_FUND_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_F, \
       SH_TOTAL_FUND_BALANCE as TOTAL_F_SH, \
       SZ_TOTAL_FUND_BALANCE as TOTAL_F_SZ \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
f as ( \
select a.TRADE_DAY, \
       sum(FUND_BALANCE) as F, \
       sum(SH_FUND_BALANCE) as F_SH, \
       sum(SZ_FUND_BALANCE) as F_SZ \
from trade_day a \
left join REPORT.ASSET_CHANGE_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_DAY) \
select a.TRADE_DAY, \
       round(cast(coalesce(a.TOTAL_F,0)/100000000 as decimal),2) as TOTAL_F, \
       round(cast(coalesce(a.TOTAL_F_SH,0)/100000000 as decimal),2) as TOTAL_F_SH, \
       round(cast(coalesce(a.TOTAL_F_SZ,0)/100000000 as decimal),2) as TOTAL_F_SZ, \
       round(cast(coalesce(b.F,0)/100000000 as decimal),2) as F, \
       round(cast(coalesce(b.F_SH,0)/100000000 as decimal),2) as F_SH, \
       round(cast(coalesce(b.F_SZ,0)/100000000 as decimal),2) as F_SZ, \
       round(cast((case when b.F_SH = 0 or b.F_SH is null then 0.0 \
            when a.TOTAL_F_SH = 0 or a.TOTAL_F_SH is null then 9999999999.0 \
       else b.F_SH/a.TOTAL_F_SH*100 end) as decimal),2) as F_SH_RATE, \
       round(cast((case when b.F_SZ = 0 or b.F_SZ is null then 0.0 \
            when a.TOTAL_F_SZ = 0 or a.TOTAL_F_SZ is null then 9999999999.0 \
       else b.F_SZ/a.TOTAL_F_SZ*100 end) as decimal),2) as F_SZ_RATE \
from total_f a \
left join f b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_DAY


# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u57FA\u91D1\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u6CAA\u6DF1\u4E24\u5E02\u57FA\u91D1\u4EA4\u6613\u8D70\u52BF&\u516C\u53F8\u57FA\u91D1\u5E02\u5360\u7387\u8D70\u52BF-\u6309\u6708
# \u53C2\u6570endDate
sel.market.fund.by.date.12 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 6) as TRADE_MONTH, \
       max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 6) \
order by TRADE_DAY desc limit 13), \
total_f as ( \
select a.TRADE_MONTH, \
       a.TRADE_DAY, \
       (SH_TOTAL_FUND_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_F, \
       SH_TOTAL_FUND_BALANCE as TOTAL_F_SH, \
       SZ_TOTAL_FUND_BALANCE as TOTAL_F_SZ \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
f as ( \
select a.TRADE_MONTH, \
       a.TRADE_DAY, \
       sum(FUND_BALANCE) as F, \
       sum(SH_FUND_BALANCE) as F_SH, \
       sum(SZ_FUND_BALANCE) as F_SZ \
from trade_day a \
left join REPORT.ASSET_CHANGE_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_MONTH,a.TRADE_DAY) \
select a.TRADE_MONTH, \
       round(cast(coalesce(a.TOTAL_F,0)/100000000 as decimal),2) as TOTAL_F, \
       round(cast(coalesce(a.TOTAL_F_SH,0)/100000000 as decimal),2) as TOTAL_F_SH, \
       round(cast(coalesce(a.TOTAL_F_SZ,0)/100000000 as decimal),2) as TOTAL_F_SZ, \
       round(cast(coalesce(b.F,0)/100000000 as decimal),2) as F, \
       round(cast(coalesce(b.F_SH,0)/100000000 as decimal),2) as F_SH, \
       round(cast(coalesce(b.F_SZ,0)/100000000 as decimal),2) as F_SZ, \
       round(cast((case when b.F_SH = 0 or b.F_SH is null then 0.0 \
            when a.TOTAL_F_SH = 0 or a.TOTAL_F_SH is null then 9999999999.0 \
       else b.F_SH/a.TOTAL_F_SH*100 end) as decimal),2) as F_SH_RATE, \
       round(cast((case when b.F_SZ = 0 or b.F_SZ is null then 0.0 \
            when a.TOTAL_F_SZ = 0 or a.TOTAL_F_SZ is null then 9999999999.0 \
       else b.F_SZ/a.TOTAL_F_SZ*100 end) as decimal),2) as F_SZ_RATE \
from total_f a \
left join f b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_MONTH

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u57FA\u91D1\u4EA4\u6613-\u5168\u56FD\u53CA\u516C\u53F8\u6CAA\u6DF1\u4E24\u5E02\u57FA\u91D1\u4EA4\u6613\u8D70\u52BF&\u516C\u53F8\u57FA\u91D1\u5E02\u5360\u7387\u8D70\u52BF-\u6309\u5E74
# \u53C2\u6570endDate
sel.market.fund.by.date.13 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
       max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
      and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 4) \
order by TRADE_DAY desc limit 13), \
total_f as ( \
select a.TRADE_YEAR, \
       a.TRADE_DAY, \
       (SH_TOTAL_FUND_BALANCE + SZ_TOTAL_FUND_BALANCE) as TOTAL_F, \
       SH_TOTAL_FUND_BALANCE as TOTAL_F_SH, \
       SZ_TOTAL_FUND_BALANCE as TOTAL_F_SZ \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
f as ( \
select a.TRADE_YEAR, \
       a.TRADE_DAY, \
       sum(FUND_BALANCE) as F, \
       sum(SH_FUND_BALANCE) as F_SH, \
       sum(SZ_FUND_BALANCE) as F_SZ \
from trade_day a \
left join REPORT.ASSET_CHANGE_DAILY b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_YEAR,a.TRADE_DAY) \
select a.TRADE_YEAR, \
       round(cast(coalesce(a.TOTAL_F,0)/100000000 as decimal),2) as TOTAL_F, \
       round(cast(coalesce(a.TOTAL_F_SH,0)/100000000 as decimal),2) as TOTAL_F_SH, \
       round(cast(coalesce(a.TOTAL_F_SZ,0)/100000000 as decimal),2) as TOTAL_F_SZ, \
       round(cast(coalesce(b.F,0)/100000000 as decimal),2) as F, \
       round(cast(coalesce(b.F_SH,0)/100000000 as decimal),2) as F_SH, \
       round(cast(coalesce(b.F_SZ,0)/100000000 as decimal),2) as F_SZ, \
       round(cast((case when b.F_SH = 0 or b.F_SH is null then 0.0 \
            when a.TOTAL_F_SH = 0 or a.TOTAL_F_SH is null then 9999999999.0 \
       else b.F_SH/a.TOTAL_F_SH*100 end) as decimal),2) as F_SH_RATE, \
       round(cast((case when b.F_SZ = 0 or b.F_SZ is null then 0.0 \
            when a.TOTAL_F_SZ = 0 or a.TOTAL_F_SZ is null then 9999999999.0 \
       else b.F_SZ/a.TOTAL_F_SZ*100 end) as decimal),2) as F_SZ_RATE \
from total_f a \
left join f b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_YEAR

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u878D\u8D44\u878D\u5238-\u5168\u56FD\u53CA\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D\u8D70\u52BF&\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D\u5E02\u5360\u7387\u8D70\u52BF-\u6309\u5929
# \u53C2\u6570endDate
sel.market.margin.by.day.11 = \
with trade_day as ( \
select DAY_ID as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
order by DAY_ID desc limit 15), \
total_fin_slo as ( \
select a.TRADE_DAY, \
(SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE + SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_FIN_SLO, \
(SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE) as TOTAL_FIN, \
(SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_SLO \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
fin_slo as ( \
select a.TRADE_DAY, \
sum(FINANCE_DEBIT_BALANCE + SECURITY_DEBIT_AMOUNT) as FIN_SLO, \
sum(FINANCE_DEBIT_BALANCE) as FIN, \
sum(SECURITY_DEBIT_AMOUNT) as SLO \
from trade_day a \
left join REPORT.MARGIN_TRADING_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_DAY) \
select a.TRADE_DAY, \
round(cast(coalesce(a.TOTAL_FIN_SLO,0)/100000000 as decimal),2) as TOTAL_FIN_SLO, \
round(cast(coalesce(b.FIN_SLO,0)/100000000 as decimal),2) as FIN_SLO, \
round(cast((case when b.FIN_SLO = 0 or b.FIN_SLO is null then 0.0 \
when a.TOTAL_FIN_SLO = 0 or a.TOTAL_FIN_SLO is null then 9999999999.0 \
else b.FIN_SLO/a.TOTAL_FIN_SLO*100 end) as decimal),4) as FIN_SLO_RATE \
from total_fin_slo a \
left join fin_slo b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_DAY

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u878D\u8D44\u878D\u5238-\u5168\u56FD\u53CA\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D\u8D70\u52BF&\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D\u5E02\u5360\u7387\u8D70\u52BF-\u6309\u6708
# \u53C2\u6570endDate
sel.market.margin.by.month.11 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 6) as TRADE_MONTH, \
max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 6) \
order by TRADE_DAY desc limit 13), \
total_fin_slo as ( \
select a.TRADE_MONTH, \
a.TRADE_DAY, \
(SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE + SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_FIN_SLO, \
(SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE) as TOTAL_FIN, \
(SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_SLO \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
fin_slo as ( \
select a.TRADE_MONTH, \
a.TRADE_DAY, \
sum(FINANCE_DEBIT_BALANCE + SECURITY_DEBIT_AMOUNT) as FIN_SLO, \
sum(FINANCE_DEBIT_BALANCE) as FIN, \
sum(SECURITY_DEBIT_AMOUNT) as SLO \
from trade_day a \
left join REPORT.MARGIN_TRADING_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_MONTH,a.TRADE_DAY) \
select a.TRADE_MONTH, \
round(cast(coalesce(a.TOTAL_FIN_SLO,0)/100000000 as decimal),2) as TOTAL_FIN_SLO, \
round(cast(coalesce(b.FIN_SLO,0)/100000000 as decimal),2) as FIN_SLO, \
round(cast((case when b.FIN_SLO = 0 or b.FIN_SLO is null then 0.0 \
when a.TOTAL_FIN_SLO = 0 or a.TOTAL_FIN_SLO is null then 9999999999.0 \
else b.FIN_SLO/a.TOTAL_FIN_SLO*100 end) as decimal),4) as FIN_SLO_RATE \
from total_fin_slo a \
left join fin_slo b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_MONTH

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u878D\u8D44\u878D\u5238-\u5168\u56FD\u53CA\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D\u8D70\u52BF&\u516C\u53F8\u878D\u8D44\u878D\u5238\u4F59\u989D\u5E02\u5360\u7387\u8D70\u52BF-\u6309\u5E74
# \u53C2\u6570endDate
sel.market.margin.by.year.11 = \
with trade_day as ( \
select substring(cast(DAY_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
max(DAY_ID) as TRADE_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
group by substring(cast(DAY_ID as char(8)) from 1 for 4) \
order by TRADE_DAY desc limit 5), \
total_fin_slo as ( \
select a.TRADE_YEAR, \
a.TRADE_DAY, \
(SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE + SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_FIN_SLO, \
(SH_MARGIN_FINANCE_BALANCE + SZ_MARGIN_FINANCE_BALANCE) as TOTAL_FIN, \
(SH_MARGIN_SECURITY_BALANCE + SZ_MARGIN_SECURITY_BALANCE) as TOTAL_SLO \
from trade_day a \
left join WIND.MARKET_TRADE_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
order by a.TRADE_DAY), \
fin_slo as ( \
select a.TRADE_YEAR, \
a.TRADE_DAY, \
sum(FINANCE_DEBIT_BALANCE + SECURITY_DEBIT_AMOUNT) as FIN_SLO, \
sum(FINANCE_DEBIT_BALANCE) as FIN, \
sum(SECURITY_DEBIT_AMOUNT) as SLO \
from trade_day a \
left join REPORT.MARGIN_TRADING_STATISTICS b on a.TRADE_DAY = b.INIT_DATE \
group by a.TRADE_YEAR,a.TRADE_DAY) \
select a.TRADE_YEAR, \
round(cast(coalesce(a.TOTAL_FIN_SLO,0)/100000000 as decimal),2) as TOTAL_FIN_SLO, \
round(cast(coalesce(b.FIN_SLO,0)/100000000 as decimal),2) as FIN_SLO, \
round(cast((case when b.FIN_SLO = 0 or b.FIN_SLO is null then 0.0 \
when a.TOTAL_FIN_SLO = 0 or a.TOTAL_FIN_SLO is null then 9999999999.0 \
else b.FIN_SLO/a.TOTAL_FIN_SLO*100 end) as decimal),4) as FIN_SLO_RATE \
from total_fin_slo a \
left join fin_slo b on a.TRADE_DAY=b.TRADE_DAY \
order by a.TRADE_YEAR


# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u5404\u5927\u5238\u5546\u8425\u4E1A\u90E8\u53D8\u5316\u60C5\u51B5-\u6309\u6708
# \u53C2\u6570endDate
sel.market.branch.by.month = \
WITH A AS ( \
WITH EXTRA AS ( \
WITH BASE AS ( \
SELECT \
INIT_MONTH, \
SECU_NAME, \
COUNT(BRANCH_NAME) AS C_BRANCH \
FROM \
DASHBOARD.MARKET_DASHBOARD \
GROUP BY \
INIT_MONTH, \
SECU_NAME \
) SELECT \
BASE.INIT_MONTH, \
RANK () OVER (ORDER BY BASE.C_BRANCH DESC) AS C_ORDER, \
BASE.SECU_NAME, \
BASE.C_BRANCH \
FROM \
BASE \
) SELECT \
INIT_MONTH, \
C_ORDER, \
SECU_NAME, \
C_BRANCH, \
C_BRANCH - ( \
LAG (C_BRANCH, 1) OVER ( \
PARTITION BY SECU_NAME \
ORDER BY \
INIT_MONTH \
) \
) AS C_BRANCH_ADD \
FROM \
EXTRA \
ORDER BY \
INIT_MONTH, \
C_ORDER \
) \
SELECT * FROM A \
WHERE A.INIT_MONTH = {0} \
order by C_ORDER

# MarketConditionController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5E02\u573A\u73AF\u5883-\u5404\u5927\u5238\u5546\u8425\u4E1A\u90E8\u53D8\u5316\u60C5\u51B5-\u4E0B\u94BB-\u6309\u6708
# \u53C2\u6570secuName endDate
sel.market.branch.in.by.month = \
SELECT \
BRANCH_NAME \
,BRANCH_ADDRESS \
FROM DASHBOARD.MARKET_DASHBOARD \
WHERE \
SECU_NAME = ''{0}'' \
AND INIT_MONTH = {1}

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u73B0\u72B6-\u6309\u5929\u3001\u6708\u3001\u5E74
# \u53C2\u6570fromDate toDate
sel.branch.status.by.date = \
with base as ( \
select CATEGORY, \
COUNT(ID) as BRANCH_NUM  \
from UF20_EDW.DIM_BRANCH \
where CATEGORY is not null and CATEGORY <> '''' \
group by CATEGORY), \
top1 as ( \
select b.CATEGORY, \
sum(a.COMMISSION) AS COMMISSION, \
avg(a.ASSET) as ASSET, \
sum(a.AMOUNT) AS AMOUNT, \
sum(a.OPEN_CUST_NUM) AS OPEN_CUST_NUM \
from DASHBOARD.BRANCH_DASHBOARD a \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where a.INIT_DATE BETWEEN {0} AND {1} \
group by b.CATEGORY) \
select base.CATEGORY as CATEGORY_ID, \
base.BRANCH_NUM as BRANCH_NUM, \
round(cast((case when top1.COMMISSION = 0 or top1.COMMISSION is null then 0.0 \
when base.BRANCH_NUM = 0 or base.BRANCH_NUM is null then 9999999999.0 \
else (top1.COMMISSION/base.BRANCH_NUM)/10000 end) as decimal),2) AS AVG_COMMISSION, \
round(cast((case when top1.ASSET = 0 or top1.ASSET is null then 0.0 \
when base.BRANCH_NUM = 0 or base.BRANCH_NUM is null then 9999999999.0 \
else (top1.ASSET/base.BRANCH_NUM)/10000 end) as decimal),2) AS AVG_ASSET, \
round(cast((case when top1.AMOUNT = 0 or top1.AMOUNT is null then 0.0 \
when base.BRANCH_NUM = 0 or base.BRANCH_NUM is null then 9999999999.0 \
else (top1.AMOUNT/base.BRANCH_NUM)/10000 end) as decimal),2) AS AVG_AMOUNT, \
cast((case when top1.OPEN_CUST_NUM = 0 or top1.OPEN_CUST_NUM is null then 0 \
when base.BRANCH_NUM = 0 or base.BRANCH_NUM is null then 9999999999.0 \
else top1.OPEN_CUST_NUM/base.BRANCH_NUM end) as decimal) AS AVG_CUST_NUM \
from base \
left join top1 on base.CATEGORY = top1.CATEGORY

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u73B0\u72B6-\u4E0B\u94BB-\u6309\u5929
# \u53C2\u6570endDate category
sel.branch.status.in.by.day = \
with trade_date as ( \
select DAY_ID \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
order by DAY_ID desc limit 30) \
select a.INIT_DATE, \
b.NAME, \
round(cast(coalesce(a.COMMISSION,0)/10000 as decimal),2) as COMMISSION, \
round(cast(coalesce(a.ASSET,0)/10000 as decimal),2) as ASSET, \
round(cast(coalesce(a.AMOUNT,0)/10000 as decimal),2) as AMOUNT, \
coalesce(a.OPEN_CUST_NUM,0) as OPEN_CUST_NUM \
from trade_date \
left join DASHBOARD.BRANCH_DASHBOARD a on trade_date.DAY_ID = a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where b.CATEGORY = ''{1}'' \
order by a.INIT_DATE

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u73B0\u72B6-\u4E0B\u94BB-\u6309\u6708
# \u53C2\u6570endDate category
sel.branch.status.in.by.month= \
with last_date as ( \
select MONTH_ID, \
max(DAY_ID) as LAST_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
group by MONTH_ID \
order by MONTH_ID desc limit 13), \
date_list as ( \
select b.MONTH_ID, \
b.DAY_ID \
from last_date a \
left join UF20_EDW.DIM_DATE b on a.MONTH_ID = b.MONTH_ID \
where b.TRADE_MARK = ''1'' \
and b.DAY_ID <= {0} ), \
base1 as ( \
select substring(cast(a.INIT_DATE as char(8)) from 1 for 6) as INIT_MONTH, \
b.NAME, \
sum(coalesce(a.COMMISSION,0)) as COMMISSION, \
sum(coalesce(a.AMOUNT,0)) as AMOUNT, \
sum(coalesce(a.OPEN_CUST_NUM,0)) as OPEN_CUST_NUM \
from date_list \
join DASHBOARD.BRANCH_DASHBOARD a on date_list.DAY_ID = a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where b.CATEGORY = ''{1}'' \
group by substring(cast(a.INIT_DATE as char(8)) from 1 for 6),b.NAME \
order by substring(cast(a.INIT_DATE as char(8)) from 1 for 6),b.NAME), \
base2 as ( \
select substring(cast(a.INIT_DATE as char(8)) from 1 for 6) as  INIT_MONTH, \
b.NAME, \
coalesce(a.ASSET) as ASSET \
from last_date \
join DASHBOARD.BRANCH_DASHBOARD a on last_date.LAST_DAY = a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where b.CATEGORY = ''{1}'' ) \
select base1.INIT_MONTH, \
base1.NAME, \
round(cast(coalesce(base1.COMMISSION,0)/10000 as decimal),2) as COMMISSION, \
round(cast(coalesce(base2.ASSET,0)/10000 as decimal),2) as ASSET, \
round(cast(coalesce(base1.AMOUNT,0)/10000 as decimal),2) as AMOUNT, \
coalesce(base1.OPEN_CUST_NUM,0) as OPEN_CUST_NUM \
from base1 \
left join base2 on base1.INIT_MONTH=base2.INIT_MONTH and base1.NAME=base2.NAME \
order by base1.INIT_MONTH,base1.NAME

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u73B0\u72B6-\u4E0B\u94BB-\u6309\u5E74
# \u53C2\u6570endDate category
sel.branch.status.in.by.year= \
with last_date as ( \
select YEAR_ID, \
max(DAY_ID) as LAST_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
group by YEAR_ID \
order by YEAR_ID desc limit 5), \
date_list as ( \
select b.YEAR_ID, \
b.DAY_ID \
from last_date a \
left join UF20_EDW.DIM_DATE b on a.YEAR_ID = b.YEAR_ID \
where b.TRADE_MARK = ''1'' \
and b.DAY_ID <= {0} ), \
base1 as ( \
select substring(cast(a.INIT_DATE as char(8)) from 1 for 4) as INIT_YEAR, \
b.NAME, \
sum(coalesce(a.COMMISSION,0)) as COMMISSION, \
sum(coalesce(a.AMOUNT,0)) as AMOUNT, \
sum(coalesce(a.OPEN_CUST_NUM,0)) as OPEN_CUST_NUM \
from date_list \
join DASHBOARD.BRANCH_DASHBOARD a on date_list.DAY_ID = a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where b.CATEGORY = ''{1}'' \
group by substring(cast(a.INIT_DATE as char(8)) from 1 for 4),b.NAME \
order by substring(cast(a.INIT_DATE as char(8)) from 1 for 4),b.NAME), \
base2 as ( \
select substring(cast(a.INIT_DATE as char(8)) from 1 for 4) as  INIT_YEAR, \
b.NAME, \
coalesce(a.ASSET) as ASSET \
from last_date \
join DASHBOARD.BRANCH_DASHBOARD a on last_date.LAST_DAY = a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where b.CATEGORY = ''{1}'' ) \
select base1.INIT_YEAR, \
base1.NAME, \
round(cast(coalesce(base1.COMMISSION,0)/10000 as decimal),2) as COMMISSION, \
round(cast(coalesce(base2.ASSET,0)/10000 as decimal),2) as ASSET, \
round(cast(coalesce(base1.AMOUNT,0)/10000 as decimal),2) as AMOUNT, \
coalesce(base1.OPEN_CUST_NUM,0) as OPEN_CUST_NUM \
from base1 \
left join base2 on base1.INIT_YEAR=base2.INIT_YEAR and base1.NAME=base2.NAME \
order by base1.INIT_YEAR,base1.NAME

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u7B5B\u9009-\u5206\u652F\u673A\u6784\u7C7B\u522B&\u7EA7\u522B
# \u65E0\u53C2\u6570
sel.branch.filter.branch.category.level = \
select (case when CATEGORY_ID = 'ZX' then 0 \
else DENSE_RANK() over(order by CATEGORY_ID) end) as CATEGORY_RANK, \
CATEGORY_ID, \
CATEGORY_DESC, \
DENSE_RANK() over(order by LEVEL_ID) as LEVEL_RANK, \
LEVEL_ID, \
LEVEL_DESC \
from ( \
select distinct CATEGORY as CATEGORY_ID, \
(case when CATEGORY = 'ZX' then '\u4E2D\u5FC3\u7C7B' else concat(CATEGORY,'\u7C7B') end) as CATEGORY_DESC, \
(case when CATEGORY = 'E' then 'L2' else 'L1' end) as LEVEL_ID, \
(case when CATEGORY = 'E' then '\u4E8C\u7EA7\u5206\u652F\u673A\u6784' else '\u4E00\u7EA7\u5206\u652F\u673A\u6784' end) as LEVEL_DESC \
from UF20_EDW.DIM_BRANCH \
where CATEGORY<>'')

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u6392\u540D-\u8425\u4E1A\u90E8\u6392\u540D\u53D8\u5316-\u6309\u5929
# \u53C2\u6570endDate
sel.branch.rank.branch.by.day = \
with trade_date as ( \
select DAY_ID \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
order by DAY_ID desc limit 30) \
select b.CATEGORY as CATEGORY_ID, \
a.INIT_DATE, \
b.SHORT_NAME as BRANCH_NAME, \
row_number() over(partition by b.CATEGORY,a.INIT_DATE order by a.ASSET desc) as ASSET_RANK, \
round(cast(coalesce(a.ASSET,0)/10000 as decimal),2) as ASSET, \
row_number() over(partition by b.CATEGORY,a.INIT_DATE order by a.AMOUNT desc) as AMOUNT_RANK, \
round(cast(coalesce(a.AMOUNT,0)/10000 as decimal),2) as AMOUNT \
from trade_date \
left join DASHBOARD.BRANCH_DASHBOARD a on trade_date.DAY_ID=a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
order by b.CATEGORY, \
a.INIT_DATE, \
b.SHORT_NAME

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u6392\u540D-\u8425\u4E1A\u90E8\u6392\u540D\u53D8\u5316-\u6309\u5E74
# \u53C2\u6570endDate
sel.branch.rank.branch.by.year = \
with last_date as ( \
select YEAR_ID, \
max(DAY_ID) as LAST_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
group by YEAR_ID \
order by YEAR_ID desc limit 5), \
date_list as ( \
select b.YEAR_ID, \
b.DAY_ID \
from last_date a \
left join UF20_EDW.DIM_DATE b on a.YEAR_ID = b.YEAR_ID \
where b.TRADE_MARK = ''1'' \
and b.DAY_ID <= {0}), \
amount_year as ( \
select b.CATEGORY, \
substring(cast(a.INIT_DATE as char(8)) from 1 for 4) as INIT_YEAR, \
b.SHORT_NAME, \
round(cast(sum(coalesce(AMOUNT,0)) as decimal)/10000,2) as AMOUNT \
from date_list \
left join DASHBOARD.BRANCH_DASHBOARD a on date_list.DAY_ID=a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
group by b.CATEGORY, \
substring(cast(a.INIT_DATE as char(8)) from 1 for 4), \
b.SHORT_NAME), \
asset_year as ( \
select b.CATEGORY, \
substring(cast(a.INIT_DATE as char(8)) from 1 for 4) as INIT_YEAR, \
b.SHORT_NAME, \
round(cast(coalesce(a.ASSET,0) as decimal)/10000,2) as ASSET \
from last_date \
left join DASHBOARD.BRANCH_DASHBOARD a on last_date.LAST_DAY=a.INIT_DATE \
join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID) \
select a.CATEGORY as CATEGORY_ID, \
a.INIT_YEAR as INIT_YEAR, \
a.SHORT_NAME as BRANCH_NAME, \
row_number() over(partition by a.CATEGORY,a.INIT_YEAR order by coalesce(b.ASSET,0) desc) as ASSET_RANK, \
coalesce(b.ASSET,0) as ASSET, \
row_number() over(partition by a.CATEGORY,a.INIT_YEAR order by coalesce(a.AMOUNT,0) desc) as AMOUNT_RANK, \
coalesce(a.AMOUNT,0) as AMOUNT \
from amount_year a \
left join asset_year b on a.CATEGORY=b.CATEGORY and a.INIT_YEAR=b.INIT_YEAR and a.SHORT_NAME=b.SHORT_NAME \
order by a.CATEGORY, \
a.INIT_YEAR, \
a.SHORT_NAME

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u53D1\u5C55-\u8425\u4E1A\u90E8\u8D8B\u52BF\u5BF9\u6BD4-\u6309\u5929
# \u53C2\u6570endDate
sel.branch.development.01.by.day = \
with trade_date as ( \
select DAY_ID \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
order by DAY_ID desc limit 30) \
select INIT_DATE, \
b.CATEGORY as CATEGORY_ID, \
b.SHORT_NAME as BRANCH_NAME, \
round(cast(coalesce(a.ASSET)/10000 as decimal),2) as ASSET, \
round(cast(coalesce(a.AMOUNT)/10000 as decimal),2) as AMOUNT, \
coalesce(a.OPEN_CUST_NUM,0) as OPEN_CUST_NUM \
from trade_date \
left join DASHBOARD.BRANCH_DASHBOARD a on trade_date.DAY_ID=a.INIT_DATE \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
order by b.CATEGORY,INIT_DATE

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u53D1\u5C55-\u8425\u4E1A\u90E8\u8D8B\u52BF\u5BF9\u6BD4-\u6309\u5E74
# \u53C2\u6570endDate
sel.branch.development.01.by.year = \
with last_date as ( \
select YEAR_ID, \
max(DAY_ID) as LAST_DAY \
from UF20_EDW.DIM_DATE \
where TRADE_MARK = ''1'' \
and DAY_ID <= {0} \
group by YEAR_ID \
order by YEAR_ID desc limit 5), \
date_list as ( \
select b.YEAR_ID, \
b.DAY_ID \
from last_date a \
left join UF20_EDW.DIM_DATE b on a.YEAR_ID = b.YEAR_ID \
where b.TRADE_MARK = ''1'' \
and b.DAY_ID <= {0}), \
base1 as ( \
select substring(cast(a.INIT_DATE as char(8)) from 1 for 4) as INIT_YEAR, \
b.CATEGORY as CATEGORY_ID, \
b.SHORT_NAME as BRANCH_NAME, \
sum(coalesce(a.AMOUNT,0)) as AMOUNT, \
sum(coalesce(a.OPEN_CUST_NUM,0)) as OPEN_CUST_NUM \
from date_list \
left join DASHBOARD.BRANCH_DASHBOARD a on date_list.DAY_ID=a.INIT_DATE \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
group by substring(cast(a.INIT_DATE as char(8)) from 1 for 4),b.CATEGORY,b.SHORT_NAME), \
base2 as (  \
select substring(cast(a.INIT_DATE as char(8)) from 1 for 4) as INIT_YEAR, \
b.CATEGORY as CATEGORY_ID, \
b.SHORT_NAME as BRANCH_NAME, \
coalesce(a.ASSET,0) as ASSET \
from last_date \
left join DASHBOARD.BRANCH_DASHBOARD a on last_date.LAST_DAY=a.INIT_DATE \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID) \
select a.INIT_YEAR, \
a.CATEGORY_ID, \
a.BRANCH_NAME, \
round(cast(coalesce(AMOUNT,0)/10000 as decimal),2) as AMOUNT, \
round(cast(coalesce(ASSET,0)/10000 as decimal),2) as ASSET, \
coalesce(OPEN_CUST_NUM,0) as OPEN_CUST_NUM \
from base1 a \
left join base2 b on a.INIT_YEAR=b.INIT_YEAR and a.CATEGORY_ID=b.CATEGORY_ID and a.BRANCH_NAME=b.BRANCH_NAME \
order by a.CATEGORY_ID,a.INIT_YEAR


# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u53D1\u5C55-\u5BA2\u6237\u7ED3\u6784\u5206\u6790
# \u53C2\u6570endDate
sel.branch.development.02 = \
with trade_day as ( \
select substring(cast(INIT_DATE as char(8)) from 1 for 4) as TRADE_YEAR, \
max(INIT_DATE) as TRADE_DAY \
from DASHBOARD.BRANCH_DASHBOARD \
where INIT_DATE <= {0} \
group by substring(cast(INIT_DATE as char(8)) from 1 for 4) \
order by TRADE_DAY desc limit 2) \
select trade_day.TRADE_YEAR, \
b.CATEGORY as CATEGORY_ID, \
sum(coalesce(a.COMMON_CUST_NUM,0)) as COMMON_CUST_NUM, \
sum(coalesce(a.POTENTIAL_CUST_NUM,0)) as POTENTIAL_CUST_NUM, \
sum(coalesce(a.CORE_CUST_NUM,0)) as CORE_CUST_NUM, \
sum(coalesce(a.VIP_CUST_NUM,0)) as VIP_CUST_NUM, \
sum(coalesce(a.VIP_PLATINA_CUST_NUM,0)) as VIP_PLATINA_CUST_NUM, \
sum(coalesce(a.VIP_DIAMOND_CUST_NUM,0)) as VIP_DIAMOND_CUST_NUM, \
sum(coalesce(a.VIP_SUPER_DIAMOND_CUST_NUM,0)) as VIP_SUPER_DIAMOND_CUST_NUM \
FROM trade_day \
left join DASHBOARD.BRANCH_DASHBOARD a on trade_day.TRADE_DAY = a.INIT_DATE \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
group by trade_day.TRADE_YEAR,b.CATEGORY \
order by trade_day.TRADE_YEAR,b.CATEGORY

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u53D1\u5C55-\u6536\u5165\u7ED3\u6784\u5206\u5E03
# \u53C2\u6570fromDate toDate
sel.branch.development.03 = \
with main as ( \
select b.CATEGORY, \
b.SHORT_NAME, \
sum(a.SERVICE_INCOME+a.INTEREST_INCOME+a.MARGIN_SERVICE_INCOME+a.INTE_SERVICE_INCOME) as TOTAL_INCOME, \
sum(a.SERVICE_INCOME) as SERVICE_INCOME, \
sum(a.INTEREST_INCOME) as INTEREST_INCOME, \
sum(a.MARGIN_SERVICE_INCOME) as MARGIN_SERVICE_INCOME,\
sum(a.INTE_SERVICE_INCOME) as INTE_SERVICE_INCOME  \
from DASHBOARD.KPI_BRANCH a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_ID = b.ID \
where a.MONTH_ID between {0} and {1} \
and b.CATEGORY <> '''' \
group by b.CATEGORY,b.SHORT_NAME \
order by b.CATEGORY,b.SHORT_NAME) \
select concat(concat(''{0}'',''-''),''{1}'') as MONTH_DESC,\
CATEGORY as CATEGORY_ID, \
SHORT_NAME as BRANCH_NAME, \
round(cast(coalesce(TOTAL_INCOME,0)/10000 as decimal),2) as TOTAL_INCOME, \
round(cast(coalesce(SERVICE_INCOME,0)/10000 as decimal),2) as SERVICE_INCOME, \
round(cast((case when SERVICE_INCOME = 0 or SERVICE_INCOME is null then 0.0 \
when TOTAL_INCOME = 0 or TOTAL_INCOME is null then 9999999999.0 \
else SERVICE_INCOME/TOTAL_INCOME*100 end) as decimal),2) as SERVICE_INCOME_RATE, \
round(cast(coalesce(INTEREST_INCOME,0)/10000 as decimal),2) as INTEREST_INCOME, \
round(cast((case when INTEREST_INCOME = 0 or INTEREST_INCOME is null then 0.0 \
when TOTAL_INCOME = 0 or TOTAL_INCOME is null then 9999999999.0 \
else INTEREST_INCOME/TOTAL_INCOME*100 end) as decimal),2) as INTEREST_INCOME_RATE, \
round(cast(coalesce(MARGIN_SERVICE_INCOME,0)/10000 as decimal),2) as MARGIN_SERVICE_INCOME, \
round(cast((case when MARGIN_SERVICE_INCOME = 0 or MARGIN_SERVICE_INCOME is null then 0.0 \
when TOTAL_INCOME = 0 or TOTAL_INCOME is null then 9999999999.0 \
else MARGIN_SERVICE_INCOME/TOTAL_INCOME*100 end) as decimal),2) as MARGIN_SERVICE_INCOME_RATE, \
round(cast(coalesce(INTE_SERVICE_INCOME,0)/10000 as decimal),2) as INTE_SERVICE_INCOME, \
round(cast((case when INTE_SERVICE_INCOME = 0 or INTE_SERVICE_INCOME is null then 0.0 \
when TOTAL_INCOME = 0 or TOTAL_INCOME is null then 9999999999.0 \
else INTE_SERVICE_INCOME/TOTAL_INCOME*100 end) as decimal),2) as INTE_SERVICE_INCOME_RATE \
from main

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u53D1\u5C55-\u8003\u6838\u5229\u6DA6\u8868\u73B0-\u5E74\u5229\u6DA6\u53CA\u540C\u6BD4
# \u53C2\u6570endDate
sel.branch.development.04.01 = \
with trade_day as ( \
select substring(cast(MONTH_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
max(MONTH_ID) as TRADE_MONTH \
from DASHBOARD.KPI_BRANCH \
where MONTH_ID <= {0} \
group by substring(cast(MONTH_ID as char(8)) from 1 for 4) \
order by TRADE_YEAR desc limit 3), \
main as ( \
select b.CATEGORY, \
b.SHORT_NAME, \
a.MONTH_ID, \
a.PROFIT, \
row_number() over(partition by b.CATEGORY,a.MONTH_ID order by a.PROFIT desc) as PROFIT_RANK, \
lag(a.PROFIT,12) over(partition by b.CATEGORY,b.NAME order by a.MONTH_ID) as PROFIT_LY \
FROM DASHBOARD.KPI_BRANCH a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_ID=b.ID \
where b.CATEGORY <> '''') \
select CATEGORY as CATEGORY_ID, \
TRADE_YEAR, \
round(cast(coalesce(sum(PROFIT),2)/10000 as decimal),2) as PROFIT, \
round(cast((case when (sum(PROFIT)-sum(PROFIT_LY)) = 0 or (sum(PROFIT)-sum(PROFIT_LY)) is null then 0.0 \
when sum(PROFIT_LY) = 0 or sum(PROFIT_LY) is null then 9999999999.0 \
else (sum(PROFIT)-sum(PROFIT_LY))/sum(PROFIT_LY)*100 end) as decimal),2) as PROFIT_YOY \
from trade_day a \
left join main b on a.TRADE_MONTH=b.MONTH_ID \
group by CATEGORY,TRADE_YEAR \
order by CATEGORY,TRADE_YEAR

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u53D1\u5C55-\u8003\u6838\u5229\u6DA6\u8868\u73B0-\u5404\u5206\u652F\u673A\u6784\u5229\u6DA6\u6392\u540D
# \u53C2\u6570endDate
sel.branch.development.04.02 = \
with trade_day as ( \
select substring(cast(MONTH_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
max(MONTH_ID) as TRADE_MONTH \
from DASHBOARD.KPI_BRANCH \
where MONTH_ID <= {0} \
group by substring(cast(MONTH_ID as char(8)) from 1 for 4) \
order by TRADE_YEAR desc limit 2), \
main as ( \
select b.CATEGORY, \
b.SHORT_NAME, \
a.MONTH_ID, \
a.PROFIT, \
row_number() over(partition by b.CATEGORY,a.MONTH_ID order by a.PROFIT desc) as PROFIT_RANK, \
lag(a.PROFIT,12) over(partition by b.CATEGORY,b.NAME order by a.MONTH_ID) as PROFIT_LY \
FROM DASHBOARD.KPI_BRANCH a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_ID=b.ID \
where b.CATEGORY <> '''') \
select CATEGORY as CATEGORY_ID, \
TRADE_YEAR, \
PROFIT_RANK, \
SHORT_NAME as BRANCH_NAME, \
round(cast(coalesce(PROFIT,2)/10000 as decimal),2) as PROFIT, \
round(cast((case when (PROFIT-PROFIT_LY) = 0 or (PROFIT-PROFIT_LY) is null then 0.0 \
when PROFIT_LY = 0 or PROFIT_LY is null then 9999999999.0 \
else (PROFIT-PROFIT_LY)/PROFIT_LY*100 end) as decimal),2) as PROFIT_YOY \
from trade_day a \
left join main b on a.TRADE_MONTH=b.MONTH_ID \
order by CATEGORY,TRADE_YEAR,PROFIT_RANK

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u7EE9\u6548-\u7B5B\u9009-\u5206\u516C\u53F8
# \u65E0\u53C2\u6570
sel.branch.performance.filter.sub = \
with a as (select distinct P_ID from UF20_EDW.DIM_BRANCH \
where P_ID <> 0 and P_ID <> 1000), \
b as (select ID,NAME from UF20_EDW.DIM_BRANCH) \
select a.P_ID as "subcompany_id", \
b.NAME as "subcompany_name" \
from a \
left join b on a.P_ID=b.ID \
order by a.P_ID

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u7EE9\u6548-\u5206\u516C\u53F8\u7EE9\u6548\u8003\u6838\u8868
# \u53C2\u6570endDate branchId
sel.branch.performance.01 = \
with trade_day as ( \
select substring(cast(MONTH_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
max(MONTH_ID) as TRADE_MONTH \
from DASHBOARD.KPI_BRANCH \
where MONTH_ID <= {0} \
group by substring(cast(MONTH_ID as char(8)) from 1 for 4) \
order by TRADE_YEAR desc limit 2), \
main as ( \
select b.P_ID as SUBCOMPANY_NO, \
b.ID as BRANCH_NO, \
b.SHORT_NAME as BRANCH_NAME, \
a.MONTH_ID, \
a.PROFIT, \
row_number() over(partition by b.P_ID,a.MONTH_ID order by a.PROFIT desc) as PROFIT_RANK, \
lag(a.PROFIT,12) over(partition by a.BRANCH_ID order by a.MONTH_ID) as PROFIT_LY, \
a.PROFIT_INDEX, \
a.PROFIT_COMPLETE_RATE, \
a.MARKET_RATE, \
lag(a.MARKET_RATE,12) over(partition by a.BRANCH_ID order by a.MONTH_ID) as MARKET_RATE_LY, \
a.MARKET_RATE_COMPLETE_RATE \
from DASHBOARD.KPI_BRANCH a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_ID=b.ID) \
select b.BRANCH_NAME as SUBCOMPANY_NAME, \
a.TRADE_YEAR, \
b.PROFIT_RANK, \
round(cast(coalesce(b.PROFIT,0)/10000 as decimal),2) as PROFIT, \
round(cast((case when (b.PROFIT-b.PROFIT_LY) = 0 or (b.PROFIT-b.PROFIT_LY) is null then 0.0 \
when b.PROFIT_LY = 0 or b.PROFIT_LY is null then 9999999999.0 \
else (b.PROFIT-b.PROFIT_LY)/b.PROFIT_LY*100 end) as decimal),2) as PROFIT_YOY, \
round(cast(coalesce(b.PROFIT_INDEX,0)/10000 as decimal),2) as PROFIT_INDEX, \
round(cast(coalesce(b.PROFIT_COMPLETE_RATE,0)*100 as decimal),2) as PROFIT_COMPLETE_RATE, \
round(cast(coalesce(b.MARKET_RATE,0)*100 as decimal),4) as MARKET_RATE, \
round(cast((case when (b.MARKET_RATE-b.MARKET_RATE_LY) = 0 or (b.MARKET_RATE-b.MARKET_RATE_LY) is null then 0.0 \
when b.MARKET_RATE_LY = 0 or b.MARKET_RATE_LY is null then 9999999999.0 \
else (b.MARKET_RATE-b.MARKET_RATE_LY)/b.MARKET_RATE_LY*100 end) as decimal),2) as MARKET_RATE_YOY, \
round(cast(coalesce(MARKET_RATE_COMPLETE_RATE,0)*100 as decimal),2) as MARKET_RATE_COMPLETE_RATE \
from trade_day a \
left join main b on a.TRADE_MONTH=b.MONTH_ID \
where BRANCH_NO = {1} \
order by a.TRADE_YEAR,b.PROFIT_RANK

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u7EE9\u6548-\u5206\u652F\u673A\u6784\u4EA4\u6613\u91D1\u989D\u5E02\u5360\u7387
# \u53C2\u6570endDate branchId
sel.branch.performance.02 = \
with trade_day as ( \
select substring(cast(MONTH_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
max(MONTH_ID) as TRADE_MONTH \
from DASHBOARD.KPI_BRANCH \
where MONTH_ID <= {0} \
group by substring(cast(MONTH_ID as char(8)) from 1 for 4) \
order by TRADE_YEAR desc limit 2), \
main as ( \
select b.P_ID as SUBCOMPANY_NO, \
b.ID as BRANCH_NO, \
b.SHORT_NAME as BRANCH_NAME, \
a.MONTH_ID, \
a.MARKET_RATE, \
row_number() over(partition by b.P_ID,a.MONTH_ID order by a.MARKET_RATE desc) as MARKET_RATE_RANK, \
lag(a.MARKET_RATE,12) over(partition by a.BRANCH_ID order by a.MONTH_ID) as MARKET_RATE_LY, \
a.MARKET_RATE_COMPLETE_RATE \
from DASHBOARD.KPI_BRANCH a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_ID=b.ID) \
select b.BRANCH_NAME as SUBCOMPANY_NAME, \
a.TRADE_YEAR, \
b.MARKET_RATE_RANK, \
round(cast(coalesce(b.MARKET_RATE,0)*100 as decimal),4) as MARKET_RATE \
from trade_day a \
left join main b on a.TRADE_MONTH=b.MONTH_ID \
where SUBCOMPANY_NO = {1} \
order by a.TRADE_YEAR, b.MARKET_RATE_RANK

# BranchController
# \u9886\u5BFC\u9A7E\u9A76\u8231-\u5206\u652F\u673A\u6784-\u673A\u6784\u7EE9\u6548-\u5229\u6DA6\u8868\u73B0
# \u53C2\u6570endDate branchId
sel.branch.performance.03 = \
with trade_day as ( \
select substring(cast(MONTH_ID as char(8)) from 1 for 4) as TRADE_YEAR, \
max(MONTH_ID) as TRADE_MONTH \
from DASHBOARD.KPI_BRANCH \
where MONTH_ID <= {0} \
group by substring(cast(MONTH_ID as char(8)) from 1 for 4) \
order by TRADE_YEAR desc limit 2), \
main as ( \
select b.P_ID as SUBCOMPANY_NO, \
b.ID as BRANCH_NO, \
b.SHORT_NAME as BRANCH_NAME, \
a.MONTH_ID, \
a.PROFIT, \
row_number() over(partition by b.P_ID,a.MONTH_ID order by a.PROFIT desc) as PROFIT_RANK, \
lag(a.PROFIT,12) over(partition by a.BRANCH_ID order by a.MONTH_ID) as PROFIT_LY, \
a.PROFIT_INDEX, \
a.PROFIT_COMPLETE_RATE \
from DASHBOARD.KPI_BRANCH a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_ID=b.ID) \
select b.BRANCH_NAME as SUBCOMPANY_NAME, \
a.TRADE_YEAR, \
b.PROFIT_RANK, \
round(cast(coalesce(b.PROFIT,0)/10000 as decimal),2) as PROFIT, \
round(cast((case when (b.PROFIT-b.PROFIT_LY) = 0 or (b.PROFIT-b.PROFIT_LY) is null then 0.0 \
when b.PROFIT_LY = 0 or b.PROFIT_LY is null then 9999999999.0 \
else (b.PROFIT-b.PROFIT_LY)/b.PROFIT_LY*100 end) as decimal),2) as PROFIT_YOY \
from trade_day a \
left join main b on a.TRADE_MONTH=b.MONTH_ID \
where SUBCOMPANY_NO = {1} \
order by a.TRADE_YEAR, b.PROFIT_RANK

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u7B5B\u9009-\u5206\u652F\u673A\u6784
# \u65E0\u53C2\u6570
sel.report.filter.branch = \
with a as (select P_ID,ID,NAME,SHORT_NAME,CATEGORY from UF20_EDW.DIM_BRANCH), \
b as (select ID,NAME from UF20_EDW.DIM_BRANCH) \
select a.P_ID as "subcompany_id", \
b.NAME as "subcompany_name", \
a.ID as "branch_id", \
a.NAME as "branch_name", \
a.SHORT_NAME as "short_name", \
a.CATEGORY as "category" \
from a \
left join b on a.P_ID=b.ID \
where a.ID is not null \
order by a.P_ID,a.ID

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u7B5B\u9009-\u8BC1\u5238\u4EE3\u7801
# \u65E0\u53C2\u6570
sel.report.filter.stock.code = \
select STOCK_CODE, \
concat(concat(STOCK_CODE,' | '),STOCK_NAME) as STOCK_NAME, \
EXCHANGE_TYPE \
from UF20.STKCODE \
where EXCHANGE_TYPE in('1','2','9') and STOCK_TYPE in ('0','c','z','h') \
and STOCK_CODE <> '000000' and STKCODE_STATUS = '0'

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u7B5B\u9009-\u8BC1\u5238\u8D26\u6237
# \u65E0\u53C2\u6570
sel.report.filter.stock.account = \
select distinct STOCK_ACCOUNT \
from REPORT.RESTRICTED_STATISTICS \
where CUST_NO in ({0})

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u7B5B\u9009-\u5BA2\u6237\u53F7
# \u65E0\u53C2\u6570
sel.report.filter.customer = \
select distinct CUST_NO, \
CUST_NAME, \
concat(concat(CUST_NO,' | '),CUST_NAME) as CUSTOMER \
from REPORT.COOP_CLIENT

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u7B5B\u9009-\u8D44\u4EA7\u5206\u6BB5
# \u65E0\u53C2\u6570
sel.report.filter.asset = \
select BUSINESSFLAG_CODE, \
BUSINESSFLAG_NAME \
from UF20_EDW.USER_DEFINE_CODE \
where TYPE_CODE = 'ZC00001' \
order by BUSINESSFLAG_CODE

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886801-\u65E5\u5E38\u4E1A\u52A1\u4EA4\u6613\u7EDF\u8BA1\u539F\u59CB\u65E5\u62A5\u8868
# \u53C2\u6570fromDate toDate branchId fromDate1 branchId1
sel.report.data.report.01.by.filter = \
with \
period_main as ( \
select  BRANCH_CODE, \
sum(STOCK_AMOUNT) as STOCK_AMOUNT, \
sum(FUND_AMOUNT) as FUND_AMOUNT, \
sum(WARRANT_AMOUNT) as WARRANT_AMOUNT, \
sum(SFW_AMOUNT) as SFW_AMOUNT, \
(case when sum(SFW_AMOUNT) = 0 or sum(SFW_AMOUNT) is null then 0.00 \
when sum(SFW_MARKET_AMOUNT) = 0 or sum(SFW_MARKET_AMOUNT) is null then 9999999999.00 \
else sum(SFW_AMOUNT)/sum(SFW_MARKET_AMOUNT)*100 end) as SFW_MARKET_RATE, \
sum(SF_AMOUNT) as SF_AMOUNT, \
(case when sum(SF_AMOUNT) = 0 or sum(SF_AMOUNT) is null then 0.00 \
when sum(SF_MARKET_AMOUNT) = 0 or sum(SF_MARKET_AMOUNT) is null then 9999999999.00 \
else sum(SF_AMOUNT)/sum(SF_MARKET_AMOUNT)*100 end) as SF_MARKET_RATE, \
sum(COMMISSION) as COMMISSION, \
(case when sum(STOCK_COMMISSION) = 0 or sum(STOCK_COMMISSION) is null then 0.00 \
when sum(STOCK_AMOUNT) = 0 or sum(STOCK_AMOUNT) is null then 9999999999.00 \
else sum(STOCK_COMMISSION)/sum(STOCK_AMOUNT)*1000 end) as STOCK_RATE, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM, \
avg(FUND_BALANCE) as FUND_BALANCE_AVG, \
avg(STOCK_BALANCE) as STOCK_BALANCE_AVG, \
avg(ASSET_BALANCE) as ASSET_BALANCE_AVG, \
sum(B_STOCK_AMOUNT) as B_STOCK_AMOUNT, \
(case when sum(SF_COMMISSION) = 0 or sum(SF_COMMISSION) is null then 0.00 \
when sum(SF_AMOUNT) = 0 or sum(SF_AMOUNT) is null then 9999999999.00 \
else sum(SF_COMMISSION)/sum(SF_AMOUNT)*1000 end) as SF_RATE, \
sum(NET_COMMISSION) as NET_COMMISSION, \
sum(CREDIT_AMOUNT) as CREDIT_AMOUNT, \
sum(CREDIT_COMMISSION) as CREDIT_COMMISSION, \
sum(CREDIT_NET_COMMISSION) as CREDIT_NET_COMMISSION, \
sum(ASSURE_AMOUNT) as ASSURE_AMOUNT, \
sum(ASSURE_COMMISSION) as ASSURE_COMMISSION, \
sum(ASSURE_NET_COMMISSION) as ASSURE_NET_COMMISSION, \
(case when sum(SFW_AMOUNT_ALL) = 0 or sum(SFW_AMOUNT_ALL) is null then 0.00 \
when sum(SFW_MARKET_AMOUNT_ALL) = 0 or sum(SFW_MARKET_AMOUNT_ALL) is null then 9999999999.00 \
else sum(SFW_AMOUNT_ALL)/sum(SFW_MARKET_AMOUNT_ALL)*100 end) as SFW_MARKET_AMOUNT_ALL_RATE, \
(case when sum(SF_AMOUNT_ALL) = 0 or sum(SF_AMOUNT_ALL) is null then 0.00 \
when sum(SF_MARKET_AMOUNT_ALL) = 0 or sum(SF_MARKET_AMOUNT_ALL) is null then 9999999999.00 \
else sum(SF_AMOUNT_ALL)/sum(SF_MARKET_AMOUNT_ALL)*100 end) as SF_MARKET_AMOUNT_ALL_RATE, \
(case when sum(STOCK_COMMISSION_ALL) = 0 or sum(STOCK_COMMISSION_ALL) is null then 0.00 \
when sum(STOCK_AMOUNT_ALL) = 0 or sum(STOCK_AMOUNT_ALL) is null then 9999999999.00 \
else sum(STOCK_COMMISSION_ALL)/sum(STOCK_AMOUNT_ALL)*1000 end) as STOCK_AMOUNT_ALL_RATE, \
(case when sum(SF_COMMISSION_ALL) = 0 or sum(SF_COMMISSION_ALL) is null then 0.00 \
when sum(SF_AMOUNT_ALL) = 0 or sum(SF_AMOUNT_ALL) is null then 9999999999.00 \
else sum(SF_COMMISSION_ALL)/sum(SF_AMOUNT_ALL)*1000 end) as SF_AMOUNT_ALL_RATE, \
avg(DEBIT_BALANCE) as DEBIT_BALANCE_AVG, \
avg(ASSURE_BALANCE) as ASSURE_BALANCE_AVG, \
sum(MARGIN_OPEN_CUST_NUM) as MARGIN_OPEN_CUST_NUM, \
sum(SFW_AMOUNT_ALL) as SFW_AMOUNT_ALL, \
sum(COMMISSION_ALL) as COMMISSION_ALL, \
sum(NET_COMMISSION_ALL) as NET_COMMISSION_ALL, \
sum(HK_STOCK_AMOUNT) as HK_STOCK_AMOUNT, \
sum(HK_COMMISSION) as HK_COMMISSION, \
avg(MULTI_FINANCIAL_AMOUNT) as MULTI_FINANCIAL_AMOUNT_AVG \
from REPORT.TRADE_STATISTICS_DETAIL \
where INIT_DATE between {0} and {1} \
{2} \
group by BRANCH_CODE), \
year_main as ( \
select  BRANCH_CODE, \
sum(STOCK_AMOUNT) as STOCK_AMOUNT_Y, \
sum(FUND_AMOUNT) as FUND_AMOUNT_Y, \
sum(WARRANT_AMOUNT) as WARRANT_AMOUNT_Y, \
sum(SFW_AMOUNT) as SFW_AMOUNT_Y, \
(case when sum(SFW_AMOUNT) = 0 or sum(SFW_AMOUNT) is null then 0.00 \
when sum(SFW_MARKET_AMOUNT) = 0 or sum(SFW_MARKET_AMOUNT) is null then 9999999999.00 \
else sum(SFW_AMOUNT)/sum(SFW_MARKET_AMOUNT)*100 end) as SFW_MARKET_RATE_Y, \
sum(SF_AMOUNT) as SF_AMOUNT_Y, \
(case when sum(SF_AMOUNT) = 0 or sum(SF_AMOUNT) is null then 0.00 \
when sum(SF_MARKET_AMOUNT) = 0 or sum(SF_MARKET_AMOUNT) is null then 9999999999.00 \
else sum(SF_AMOUNT)/sum(SF_MARKET_AMOUNT)*100 end) as SF_MARKET_RATE_Y, \
sum(COMMISSION) as COMMISSION_Y, \
(case when sum(STOCK_COMMISSION) = 0 or sum(STOCK_COMMISSION) is null then 0.00 \
when sum(STOCK_AMOUNT) = 0 or sum(STOCK_AMOUNT) is null then 9999999999.00 \
else sum(STOCK_COMMISSION)/sum(STOCK_AMOUNT)*1000 end) as STOCK_RATE_Y, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM_Y, \
avg(FUND_BALANCE) as FUND_BALANCE_AVG_Y, \
avg(STOCK_BALANCE) as STOCK_BALANCE_AVG_Y, \
avg(ASSET_BALANCE) as ASSET_BALANCE_AVG_Y, \
sum(B_STOCK_AMOUNT) as B_STOCK_AMOUNT_Y, \
(case when sum(SF_COMMISSION) = 0 or sum(SF_COMMISSION) is null then 0.00 \
when sum(SF_AMOUNT) = 0 or sum(SF_AMOUNT) is null then 9999999999.00 \
else sum(SF_COMMISSION)/sum(SF_AMOUNT)*1000 end) as SF_RATE_Y, \
sum(NET_COMMISSION) as NET_COMMISSION_Y, \
sum(CREDIT_AMOUNT) as CREDIT_AMOUNT_Y, \
sum(CREDIT_COMMISSION) as CREDIT_COMMISSION_Y, \
sum(CREDIT_NET_COMMISSION) as CREDIT_NET_COMMISSION_Y, \
sum(ASSURE_AMOUNT) as ASSURE_AMOUNT_Y, \
sum(ASSURE_COMMISSION) as ASSURE_COMMISSION_Y, \
sum(ASSURE_NET_COMMISSION) as ASSURE_NET_COMMISSION_Y, \
(case when sum(SFW_AMOUNT_ALL) = 0 or sum(SFW_AMOUNT_ALL) is null then 0.00 \
when sum(SFW_MARKET_AMOUNT_ALL) = 0 or sum(SFW_MARKET_AMOUNT_ALL) is null then 9999999999.00 \
else sum(SFW_AMOUNT_ALL)/sum(SFW_MARKET_AMOUNT_ALL)*100 end) as SFW_MARKET_AMOUNT_ALL_RATE_Y, \
(case when sum(SF_AMOUNT_ALL) = 0 or sum(SF_AMOUNT_ALL) is null then 0.00 \
when sum(SF_MARKET_AMOUNT_ALL) = 0 or sum(SF_MARKET_AMOUNT_ALL) is null then 9999999999.00 \
else sum(SF_AMOUNT_ALL)/sum(SF_MARKET_AMOUNT_ALL)*100 end) as SF_MARKET_AMOUNT_ALL_RATE_Y, \
(case when sum(STOCK_COMMISSION_ALL) = 0 or sum(STOCK_COMMISSION_ALL) is null then 0.00 \
when sum(STOCK_AMOUNT_ALL) = 0 or sum(STOCK_AMOUNT_ALL) is null then 9999999999.00 \
else sum(STOCK_COMMISSION_ALL)/sum(STOCK_AMOUNT_ALL)*1000 end) as STOCK_AMOUNT_ALL_RATE_Y, \
(case when sum(SF_COMMISSION_ALL) = 0 or sum(SF_COMMISSION_ALL) is null then 0.00 \
when sum(SF_AMOUNT_ALL) = 0 or sum(SF_AMOUNT_ALL) is null then 9999999999.00 \
else sum(SF_COMMISSION_ALL)/sum(SF_AMOUNT_ALL)*1000 end) as SF_AMOUNT_ALL_RATE_Y, \
avg(DEBIT_BALANCE) as DEBIT_BALANCE_AVG_Y, \
avg(ASSURE_BALANCE) as ASSURE_BALANCE_AVG_Y, \
sum(SFW_AMOUNT_ALL) as SFW_AMOUNT_ALL_Y, \
sum(COMMISSION_ALL) as COMMISSION_ALL_Y, \
sum(NET_COMMISSION_ALL) as NET_COMMISSION_ALL_Y, \
sum(HK_STOCK_AMOUNT) as HK_STOCK_AMOUNT_Y, \
sum(HK_COMMISSION) as HK_COMMISSION_Y, \
sum(HK_OPEN_CUST_NUM) as HK_OPEN_CUST_NUM_Y \
from REPORT.TRADE_STATISTICS_DETAIL a \
where a.init_date between {3} and {1} \
{2} \
group by BRANCH_CODE), \
period_close as ( \
select  BRANCH_CODE, \
FUND_BALANCE as FUND_BALANCE_CLOSE_P, \
STOCK_BALANCE as STOCK_BALANCE_CLOSE_P, \
ASSET_BALANCE as ASSET_BALANCE_CLOSE_P, \
ASSURE_BALANCE as ASSURE_BALANCE_CLOSE_P, \
DEBIT_BALANCE  as DEBIT_BALANCE_CLOSE_P \
from REPORT.TRADE_STATISTICS_DETAIL \
where INIT_DATE = {1} \
{2}), \
year_close as ( \
select  BRANCH_CODE, \
FUND_BALANCE as FUND_BALANCE_CLOSE_Y, \
STOCK_BALANCE as STOCK_BALANCE_CLOSE_Y, \
ASSET_BALANCE as ASSET_BALANCE_CLOSE_Y, \
ASSURE_BALANCE as ASSURE_BALANCE_CLOSE_Y, \
DEBIT_BALANCE  as DEBIT_BALANCE_CLOSE_Y \
from REPORT.TRADE_STATISTICS_DETAIL \
where INIT_DATE = {1}), \
total_cust as ( \
select BRANCH_CODE, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM_TOTAL \
from REPORT.TRADE_STATISTICS_DETAIL \
{4} \
group by BRANCH_CODE) \
select  a.NAME as BRANCH_NAME, \
round(cast(coalesce(STOCK_AMOUNT,0)/10000 as decimal),2) as STOCK_AMOUNT, \
round(cast(coalesce(FUND_AMOUNT,0)/10000 as decimal),2) as FUND_AMOUNT, \
round(cast(coalesce(WARRANT_AMOUNT,0)/10000 as decimal),2) as WARRANT_AMOUNT, \
round(cast(coalesce(SFW_AMOUNT,0)/10000 as decimal),2) as SFW_AMOUNT, \
round(cast(coalesce(SFW_MARKET_RATE,0) as decimal),2) as SFW_MARKET_RATE, \
round(cast(coalesce(SF_AMOUNT,0)/10000 as decimal),2) as SF_AMOUNT, \
round(cast(coalesce(SF_MARKET_RATE,0) as decimal),2) as SF_MARKET_RATE, \
round(cast(coalesce(COMMISSION,0)/10000 as decimal),2) as COMMISSION, \
round(cast(coalesce(STOCK_RATE,0) as decimal),4) as STOCK_RATE, \
coalesce(OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
round(cast(coalesce(FUND_BALANCE_AVG,0)/10000 as decimal),2) as FUND_BALANCE_AVG, \
round(cast(coalesce(STOCK_BALANCE_AVG,0)/10000 as decimal),2) as STOCK_BALANCE_AVG, \
round(cast(coalesce(ASSET_BALANCE_AVG,0)/10000 as decimal),2) as ASSET_BALANCE_AVG, \
round(cast(coalesce(FUND_BALANCE_CLOSE_P,0)/10000 as decimal),2) as FUND_BALANCE_CLOSE_P, \
round(cast(coalesce(STOCK_BALANCE_CLOSE_P,0)/10000 as decimal),2) as STOCK_BALANCE_CLOSE_P, \
round(cast(coalesce(ASSET_BALANCE_CLOSE_P,0)/10000 as decimal),2) as ASSET_BALANCE_CLOSE_P, \
round(cast(coalesce(STOCK_AMOUNT_Y,0)/10000 as decimal),2) as STOCK_AMOUNT_Y, \
round(cast(coalesce(FUND_AMOUNT_Y,0)/10000 as decimal),2) as FUND_AMOUNT_Y, \
round(cast(coalesce(WARRANT_AMOUNT_Y,0)/10000 as decimal),2) as WARRANT_AMOUNT_Y, \
round(cast(coalesce(SFW_AMOUNT_Y,0)/10000 as decimal),2) as SFW_AMOUNT_Y, \
round(cast(coalesce(SFW_MARKET_RATE_Y,0) as decimal),2) as SFW_MARKET_RATE_Y, \
round(cast(coalesce(SF_AMOUNT_Y,0)/10000 as decimal),2) as SF_AMOUNT_Y, \
round(cast(coalesce(SF_MARKET_RATE_Y,0) as decimal),2) as SF_MARKET_RATE_Y, \
round(cast(coalesce(COMMISSION_Y,0)/10000 as decimal),2) as COMMISSION_Y, \
round(cast(coalesce(STOCK_RATE_Y,0) as decimal),4) as STOCK_RATE_Y, \
coalesce(OPEN_CUST_NUM_Y,0) as OPEN_CUST_NUM_Y, \
round(cast(coalesce(FUND_BALANCE_AVG_Y,0)/10000 as decimal),2) as FUND_BALANCE_AVG_Y, \
round(cast(coalesce(STOCK_BALANCE_AVG_Y,0)/10000 as decimal),2) as STOCK_BALANCE_AVG_Y, \
round(cast(coalesce(ASSET_BALANCE_AVG_Y,0)/10000 as decimal),2) as ASSET_BALANCE_AVG_Y, \
round(cast(coalesce(FUND_BALANCE_CLOSE_Y,0)/10000 as decimal),2) as FUND_BALANCE_CLOSE_Y, \
round(cast(coalesce(STOCK_BALANCE_CLOSE_Y,0)/10000 as decimal),2) as STOCK_BALANCE_CLOSE_Y, \
round(cast(coalesce(ASSET_BALANCE_CLOSE_Y,0)/10000 as decimal),2) as ASSET_BALANCE_CLOSE_Y, \
coalesce(OPEN_CUST_NUM_TOTAL,0) as OPEN_CUST_NUM_TOTAL, \
round(cast(coalesce(B_STOCK_AMOUNT,0)/10000 as decimal),2) as B_STOCK_AMOUNT, \
round(cast(coalesce(B_STOCK_AMOUNT_Y,0)/10000 as decimal),2) as B_STOCK_AMOUNT_Y, \
round(cast(coalesce(SF_RATE,0) as decimal),4) as SF_RATE, \
round(cast(coalesce(SF_RATE_Y,0) as decimal),4) as SF_RATE_Y, \
round(cast(coalesce(NET_COMMISSION_Y,0)/10000 as decimal),2) as NET_COMMISSION_Y, \
round(cast(coalesce(NET_COMMISSION,0)/10000 as decimal),2) as NET_COMMISSION, \
round(cast(coalesce(CREDIT_AMOUNT,0)/10000 as decimal),2) as CREDIT_AMOUNT, \
round(cast(coalesce(CREDIT_COMMISSION,0)/10000 as decimal),2) as CREDIT_COMMISSION, \
round(cast(coalesce(CREDIT_NET_COMMISSION,0)/10000 as decimal),2) as CREDIT_NET_COMMISSION, \
round(cast(coalesce(ASSURE_AMOUNT,0)/10000 as decimal),2) as ASSURE_AMOUNT, \
round(cast(coalesce(ASSURE_COMMISSION,0)/10000 as decimal),2) as ASSURE_COMMISSION, \
round(cast(coalesce(ASSURE_NET_COMMISSION,0)/10000 as decimal),2) as ASSURE_NET_COMMISSION, \
round(cast(coalesce(ASSURE_BALANCE_CLOSE_P,0)/10000 as decimal),2) as ASSURE_BALANCE_CLOSE_P, \
round(cast(coalesce(DEBIT_BALANCE_CLOSE_P,0)/10000 as decimal),2) as DEBIT_BALANCE_CLOSE_P, \
round(cast(coalesce(CREDIT_AMOUNT_Y,0)/10000 as decimal),2) as CREDIT_AMOUNT_Y, \
round(cast(coalesce(CREDIT_COMMISSION_Y,0)/10000 as decimal),2) as CREDIT_COMMISSION_Y, \
round(cast(coalesce(CREDIT_NET_COMMISSION_Y,0)/10000 as decimal),2) as CREDIT_NET_COMMISSION_Y, \
round(cast(coalesce(ASSURE_AMOUNT_Y,0)/10000 as decimal),2) as ASSURE_AMOUNT_Y, \
round(cast(coalesce(ASSURE_COMMISSION_Y,0)/10000 as decimal),2) as ASSURE_COMMISSION_Y, \
round(cast(coalesce(ASSURE_NET_COMMISSION_Y,0)/10000 as decimal),2) as ASSURE_NET_COMMISSION_Y, \
round(cast(coalesce(ASSURE_BALANCE_CLOSE_Y,0)/10000 as decimal),2) as ASSURE_BALANCE_CLOSE_Y, \
round(cast(coalesce(DEBIT_BALANCE_CLOSE_Y,0)/10000 as decimal),2) as DEBIT_BALANCE_CLOSE_Y, \
round(cast(coalesce(SFW_MARKET_AMOUNT_ALL_RATE,0) as decimal),4) as SFW_MARKET_AMOUNT_ALL_RATE, \
round(cast(coalesce(SF_MARKET_AMOUNT_ALL_RATE,0) as decimal),4) as SF_MARKET_AMOUNT_ALL_RATE, \
round(cast(coalesce(SFW_MARKET_AMOUNT_ALL_RATE_Y,0) as decimal),4) as SFW_MARKET_AMOUNT_ALL_RATE_Y, \
round(cast(coalesce(SF_MARKET_AMOUNT_ALL_RATE_Y,0) as decimal),4) as SF_MARKET_AMOUNT_ALL_RATE_Y, \
round(cast(coalesce(STOCK_AMOUNT_ALL_RATE,0) as decimal),4) as STOCK_AMOUNT_ALL_RATE, \
round(cast(coalesce(STOCK_AMOUNT_ALL_RATE_Y,0) as decimal),4) as STOCK_AMOUNT_ALL_RATE_Y, \
round(cast(coalesce(SF_AMOUNT_ALL_RATE,0) as decimal),4) as SF_AMOUNT_ALL_RATE, \
round(cast(coalesce(SF_AMOUNT_ALL_RATE_Y,0) as decimal),4) as SF_AMOUNT_ALL_RATE_Y, \
round(cast(coalesce(DEBIT_BALANCE_AVG,0)/10000 as decimal),2) as DEBIT_BALANCE_AVG, \
round(cast(coalesce(ASSURE_BALANCE_AVG,0)/10000 as decimal),2) as ASSURE_BALANCE_AVG, \
round(cast(coalesce(DEBIT_BALANCE_AVG_Y,0)/10000 as decimal),2) as DEBIT_BALANCE_AVG_Y, \
round(cast(coalesce(ASSURE_BALANCE_AVG_Y,0)/10000 as decimal),2) as ASSURE_BALANCE_AVG_Y, \
coalesce(MARGIN_OPEN_CUST_NUM,0) as MARGIN_OPEN_CUST_NUM, \
round(cast(coalesce(SFW_AMOUNT_ALL,0)/10000 as decimal),2) as SFW_AMOUNT_ALL, \
round(cast(coalesce(COMMISSION_ALL,0)/10000 as decimal),2) as COMMISSION_ALL, \
round(cast(coalesce(NET_COMMISSION_ALL,0)/10000 as decimal),2) as NET_COMMISSION_ALL, \
round(cast(coalesce(SFW_AMOUNT_ALL_Y,0)/10000 as decimal),2) as SFW_AMOUNT_ALL_Y, \
round(cast(coalesce(COMMISSION_ALL_Y,0)/10000 as decimal),2) as COMMISSION_ALL_Y, \
round(cast(coalesce(NET_COMMISSION_ALL_Y,0)/10000 as decimal),2) as NET_COMMISSION_ALL_Y, \
round(cast(coalesce(HK_STOCK_AMOUNT,0)/10000 as decimal),2) as HK_STOCK_AMOUNT, \
round(cast(coalesce(HK_COMMISSION,0)/10000 as decimal),2) as HK_COMMISSION, \
round(cast(coalesce(HK_STOCK_AMOUNT_Y,0)/10000 as decimal),2) as HK_STOCK_AMOUNT_Y, \
round(cast(coalesce(HK_COMMISSION_Y,0)/10000 as decimal),2) as HK_COMMISSION_Y, \
coalesce(HK_OPEN_CUST_NUM_Y,0) as HK_OPEN_CUST_NUM_Y, \
round(cast(coalesce(MULTI_FINANCIAL_AMOUNT_AVG,0)/10000 as decimal),2) as MULTI_FINANCIAL_AMOUNT_AVG \
from year_main \
left join period_main on year_main.BRANCH_CODE=period_main.BRANCH_CODE \
left join period_close on year_main.BRANCH_CODE=period_close.BRANCH_CODE \
left join year_close on year_main.BRANCH_CODE=year_close.BRANCH_CODE \
left join total_cust on year_main.BRANCH_CODE=total_cust.BRANCH_CODE \
left join UF20_EDW.DIM_BRANCH a on year_main.BRANCH_CODE=a.ID

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886802-\u5206\u652F\u673A\u6784\u4EA4\u6613\u7EDF\u8BA1\u65E5\u62A5\u8868
# \u53C2\u6570endDate branchId branchId1
sel.report.data.report.02.by.filter = \
with all_cust_num as ( \
select INIT_DATE, \
BRANCH_CODE as BRANCH_NO, \
ALL_OPEN_CUST_NUM \
from REPORT.TRADE_STATISTICS_WEEKLY \
where INIT_DATE = {0} \
{1} \
) \
select  b.NAME as BRANCH_NAME, \
round(cast(coalesce(a.TRADE_AMOUNT,0)/10000 as decimal),2) as TRADE_AMOUNT, \
round(cast(coalesce(a.STOCK_AMOUNT,0)/10000 as decimal),2) as STOCK_AMOUNT, \
round(cast(coalesce(a.PLEDGE_AMOUNT,0)/10000 as decimal),2) as PLEDGE_AMOUNT, \
round(cast(coalesce(a.FUND_AMOUNT,0)/10000 as decimal),2) as FUND_AMOUNT, \
round(cast(coalesce(a.MARGIN_STOCK_AMOUNT,0)/10000 as decimal),2) as MARGIN_STOCK_AMOUNT, \
round(cast(coalesce(a.MARGIN_FUND_AMOUNT,0)/10000 as decimal),2) as MARGIN_FUND_AMOUNT, \
round(cast(coalesce(a.MARGIN_BOND_AMOUNT,0)/10000 as decimal),2) as MARGIN_BOND_AMOUNT, \
round(cast(coalesce(a.ALL_TRADE_AMOUNT,0)/10000 as decimal),2) as ALL_TRADE_AMOUNT, \
round(cast(coalesce(a.COMMISSION,0)/10000 as decimal),2) as COMMISSION, \
round(cast(coalesce(a.STOCK_COMMISSION,0)/10000 as decimal),2) as STOCK_COMMISSION, \
round(cast(coalesce(a.FUND_COMMISSION,0)/10000 as decimal),2) as FUND_COMMISSION, \
round(cast(coalesce(a.MARGIN_STOCK_COMMISSION,0)/10000 as decimal),2) as MARGIN_STOCK_COMMISSION, \
round(cast(coalesce(a.MARGIN_FUND_COMMISSION,0)/10000 as decimal),2) as MARGIN_FUND_COMMISSION, \
round(cast(coalesce(a.MARGIN_BOND_COMMISSION,0)/10000 as decimal),2) as MARGIN_BOND_COMMISSION, \
round(cast(coalesce(a.ALL_COMMISSION,0)/10000 as decimal),2) as ALL_COMMISSION, \
round(cast(coalesce(a.ALL_STOCK_COMMISSION,0)/10000 as decimal),2) as ALL_STOCK_COMMISSION,  \
round(cast(coalesce(a.ALL_FUND_COMMISSION,0)/10000 as decimal),2) as ALL_FUND_COMMISSION, \
round(cast(coalesce(a.ALL_MARGIN_STOCK_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_STOCK_COMMISSION, \
round(cast(coalesce(a.ALL_MARGIN_FUND_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_FUND_COMMISSION, \
round(cast(coalesce(a.ALL_MARGIN_BOND_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_BOND_COMMISSION, \
coalesce(a.OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
coalesce(a1.ALL_OPEN_CUST_NUM,0) as ALL_OPEN_CUST_NUM, \
round(cast(coalesce(a.MARKET_RATE,0)*100 as decimal),4) as MARKET_RATE, \
round(cast(coalesce(a.ALL_MARKET_RATE,0)*100 as decimal),4) as ALL_MARKET_RATE,  \
round(cast(coalesce(a.CHECK_MARKET_RATE_FD,0)*100 as decimal),4) as CHECK_MARKET_RATE_FD, \
round(cast(coalesce(a.LASTYEAR_MARKET_RATE,0)*100 as decimal),4) as LASTYEAR_MARKET_RATE, \
round(cast(coalesce(a.MARKET_RATE_CHANGE,0)*100 as decimal),4) as MARKET_RATE_CHANGE, \
round(cast(coalesce(a.STOCK_RATE,0)*1000 as decimal),4) as STOCK_RATE,\
round(cast(coalesce(a.ALL_STOCK_RATE,0)*1000 as decimal),4) as ALL_STOCK_RATE \
from REPORT.TRADE_STATISTICS_DAILY a \
inner join all_cust_num a1 on a.INIT_DATE=a1.INIT_DATE and a.BRANCH_CODE=a1.BRANCH_NO \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE=b.ID \
where a.INIT_DATE = {0} \
{2}

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886803-\u5206\u652F\u673A\u6784\u4EA4\u6613\u7EDF\u8BA1\u5468\u62A5\u8868
# \u53C2\u6570fromDate toDate branchId
sel.report.data.report.03.by.filter = \
with \
weekly_main as ( \
select BRANCH_CODE, \
sum(TRADE_AMOUNT) as TRADE_AMOUNT, \
sum(STOCK_AMOUNT) as STOCK_AMOUNT, \
sum(PLEDGE_AMOUNT) as PLEDGE_AMOUNT, \
sum(FUND_AMOUNT) as FUND_AMOUNT, \
sum(MARGIN_STOCK_AMOUNT) as MARGIN_STOCK_AMOUNT, \
sum(MARGIN_FUND_AMOUNT) as MARGIN_FUND_AMOUNT, \
sum(MARGIN_BOND_AMOUNT) as MARGIN_BOND_AMOUNT, \
sum(COMMISSION) as COMMISSION, \
sum(SFW_COMMISSION) as SFW_COMMISSION, \
sum(STOCK_COMMISSION) as STOCK_COMMISSION, \
sum(FUND_COMMISSION) as FUND_COMMISSION, \
sum(MARGIN_COMMISSION) as MARGIN_COMMISSION, \
sum(MARGIN_STOCK_COMMISSION) as MARGIN_STOCK_COMMISSION, \
sum(MARGIN_FUND_COMMISSION) as MARGIN_FUND_COMMISSION, \
sum(MARGIN_BOND_COMMISSION) as MARGIN_BOND_COMMISSION, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM, \
(case when sum(TRADE_AMOUNT) = 0 or sum(TRADE_AMOUNT) is null then 0.00 \
when sum(MARKET_AMOUNT) = 0 or sum(MARKET_AMOUNT) is null then 9999999999.00 \
else sum(TRADE_AMOUNT)/sum(MARKET_AMOUNT)*100 end) as TRADE_AMOUNT_RATE, \
avg(CUST_RIGHT) as CUST_RIGHT_AVG, \
avg(FUND_BALANCE) as FUND_BALANCE_AVG, \
avg(STOCK_BALANCE) as STOCK_BALANCE_AVG, \
avg(MULTI_FINANCIAL_BALANCE) as MULTI_FINANCIAL_BALANCE_AVG, \
avg(MARGIN_DEBIT) as MARGIN_DEBIT_AVG, \
avg(PLEDGE_DEBIT) as PLEDGE_DEBIT_AVG  \
from REPORT.TRADE_STATISTICS_WEEKLY \
where INIT_DATE between {0} and {1} \
{2} \
group by BRANCH_CODE), \
weekly_close as ( \
select BRANCH_CODE, \
ALL_TRADE_AMOUNT, \
ALL_STOCK_AMOUNT, \
ALL_PLEDGE_AMOUNT, \
ALL_FUND_AMOUNT, \
ALL_MARGIN_STOCK_AMOUNT, \
ALL_MARGIN_FUND_AMOUNT, \
ALL_MARGIN_BOND_AMOUNT, \
ALL_COMMISSION, \
ALL_STOCK_COMMISSION, \
ALL_FUND_COMMISSION,  \
ALL_MARGIN_STOCK_COMMISSION, \
ALL_MARGIN_FUND_COMMISSION,  \
ALL_MARGIN_BOND_COMMISSION,  \
ALL_OPEN_CUST_NUM, \
(case when ALL_TRADE_AMOUNT = 0 or ALL_TRADE_AMOUNT is null then 0.00 \
when ALL_MARKET_AMOUNT = 0 or ALL_MARKET_AMOUNT is null then 9999999999.00 \
else ALL_TRADE_AMOUNT/ALL_MARKET_AMOUNT*100 end) as ALL_TRADE_AMOUNT_RATE, \
CHECK_MARKET_RATE_FD, \
CUST_RIGHT as CUST_RIGHT_CLOSE \
from REPORT.TRADE_STATISTICS_WEEKLY \
where INIT_DATE = {1}  \
{2}) \
select a.NAME as BRANCH_NAME, \
round(cast(coalesce(TRADE_AMOUNT,0)/10000 as decimal),2) as TRADE_AMOUNT, \
round(cast(coalesce(STOCK_AMOUNT,0)/10000 as decimal),2) as STOCK_AMOUNT, \
round(cast(coalesce(PLEDGE_AMOUNT,0)/10000 as decimal),2) as PLEDGE_AMOUNT, \
round(cast(coalesce(FUND_AMOUNT,0)/10000 as decimal),2) as FUND_AMOUNT, \
round(cast(coalesce(MARGIN_STOCK_AMOUNT,0)/10000 as decimal),2) as MARGIN_STOCK_AMOUNT, \
round(cast(coalesce(MARGIN_FUND_AMOUNT,0)/10000 as decimal),2) as MARGIN_FUND_AMOUNT, \
round(cast(coalesce(MARGIN_BOND_AMOUNT,0)/10000 as decimal),2) as MARGIN_BOND_AMOUNT, \
round(cast(coalesce(ALL_TRADE_AMOUNT,0)/10000 as decimal),2) as ALL_TRADE_AMOUNT, \
round(cast(coalesce(ALL_STOCK_AMOUNT,0)/10000 as decimal),2) as ALL_STOCK_AMOUNT, \
round(cast(coalesce(ALL_PLEDGE_AMOUNT,0)/10000 as decimal),2) as ALL_PLEDGE_AMOUNT, \
round(cast(coalesce(ALL_FUND_AMOUNT,0)/10000 as decimal),2) as ALL_FUND_AMOUNT, \
round(cast(coalesce(ALL_MARGIN_STOCK_AMOUNT,0)/10000 as decimal),2) as ALL_MARGIN_STOCK_AMOUNT, \
round(cast(coalesce(ALL_MARGIN_FUND_AMOUNT,0)/10000 as decimal),2) as ALL_MARGIN_FUND_AMOUNT, \
round(cast(coalesce(ALL_MARGIN_BOND_AMOUNT,0)/10000 as decimal),2) as ALL_MARGIN_BOND_AMOUNT, \
round(cast(coalesce(COMMISSION,0)/10000 as decimal),2) as COMMISSION, \
round(cast(coalesce(STOCK_COMMISSION,0)/10000 as decimal),2) as STOCK_COMMISSION, \
round(cast(coalesce(FUND_COMMISSION,0)/10000 as decimal),2) as FUND_COMMISSION, \
round(cast(coalesce(MARGIN_STOCK_COMMISSION,0)/10000 as decimal),2) as MARGIN_STOCK_COMMISSION, \
round(cast(coalesce(MARGIN_FUND_COMMISSION,0)/10000 as decimal),2) as MARGIN_FUND_COMMISSION,  \
round(cast(coalesce(MARGIN_BOND_COMMISSION,0)/10000 as decimal),2) as MARGIN_BOND_COMMISSION,  \
round(cast(coalesce(ALL_COMMISSION,0)/10000 as decimal),2) as ALL_COMMISSION,  \
round(cast(coalesce(ALL_STOCK_COMMISSION,0)/10000 as decimal),2) as ALL_STOCK_COMMISSION, \
round(cast(coalesce(ALL_FUND_COMMISSION,0)/10000 as decimal),2) as ALL_FUND_COMMISSION, \
round(cast(coalesce(ALL_MARGIN_STOCK_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_STOCK_COMMISSION, \
round(cast(coalesce(ALL_MARGIN_FUND_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_FUND_COMMISSION, \
round(cast(coalesce(ALL_MARGIN_BOND_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_BOND_COMMISSION, \
coalesce(OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
coalesce(ALL_OPEN_CUST_NUM,0) as ALL_OPEN_CUST_NUM, \
round(cast(coalesce(TRADE_AMOUNT_RATE,0) as decimal),2) as TRADE_AMOUNT_RATE, \
round(cast(coalesce(ALL_TRADE_AMOUNT_RATE,0) as decimal),2) as ALL_TRADE_AMOUNT_RATE, \
round(cast(coalesce(CHECK_MARKET_RATE_FD,0) as decimal),2) as CHECK_MARKET_RATE_FD, \
round(cast(coalesce(CUST_RIGHT_AVG,0)/10000 as decimal),2) as CUST_RIGHT_AVG, \
round(cast(coalesce(FUND_BALANCE_AVG,0)/10000 as decimal),2) as FUND_BALANCE_AVG, \
round(cast(coalesce(STOCK_BALANCE_AVG,0)/10000 as decimal),2) as STOCK_BALANCE_AVG,  \
round(cast(coalesce(MULTI_FINANCIAL_BALANCE_AVG,0)/10000 as decimal),2) as MULTI_FINANCIAL_BALANCE_AVG, \
round(cast(coalesce(MARGIN_DEBIT_AVG,0)/10000 as decimal),2) as MARGIN_DEBIT_AVG, \
round(cast(coalesce(PLEDGE_DEBIT_AVG,0)/10000 as decimal),2) as PLEDGE_DEBIT_AVG, \
round(cast(coalesce(CUST_RIGHT_CLOSE,0)/10000 as decimal),2) as CUST_RIGHT_CLOSE \
from weekly_main \
left join weekly_close on weekly_main.BRANCH_CODE=weekly_close.BRANCH_CODE \
left join UF20_EDW.DIM_BRANCH a on weekly_main.BRANCH_CODE=a.ID

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886804-\u5206\u652F\u673A\u6784\u4EA4\u6613\u7EDF\u8BA1\u6708\u62A5\u8868
# \u53C2\u6570endDate branchId
sel.report.data.report.04.by.filter = \
select  b.NAME as BRANCH_NAME, \
round(cast(coalesce(TRADE_AMOUNT,0)/10000 as decimal),2) as TRADE_AMOUNT, \
round(cast(coalesce(STOCK_AMOUNT,0)/10000 as decimal),2) as STOCK_AMOUNT, \
round(cast(coalesce(PLEDGE_AMOUNT,0)/10000 as decimal),2) as PLEDGE_AMOUNT, \
round(cast(coalesce(FUND_AMOUNT,0)/10000 as decimal),2) as FUND_AMOUNT, \
round(cast(coalesce(MARGIN_STOCK_AMOUNT,0)/10000 as decimal),2) as MARGIN_STOCK_AMOUNT, \
round(cast(coalesce(MARGIN_FUND_AMOUNT,0)/10000 as decimal),2) as MARGIN_FUND_AMOUNT, \
round(cast(coalesce(MARGIN_BOND_AMOUNT,0)/10000 as decimal),2) as MARGIN_BOND_AMOUNT, \
round(cast(coalesce(FUND_DIVISION,0)/10000 as decimal),2) as FUND_DIVISION, \
round(cast(coalesce(ALL_TRADE_AMOUNT,0)/10000 as decimal),2) as ALL_TRADE_AMOUNT, \
round(cast(coalesce(ALL_STOCK_AMOUNT,0)/10000 as decimal),2) as ALL_STOCK_AMOUNT, \
round(cast(coalesce(ALL_PLEDGE_AMOUNT,0)/10000 as decimal),2) as ALL_PLEDGE_AMOUNT, \
round(cast(coalesce(ALL_FUND_AMOUNT,0)/10000 as decimal),2) as ALL_FUND_AMOUNT, \
round(cast(coalesce(ALL_MARGIN_STOCK_AMOUNT,0)/10000 as decimal),2) as ALL_MARGIN_STOCK_AMOUNT, \
round(cast(coalesce(ALL_MARGIN_FUND_AMOUNT,0)/10000 as decimal),2) as ALL_MARGIN_FUND_AMOUNT, \
round(cast(coalesce(ALL_MARGIN_BOND_AMOUNT,0)/10000 as decimal),2) as ALL_MARGIN_BOND_AMOUNT, \
round(cast(coalesce(ALL_TRADE_AMOUNT_FD,0)/10000 as decimal),2) as ALL_TRADE_AMOUNT_FD, \
round(cast(coalesce(ALL_FUND_DIVISION,0)/10000 as decimal),2) as ALL_FUND_DIVISION, \
round(cast(coalesce(COMMISSION,0)/10000 as decimal),2) as COMMISSION, \
round(cast(coalesce(COMMISSION_ADJUST,0)/10000 as decimal),2) as COMMISSION_ADJUST, \
round(cast(coalesce(STOCK_COMMISSION,0)/10000 as decimal),2) as STOCK_COMMISSION, \
round(cast(coalesce(FUND_COMMISSION,0)/10000 as decimal),2) as FUND_COMMISSION, \
round(cast(coalesce(MARGIN_STOCK_COMMISSION,0)/10000 as decimal),2) as MARGIN_STOCK_COMMISSION, \
round(cast(coalesce(MARGIN_FUND_COMMISSION,0)/10000 as decimal),2) as MARGIN_FUND_COMMISSION, \
round(cast(coalesce(MARGIN_BOND_COMMISSION,0)/10000 as decimal),2) as MARGIN_BOND_COMMISSION, \
round(cast(coalesce(ADJUST_COMMISSION,0)/10000 as decimal),2) as ADJUST_COMMISSION, \
round(cast(coalesce(ALL_COMMISSION,0)/10000 as decimal),2) as ALL_COMMISSION, \
round(cast(coalesce(ALL_COMMISSION_ADJUST,0)/10000 as decimal),2) as ALL_COMMISSION_ADJUST, \
round(cast(coalesce(ALL_STOCK_COMMISSION,0)/10000 as decimal),2) as ALL_STOCK_COMMISSION, \
round(cast(coalesce(ALL_FUND_COMMISSION,0)/10000 as decimal),2) as ALL_FUND_COMMISSION, \
round(cast(coalesce(ALL_MARGIN_STOCK_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_STOCK_COMMISSION, \
round(cast(coalesce(ALL_MARGIN_FUND_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_FUND_COMMISSION, \
round(cast(coalesce(ALL_MARGIN_BOND_COMMISSION,0)/10000 as decimal),2) as ALL_MARGIN_BOND_COMMISSION, \
round(cast(coalesce(ALL_ADJUST_COMMISSION,0)/10000 as decimal),2) as ALL_ADJUST_COMMISSION, \
coalesce(OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
coalesce(ALL_OPEN_CUST_NUM,0) as ALL_OPEN_CUST_NUM, \
round(cast(coalesce(MARKET_RATE*100,0) as decimal),4) as MARKET_RATE, \
round(cast(coalesce(ALL_MARKET_RATE*100,0) as decimal),4) as ALL_MARKET_RATE, \
round(cast(coalesce(CHECK_MARKET_RATE_FD*100,0) as decimal),2) as CHECK_MARKET_RATE_FD, \
round(cast(coalesce(AVG_CUST_RIGHT,0)/10000 as decimal),2) as AVG_CUST_RIGHT, \
round(cast(coalesce(AVG_FUND_BALANCE,0)/10000 as decimal),2) as AVG_FUND_BALANCE, \
round(cast(coalesce(AVG_STOCK_BALANCE,0)/10000 as decimal),2) as AVG_STOCK_BALANCE, \
round(cast(coalesce(AVG_MULTI_FINANCIAL_BALANCE,0)/10000 as decimal),2) as AVG_MULTI_FINANCIAL_BALANCE, \
round(cast(coalesce(AVG_MARGIN_DEBIT,0)/10000 as decimal),2) as AVG_MARGIN_DEBIT, \
round(cast(coalesce(AVG_PLEDGE_DEBIT,0)/10000 as decimal),2) as AVG_PLEDGE_DEBIT, \
round(cast(coalesce(END_CUST_RIGHT,0)/10000 as decimal),2) as END_CUST_RIGHT, \
round(cast(coalesce(END_FUND_BALANCE,0)/10000 as decimal),2) as END_FUND_BALANCE, \
round(cast(coalesce(END_STOCK_BALANCE,0)/10000 as decimal),2) as END_STOCK_BALANCE, \
round(cast(coalesce(END_MULTI_FINANCIAL_BALANCE,0)/10000 as decimal),2) as END_MULTI_FINANCIAL_BALANCE, \
round(cast(coalesce(END_MARGIN_DEBIT,0)/10000 as decimal),2) as END_MARGIN_DEBIT, \
round(cast(coalesce(END_PLEDGE_DEBIT,0)/10000 as decimal),2) as END_PLEDGE_DEBIT, \
round(cast(coalesce(CUST_RIGHT,0)/10000 as decimal),2) as CUST_RIGHT, \
round(cast(coalesce(FUND_BALANCE,0)/10000 as decimal),2) as FUND_BALANCE, \
round(cast(coalesce(STOCK_BALANCE,0)/10000 as decimal),2) as STOCK_BALANCE, \
round(cast(coalesce(MULTI_FINANCIAL_BALANCE,0)/10000 as decimal),2) as MULTI_FINANCIAL_BALANCE, \
round(cast(coalesce(MARGIN_DEBIT,0)/10000 as decimal),2) as MARGIN_DEBIT, \
round(cast(coalesce(PLEDGE_DEBIT,0)/10000 as decimal),2) as PLEDGE_DEBIT \
from REPORT.TRADE_STATISTICS_MONTHLY a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = B.ID \
where INIT_MONTH = {0} \
{1}
  
# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886805-\u5206\u652F\u673A\u6784\u4EA4\u6613\u7EDF\u8BA1\u5E74\u62A5\u8868
# \u53C2\u6570endDate branchId
sel.report.data.report.05.by.filter = \
select  b.NAME as BRANCH_NAME, \
round(cast(coalesce(TRADE_AMOUNT,0)/10000 as decimal),2) as TRADE_AMOUNT, \
round(cast(coalesce(STOCK_AMOUNT,0)/10000 as decimal),2) as STOCK_AMOUNT, \
round(cast(coalesce(PLEDGE_AMOUNT,0)/10000 as decimal),2) as PLEDGE_AMOUNT, \
round(cast(coalesce(FUND_AMOUNT,0)/10000 as decimal),2) as FUND_AMOUNT, \
round(cast(coalesce(MARGIN_STOCK_AMOUNT,0)/10000 as decimal),2) as MARGIN_STOCK_AMOUNT, \
round(cast(coalesce(MARGIN_FUND_AMOUNT,0)/10000 as decimal),2) as MARGIN_FUND_AMOUNT, \
round(cast(coalesce(MARGIN_BOND_AMOUNT,0)/10000 as decimal),2) as MARGIN_BOND_AMOUNT, \
round(cast(coalesce(CHECK_TRADE_AMOUNT_FD,0)/10000 as decimal),2) as CHECK_TRADE_AMOUNT_FD, \
round(cast(coalesce(CHECK_STOCK_AMOUNT,0)/10000 as decimal),2) as CHECK_STOCK_AMOUNT, \
round(cast(coalesce(CHECK_PLEDGE_AMOUNT,0)/10000 as decimal),2) as CHECK_PLEDGE_AMOUNT, \
round(cast(coalesce(CHECK_FUND_AMOUNT,0)/10000 as decimal),2) as CHECK_FUND_AMOUNT, \
round(cast(coalesce(CHECK_MARGIN_STOCK_AMOUNT,0)/10000 as decimal),2) as CHECK_MARGIN_STOCK_AMOUNT, \
round(cast(coalesce(CHECK_MARGIN_FUND_AMOUNT,0)/10000 as decimal),2) as CHECK_MARGIN_FUND_AMOUNT, \
round(cast(coalesce(CHECK_MARGIN_BOND_AMOUNT,0)/10000 as decimal),2) as CHECK_MARGIN_BOND_AMOUNT, \
round(cast(coalesce(FUND_DIVISION,0)/10000 as decimal),2) as FUND_DIVISION, \
round(cast(coalesce(MARKET_RATE*100,0) as decimal),4) as MARKET_RATE, \
round(cast(coalesce(CHECK_MARKET_RATE_FD*100,0) as decimal),4) as CHECK_MARKET_RATE_FD, \
round(cast(coalesce(COMMISSION,0)/10000 as decimal),2) as COMMISSION,  \
round(cast(coalesce(COMMISSION_ADJUST,0)/10000 as decimal),2) as COMMISSION_ADJUST, \
round(cast(coalesce(STOCK_COMMISSION,0)/10000 as decimal),2) as STOCK_COMMISSION, \
round(cast(coalesce(FUND_COMMISSION,0)/10000 as decimal),2) as FUND_COMMISSION, \
round(cast(coalesce(MARGIN_STOCK_COMMISSION,0)/10000 as decimal),2) as MARGIN_STOCK_COMMISSION, \
round(cast(coalesce(MARGIN_FUND_COMMISSION,0)/10000 as decimal),2) as MARGIN_FUND_COMMISSION, \
round(cast(coalesce(MARGIN_BOND_COMMISSION,0)/10000 as decimal),2) as MARGIN_BOND_COMMISSION, \
round(cast(coalesce(ADJUST_COMMISSION,0)/10000 as decimal),2) as ADJUST_COMMISSION, \
coalesce(OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
round(cast(coalesce(COMMISSION_RATE*1000,0) as decimal),4) as COMMISSION_RATE, \
round(cast(coalesce(CUST_RIGHT,0)/10000 as decimal),2) as CUST_RIGHT, \
round(cast(coalesce(FUND_BALANCE,0)/10000 as decimal),2) as FUND_BALANCE, \
round(cast(coalesce(STOCK_BALANCE,0)/10000 as decimal),2) as STOCK_BALANCE, \
round(cast(coalesce(MULTI_FINANCIAL_BALANCE,0)/10000 as decimal),2) as MULTI_FINANCIAL_BALANCE, \
round(cast(coalesce(MARGIN_DEBIT,0)/10000 as decimal),2) as MARGIN_DEBIT, \
round(cast(coalesce(PLEDGE_DEBIT,0)/10000 as decimal),2) as PLEDGE_DEBIT, \
round(cast(coalesce(AVG_CUST_RIGHT,0)/10000 as decimal),2) as AVG_CUST_RIGHT, \
round(cast(coalesce(AVG_FUND_BALANCE,0)/10000 as decimal),2) as AVG_FUND_BALANCE, \
round(cast(coalesce(AVG_STOCK_BALANCE,0)/10000 as decimal),2) as AVG_STOCK_BALANCE, \
round(cast(coalesce(AVG_MULTI_FINANCIAL_BALANCE,0)/10000 as decimal),2) as AVG_MULTI_FINANCIAL_BALANCE, \
round(cast(coalesce(AVG_MARGIN_DEBIT,0)/10000 as decimal),2) as AVG_MARGIN_DEBIT, \
round(cast(coalesce(AVG_PLEDGE_DEBIT,0)/10000 as decimal),2) as AVG_PLEDGE_DEBIT  \
from REPORT.TRADE_STATISTICS_YEARLY a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE=b.ID \
where INIT_YEAR = {0} {1}

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886806-\u5206\u652F\u673A\u6784\u8D44\u4EA7\u53D8\u52A8\u539F\u59CB\u8868
# \u53C2\u6570startDate endDate branchId
sel.report.data.report.06.by.filter = \
select  INIT_DATE, \
b.NAME as BRANCH_NAME, \
round(cast(coalesce(SECU_BALANCE,0)/10000 as decimal),2) as SECU_BALANCE, \
round(cast(coalesce(AVIALABLE_BALANCE,0)/10000 as decimal),2) as AVIALABLE_BALANCE, \
round(cast(coalesce(ASSET,0)/10000 as decimal),2) as ASSET, \
round(cast(coalesce(ASSURE_ASSET,0)/10000 as decimal),2) as ASSURE_ASSET, \
round(cast(coalesce(MARGIN_DEBIT,0)/10000 as decimal),2) as MARGIN_DEBIT, \
round(cast(coalesce(IN_SECU_BALANCE,0)/10000 as decimal),2) as IN_SECU_BALANCE, \
round(cast(coalesce(OUT_SECU_BALANCE,0)/10000 as decimal),2) as OUT_SECU_BALANCE, \
round(cast(coalesce(IN_CAPITAL_BALANCE,0)/10000 as decimal),2) as IN_CAPITAL_BALANCE, \
round(cast(coalesce(OUT_CAPITAL_BALANCE,0)/10000 as decimal),2) as OUT_CAPITAL_BALANCE, \
round(cast(coalesce(YESTERDAY_ASSET,0)/10000 as decimal),2) as YESTERDAY_ASSET, \
round(cast(coalesce(ASSET_CHANGE_RATE*100,0) as decimal),2) as ASSET_CHANGE_RATE, \
round(cast(coalesce(THISYEAR_AVG_SECU_BALANCE,0)/10000 as decimal),2) as THISYEAR_AVG_SECU_BALANCE, \
round(cast(coalesce(THISYEAR_AVG_CAPITAL_BALANCE,0)/10000 as decimal),2) as THISYEAR_AVG_CAPITAL_BALANCE, \
round(cast(coalesce(THISYEAR_AVG_ASSET,0)/10000 as decimal),2) as THISYEAR_AVG_ASSET, \
round(cast(coalesce(THISYEAR_AVG_ASSURE_ASSET,0)/10000 as decimal),2) as THISYEAR_AVG_ASSURE_ASSET, \
round(cast(coalesce(THISYEAR_AVG_MARGIN_DEBIT,0)/10000 as decimal),2) as THISYEAR_AVG_MARGIN_DEBIT, \
round(cast(coalesce(ALL_IN_SECU_BALANCE,0)/10000 as decimal),2) as ALL_IN_SECU_BALANCE, \
round(cast(coalesce(ALL_OUT_SECU_BALANCE,0)/10000 as decimal),2) as ALL_OUT_SECU_BALANCE, \
round(cast(coalesce(ALL_IN_CAPITAL_BALANCE,0)/10000 as decimal),2) as ALL_IN_CAPITAL_BALANCE, \
round(cast(coalesce(ALL_OUT_CAPITAL_BALANCE,0)/10000 as decimal),2) as ALL_OUT_CAPITAL_BALANCE, \
round(cast(coalesce(LASTYEAR_AVG_ASSET,0)/10000 as decimal),2) as LASTYEAR_AVG_ASSET, \
round(cast(coalesce(ASSET_CHANGE_RATE_OVER_YEAR*100,0) as decimal),2) as ASSET_CHANGE_RATE_OVER_YEAR, \
round(cast(coalesce(ASSURE_CASH,0)/10000 as decimal),2) as ASSURE_CASH, \
round(cast(coalesce(ASSURE_SECU_BALANCE,0)/10000 as decimal),2) as ASSURE_SECU_BALANCE, \
round(cast(coalesce(MULTI_FINANCIAL_BALANCE,0)/10000 as decimal),2) as MULTI_FINANCIAL_BALANCE \
from REPORT.ASSET_CHANGE_DETAIL_DAILY a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where INIT_DATE between {0} and {1} \
{2} \
order by INIT_DATE,BRANCH_CODE

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886807-\u5206\u652F\u673A\u6784\u8D44\u4EA7\u53D8\u52A8\u65E5\u62A5
# \u53C2\u6570endDate branchId
sel.report.data.report.07.by.filter = \
select  b.NAME as BRANCH_NAME, \
round(cast(coalesce(SECU_BALANCE,0)/10000 as decimal),2) as SECU_BALANCE, \
round(cast(coalesce(STOCK_BALANCE,0)/10000 as decimal),2) as STOCK_BALANCE, \
round(cast(coalesce(BONUS_IN,0)/10000 as decimal),2) as BONUS_IN, \
round(cast(coalesce(HK_BALANCE,0)/10000 as decimal),2) as HK_BALANCE, \
round(cast(coalesce(SH_A_BALANCE,0)/10000 as decimal),2) as SH_A_BALANCE, \
round(cast(coalesce(SH_B_BALANCE,0)/10000 as decimal),2) as SH_B_BALANCE, \
round(cast(coalesce(SZ_A_BALANCE,0)/10000 as decimal),2) as SZ_A_BALANCE, \
round(cast(coalesce(SZ_B_BALANCE,0)/10000 as decimal),2) as SZ_B_BALANCE, \
round(cast(coalesce(STB_BALANCE,0)/10000 as decimal),2) as STB_BALANCE, \
round(cast(coalesce(GEM_BALANCE,0)/10000 as decimal),2) as GEM_BALANCE, \
round(cast(coalesce(FUND_BALANCE,0)/10000 as decimal),2) as FUND_BALANCE, \
round(cast(coalesce(SH_FUND_BALANCE,0)/10000 as decimal),2) as SH_FUND_BALANCE, \
round(cast(coalesce(SZ_FUND_BALANCE,0)/10000 as decimal),2) as SZ_FUND_BALANCE, \
round(cast(coalesce(BOND_BALANCE,0)/10000 as decimal),2) as BOND_BALANCE, \
round(cast(coalesce(ADVISABLE_BALANCE,0)/10000 as decimal),2) as ADVISABLE_BALANCE, \
round(cast(coalesce(AVIALABLE_BALANCE,0)/10000 as decimal),2) as AVIALABLE_BALANCE, \
round(cast(coalesce(ASSURE_NET_ASSET,0)/10000 as decimal),2) as ASSURE_NET_ASSET, \
round(cast(coalesce(ASSURE_ASSET,0)/10000 as decimal),2) as ASSURE_ASSET, \
round(cast(coalesce(ASSURE_CAPITAL_BALANCE,0)/10000 as decimal),2) as ASSURE_CAPITAL_BALANCE, \
round(cast(coalesce(ASSURE_SECU_BALANCE,0)/10000 as decimal),2) as ASSURE_SECU_BALANCE, \
round(cast(coalesce(MARGIN_DEBIT,0)/10000 as decimal),2) as MARGIN_DEBIT, \
round(cast(coalesce(ASSET,0)/10000 as decimal),2) as ASSET, \
round(cast(coalesce(CAPITAL_BALANCE,0)/10000 as decimal),2) as CAPITAL_BALANCE, \
round(cast(coalesce(PLEDGE_DEBIT,0)/10000 as decimal),2) as PLEDGE_DEBIT, \
round(cast(coalesce(MULTI_FINANCIAL_BALANCE,0)/10000 as decimal),2) as MULTI_FINANCIAL_BALANCE, \
round(cast(coalesce(IN_SECU_BALANCE,0)/10000 as decimal),2) as IN_SECU_BALANCE, \
round(cast(coalesce(IN_LIMIT_SALE_BALANCE,0)/10000 as decimal),2) as IN_LIMIT_SALE_BALANCE, \
round(cast(coalesce(OUT_SECU_BALANCE,0)/10000 as decimal),2) as OUT_SECU_BALANCE, \
round(cast(coalesce(OUT_LIMIT_SALE_BALANCE,0)/10000 as decimal),2) as OUT_LIMIT_SALE_BALANCE, \
round(cast(coalesce(IN_DEPOSIT_BALANCE,0)/10000 as decimal),2) as IN_DEPOSIT_BALANCE, \
round(cast(coalesce(OUT_DEPOSIT_BALANCE,0)/10000 as decimal),2) as OUT_DEPOSIT_BALANCE, \
round(cast(coalesce(ASSET_CHANGE_RATE,0)*100 as decimal),2) as ASSET_CHANGE_RATE  \
from REPORT.ASSET_CHANGE_DAILY a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where INIT_DATE = {0} \
{1}

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886808-\u5206\u652F\u673A\u6784\u8D44\u4EA7\u53D8\u52A8\u6708\u62A5
# \u53C2\u6570endDate branchId
sel.report.data.report.08.by.filter = \
select  b.NAME as BRANCH_NAME, \
round(cast(coalesce(SECU_BALANCE,0)/10000 as decimal),2) as SECU_BALANCE, \
round(cast(coalesce(AVG_DEPOSIT_BALANCE,0)/10000 as decimal),2) as AVG_DEPOSIT_BALANCE, \
round(cast(coalesce(AVG_ASSURE_ASSET,0)/10000 as decimal),2) as AVG_ASSURE_ASSET, \
round(cast(coalesce(AVG_ASSET,0)/10000 as decimal),2) as AVG_ASSET, \
round(cast(coalesce(IN_SECU_BALANCE,0)/10000 as decimal),2) as IN_SECU_BALANCE, \
round(cast(coalesce(OUT_SECU_BALANCE,0)/10000 as decimal),2) as OUT_SECU_BALANCE, \
round(cast(coalesce(IN_CAPITAL_BALANCE,0)/10000 as decimal),2) as IN_CAPITAL_BALANCE, \
round(cast(coalesce(OUT_CAPITAL_BALANCE,0)/10000 as decimal),2) as OUT_CAPITAL_BALANCE, \
round(cast(coalesce(ASSET_CHANGE_RATE_OVER_MONTH*100,0) as decimal),2) as ASSET_CHANGE_RATE_OVER_MONTH, \
round(cast(coalesce(ALL_AVG_ASSET,0)/10000 as decimal),2) as ALL_AVG_ASSET, \
round(cast(coalesce(ALL_IN_BALANCE,0)/10000 as decimal),2) as ALL_IN_BALANCE, \
round(cast(coalesce(ALL_OUT_BALANCE,0)/10000 as decimal),2) as ALL_OUT_BALANCE, \
round(cast(coalesce(ALL_STORE_IN_CAPITAL_BALANCE,0)/10000 as decimal),2) as ALL_STORE_IN_CAPITAL_BALANCE, \
round(cast(coalesce(ALL_TAKE_OUT_CAPITAL_BALANCE,0)/10000 as decimal),2) as ALL_TAKE_OUT_CAPITAL_BALANCE, \
round(cast(coalesce(ASSET_CHANGE_RATE_OVER_YEAR*100,0) as decimal),2) as ASSET_CHANGE_RATE_OVER_YEAR \
from REPORT.ASSET_CHANGE_MONTHLY a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where INIT_MONTH = {0} \
{1}

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886809-\u8425\u4E1A\u90E8\u5408\u4F5C\u5F00\u53D1\u7EDF\u8BA1\u8868
# \u53C2\u6570branchId coopBranchId otherParams fromDate toDate
sel.report.data.report.09.by.filter = \
with \
cust_main as (select a.CUST_NO,a.EFFECT_DATE,a.CUST_STATUS \
from (select distinct CUST_NO,OPEN_DATE,EFFECT_DATE,CUST_STATUS \
from REPORT.COOP_CLIENT \
where BRANCH_MARK = 0 and FARE_RATIO <> 1 {0}) a \
inner join (select distinct CUST_NO,OPEN_DATE,EFFECT_DATE,CUST_STATUS \
from REPORT.COOP_CLIENT \
where BRANCH_MARK = 1 and FARE_RATIO > 0 {1}) b on a.CUST_NO=b.CUST_NO and a.EFFECT_DATE=b.EFFECT_DATE and a.CUST_STATUS=b.CUST_STATUS \
{2}), \
period_main as ( \
select  BRANCH_CODE as BRANCH_NO, \
CUST_NO, \
CUST_NAME, \
OPEN_DATE, \
(case when BRANCH_MARK = 0 then ''\u5F00\u6237'' else ''\u5408\u4F5C'' end) RELATIONSHIP, \
sum(STOCK_AMOUNT*AMOUNT_RATIO) as STOCK_AMOUNT, \
sum(FUND_AMOUNT*AMOUNT_RATIO) as FUND_AMOUNT, \
sum(SF_AMOUNT*AMOUNT_RATIO) as SF_AMOUNT, \
sum(ASSURE_AMOUNT*AMOUNT_RATIO) as ASSURE_AMOUNT, \
sum(TOTAL_AMOUNT*AMOUNT_RATIO) as TOTAL_AMOUNT, \
sum(COMMISSION*FARE_RATIO) as COMMISSION, \
sum(NET_COMMISSION*FARE_RATIO) as NET_COMMISSION, \
sum(ASSURE_COMMISSION*FARE_RATIO) as ASSURE_COMMISSION, \
sum(ASSURE_NET_COMMISSION*FARE_RATIO) as ASSURE_NET_COMMISSION, \
sum(CREDIT_AMOUNT*AMOUNT_RATIO) as CREDIT_AMOUNT, \
sum(CREDIT_COMMISSION*FARE_RATIO) as CREDIT_COMMISSION, \
sum(CREDIT_NET_COMMISSION*FARE_RATIO) as CREDIT_NET_COMMISSION, \
sum(TOTAL_COMMISSION*FARE_RATIO) as TOTAL_COMMISSION, \
sum(TOTAL_NET_COMMISSION*FARE_RATIO) as TOTAL_NET_COMMISSION, \
sum(AVIALABLE_BALANCE*ASSET_RATIO)/count(INIT_DATE) as AVIALABLE_BALANCE_AVG, \
sum(SECURITY_AMOUNT*ASSET_RATIO)/count(INIT_DATE) as SECURITY_AMOUNT_AVG, \
sum(ASSET*ASSET_RATIO)/count(INIT_DATE) as ASSET_AVG, \
sum(ASSURE_CASH*ASSET_RATIO)/count(INIT_DATE) as ASSURE_CASH_AVG, \
sum(ASSURE_STOCK_AMOUNT*ASSET_RATIO)/count(INIT_DATE) as ASSURE_STOCK_AMOUNT_AVG, \
sum(DEBIT*ASSET_RATIO)/count(INIT_DATE) as DEBIT_AVG, \
sum(B_STOCK_AMOUNT*AMOUNT_RATIO) as B_STOCK_AMOUNT, \
sum(B_STOCK_COMMISSION*FARE_RATIO) as B_STOCK_COMMISSION, \
sum(B_STOCK_NET_COMMISSION*FARE_RATIO) as B_STOCK_NET_COMMISSION, \
sum(H_STOCK_AMOUNT*AMOUNT_RATIO) as H_STOCK_AMOUNT, \
sum(H_STOCK_COMMISSION*FARE_RATIO) as H_STOCK_COMMISSION, \
sum(H_STOCK_NET_COMMISSION*FARE_RATIO) as H_STOCK_NET_COMMISSION, \
sum(STOCK_COMMISSION*FARE_RATIO) as STOCK_COMMISSION, \
sum(SF_COMMISSION*FARE_RATIO) as SF_COMMISSION, \
sum(STOCK_COMMISSION_WITH_MARGIN*FARE_RATIO) as STOCK_COMMISSION_WITH_MARGIN, \
sum(STOCK_AMOUNT_WITH_MARGIN*AMOUNT_RATIO) as STOCK_AMOUNT_WITH_MARGIN, \
sum(SF_COMMISSION_WITH_MARGIN*FARE_RATIO) as SF_COMMISSION_WITH_MARGIN, \
sum(SF_AMOUNT_WITH_MARGIN*AMOUNT_RATIO) as SF_AMOUNT_WITH_MARGIN \
from REPORT.COOP_STATISTICS \
where INIT_DATE between {3} and {4} \
group by BRANCH_CODE,CUST_NO,CUST_NAME,OPEN_DATE,(case when BRANCH_MARK = 0 then ''\u5F00\u6237'' else ''\u5408\u4F5C'' end)), \
close_day as ( \
select  BRANCH_CODE as BRANCH_NO, \
CUST_NO, \
CUST_NAME, \
OPEN_DATE, \
(case when BRANCH_MARK = 0 then ''\u5F00\u6237'' else ''\u5408\u4F5C'' end) RELATIONSHIP, \
FARE_RATIO*100 as FARE_RATIO, \
ASSET_RATIO*100 as ASSET_RATIO, \
AMOUNT_RATIO*100 as AMOUNT_RATIO, \
AVIALABLE_BALANCE*ASSET_RATIO as AVIALABLE_BALANCE_CLOSE, \
SECURITY_AMOUNT*ASSET_RATIO as SECURITY_AMOUNT_CLOSE, \
ASSET*ASSET_RATIO as ASSET_CLOSE, \
ASSURE_CASH*ASSET_RATIO as ASSURE_CASH_CLOSE, \
ASSURE_STOCK_AMOUNT*ASSET_RATIO as ASSURE_STOCK_AMOUNT_CLOSE, \
DEBIT*ASSET_RATIO as DEBIT_CLOSE, \
ASSURE*ASSET_RATIO as ASSURE_CLOSE \
from REPORT.COOP_STATISTICS \
where INIT_DATE = {4}) \
select  c.NAME as BRANCH_NAME, \
b.CUST_NO, \
b.CUST_NAME, \
b.OPEN_DATE, \
b.RELATIONSHIP, \
round(cast(coalesce(a.FARE_RATIO,0) as decimal),2) as FARE_RATIO, \
round(cast(coalesce(a.ASSET_RATIO,0) as decimal),2) as ASSET_RATIO, \
round(cast(coalesce(a.AMOUNT_RATIO,0) as decimal),2) as AMOUNT_RATIO, \
round(cast(coalesce(b.STOCK_AMOUNT,0) as decimal),2) as STOCK_AMOUNT, \
round(cast(coalesce(b.FUND_AMOUNT,0) as decimal),2) as FUND_AMOUNT, \
round(cast(coalesce(b.SF_AMOUNT,0) as decimal),2) as SF_AMOUNT, \
round(cast(coalesce(b.ASSURE_AMOUNT,0) as decimal),2) as ASSURE_AMOUNT, \
round(cast(coalesce(b.TOTAL_AMOUNT,0) as decimal),2) as TOTAL_AMOUNT, \
round(cast(coalesce(b.COMMISSION,0) as decimal),2) as COMMISSION, \
round(cast(coalesce(b.NET_COMMISSION,0) as decimal),2) as NET_COMMISSION, \
round(cast(coalesce(b.ASSURE_COMMISSION,0) as decimal),2) as ASSURE_COMMISSION, \
round(cast(coalesce(b.ASSURE_NET_COMMISSION,0) as decimal),2) as ASSURE_NET_COMMISSION, \
round(cast(coalesce(b.CREDIT_AMOUNT,0) as decimal),2) as CREDIT_AMOUNT, \
round(cast(coalesce(b.CREDIT_COMMISSION,0) as decimal),2) as CREDIT_COMMISSION, \
round(cast(coalesce(b.CREDIT_NET_COMMISSION,0) as decimal),2) as CREDIT_NET_COMMISSION, \
round(cast(coalesce(b.TOTAL_COMMISSION,0) as decimal),2) as TOTAL_COMMISSION, \
round(cast(coalesce(b.TOTAL_NET_COMMISSION,0) as decimal),2) as TOTAL_NET_COMMISSION, \
round(cast(coalesce(b.AVIALABLE_BALANCE_AVG,0) as decimal),2) as AVIALABLE_BALANCE_AVG, \
round(cast(coalesce(b.SECURITY_AMOUNT_AVG,0) as decimal),2) as SECURITY_AMOUNT_AVG, \
round(cast(coalesce(b.ASSET_AVG,0) as decimal),2) as ASSET_AVG, \
round(cast(coalesce(b.ASSURE_CASH_AVG,0) as decimal),2) as ASSURE_CASH_AVG, \
round(cast(coalesce(b.ASSURE_STOCK_AMOUNT_AVG,0) as decimal),2) as ASSURE_STOCK_AMOUNT_AVG, \
round(cast(coalesce(b.DEBIT_AVG,0) as decimal),2) as DEBIT_AVG, \
round(cast(coalesce(a.AVIALABLE_BALANCE_CLOSE,0) as decimal),2) as AVIALABLE_BALANCE_CLOSE, \
round(cast(coalesce(a.SECURITY_AMOUNT_CLOSE,0) as decimal),2) as SECURITY_AMOUNT_CLOSE, \
round(cast(coalesce(a.ASSET_CLOSE,0) as decimal),2) as ASSET_CLOSE, \
round(cast(coalesce(a.ASSURE_CASH_CLOSE,0) as decimal),2) as ASSURE_CASH_CLOSE, \
round(cast(coalesce(a.ASSURE_STOCK_AMOUNT_CLOSE,0) as decimal),2) as ASSURE_STOCK_AMOUNT_CLOSE, \
round(cast(coalesce(a.DEBIT_CLOSE,0) as decimal),2) as DEBIT_CLOSE, \
round(cast(coalesce(a.ASSURE_CLOSE,0) as decimal),2) as ASSURE_CLOSE, \
round(cast(coalesce(b.B_STOCK_AMOUNT,0) as decimal),2) as B_STOCK_AMOUNT, \
round(cast(coalesce(b.B_STOCK_COMMISSION,0) as decimal),2) as B_STOCK_COMMISSION, \
round(cast(coalesce(b.B_STOCK_NET_COMMISSION,0) as decimal),2) as B_STOCK_NET_COMMISSION, \
round(cast(coalesce(b.H_STOCK_AMOUNT,0) as decimal),2) as H_STOCK_AMOUNT, \
round(cast(coalesce(b.H_STOCK_COMMISSION,0) as decimal),2) as H_STOCK_COMMISSION, \
round(cast(coalesce(b.H_STOCK_NET_COMMISSION,0) as decimal),2) as H_STOCK_NET_COMMISSION, \
round(cast(coalesce(b.STOCK_COMMISSION,0) as decimal),2) as STOCK_COMMISSION, \
round(cast(coalesce(b.SF_COMMISSION,0) as decimal),2) as SF_COMMISSION, \
round(cast(coalesce(b.STOCK_COMMISSION_WITH_MARGIN,0) as decimal),2) as STOCK_COMMISSION_WITH_MARGIN, \
round(cast(coalesce(b.STOCK_AMOUNT_WITH_MARGIN,0) as decimal),2) as STOCK_AMOUNT_WITH_MARGIN, \
round(cast(coalesce(b.SF_COMMISSION_WITH_MARGIN,0) as decimal),2) as SF_COMMISSION_WITH_MARGIN, \
round(cast(coalesce(b.SF_AMOUNT_WITH_MARGIN,0) as decimal),2) as SF_AMOUNT_WITH_MARGIN  \
from cust_main \
inner join period_main b on cust_main.CUST_NO = b.CUST_NO \
left join close_day a on cust_main.CUST_NO = a.CUST_NO and a.BRANCH_NO=b.BRANCH_NO \
left join UF20_EDW.DIM_BRANCH c on b.BRANCH_NO = c.ID

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886810-\u5408\u4F5C\u4E1A\u52A1\u7EDF\u8BA1\u62A5\u8868
# \u53C2\u6570branchId coop_branchId otherParams
sel.report.data.report.10.by.filter = \
with \
cust_main as (select a.CUST_NO,a.EFFECT_DATE,a.CUST_STATUS \
from (select distinct CUST_NO,OPEN_DATE,EFFECT_DATE,CUST_STATUS \
from REPORT.COOP_CLIENT \
where BRANCH_MARK = 0 and FARE_RATIO <> 1 {0}) a \
inner join (select distinct CUST_NO,OPEN_DATE,EFFECT_DATE,CUST_STATUS \
from REPORT.COOP_CLIENT \
where BRANCH_MARK = 1 and FARE_RATIO > 0 {1}) b on a.CUST_NO=b.CUST_NO  and a.EFFECT_DATE=b.EFFECT_DATE and a.CUST_STATUS=b.CUST_STATUS \
{2}), \
coop_list as (select CUST_NO, \
BRANCH_CODE, \
EFFECT_DATE, \
CUST_STATUS, \
FARE_RATIO as FARE_RATIO, \
ASSET_RATIO as ASSET_RATIO, \
AMOUNT_RATIO as AMOUNT_RATIO \
from REPORT.COOP_CLIENT \
where BRANCH_MARK = 1) \
select concat(concat(a.CUST_NO,'' | ''),a.CUST_NAME) as CUSTOMER, \
b.NAME as BRANCH_NAME, \
cust_main.EFFECT_DATE, \
(case when cust_main.CUST_STATUS = 0 then ''\u65B0\u589E'' else ''\u53D8\u66F4'' end) as CUST_STATUS, \
round(cast(coalesce(a.FARE_RATIO,0)*100 as decimal),2) as FARE_RATIO, \
round(cast(coalesce(a.ASSET_RATIO,0)*100 as decimal),2) as ASSET_RATIO, \
round(cast(coalesce(a.AMOUNT_RATIO,0)*100 as decimal),2) as AMOUNT_RATIO, \
round(cast(coalesce((1-a.FARE_RATIO),0)*100 as decimal),2) as COOP_FARE_RATIO_SUM, \
round(cast(coalesce((1-a.ASSET_RATIO),0)*100 as decimal),2) as COOP_ASSET_RATIO_SUM, \
round(cast(coalesce((1-a.AMOUNT_RATIO),0)*100 as decimal),2) as COOP_AMOUNT_RATIO_SUM, \
coalesce(b1.NAME,'''') as COOP_BRANCH_NAME, \
''\u5408\u4F5C'' as RELATION, \
round(cast(coalesce(coop_list.FARE_RATIO,0)*100 as decimal),2) as COOP_FARE_RATIO, \
round(cast(coalesce(coop_list.ASSET_RATIO,0)*100 as decimal),2) as COOP_ASSET_RATIO, \
round(cast(coalesce(coop_list.AMOUNT_RATIO,0)*100 as decimal),2) as COOP_AMOUNT_RATIO \
from cust_main \
left join coop_list on cust_main.CUST_NO=coop_list.CUST_NO \
and cust_main.EFFECT_DATE=coop_list.EFFECT_DATE \
and cust_main.CUST_STATUS=coop_list.CUST_STATUS \
left join REPORT.COOP_CLIENT a on cust_main.CUST_NO=a.CUST_NO \
and cust_main.EFFECT_DATE=a.EFFECT_DATE \
and cust_main.CUST_STATUS=a.CUST_STATUS \
left join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE=b.ID \
left join UF20_EDW.DIM_BRANCH b1 on coop_list.BRANCH_CODE=b1.ID \
where a.BRANCH_MARK = 0

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886811-\u9650\u552E\u975E\u6D41\u901A\u80A1\u4EFD\u53D8\u52A8\u6D41\u6C34
# \u53C2\u6570fromDate toDate branchId exchangeType otherParams
sel.report.data.report.11.by.filter = \
select a.BRANCH_CODE as BRANCH_NO, \
b.NAME as BRANCH_NAME, \
a.CUST_NO, \
a.STOCK_ACCOUNT, \
OPEN_DATE,a.OPEN_DATE, \
a.CUST_NAME, \
a.STOCK_CODE, \
c.STOCK_NAME, \
coalesce(sum(CHANGE_STOCK_NUM),0) as CHANGE_STOCK_NUM, \
round(cast(sum(CHANGE_STOCK_AMOUNT) as decimal),2) as CHANGE_STOCK_AMOUNT \
from REPORT.RESTRICTED_STATISTICS a \
left join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE=b.ID \
left join UF20.STKCODE c on a.STOCK_CODE=c.STOCK_CODE and a.EXCHANGE_TYPE=c.EXCHANGE_TYPE \
where c.STOCK_TYPE in (''0'',''c'',''z'',''h'') \
and a.INIT_DATE BETWEEN {0} and {1} \
{2} \
and a.EXCHANGE_TYPE in ({3}) \
{4} \
group by a.BRANCH_CODE,b.NAME,a.CUST_NO,a.STOCK_ACCOUNT,a.OPEN_DATE,a.CUST_NAME,a.STOCK_CODE,c.STOCK_NAME

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886812-\u9650\u552E\u975E\u6D41\u901A\u80A1\u4EFD\u6301\u4ED3
# \u53C2\u6570fromDate toDate branchId exchangeType otherParams
sel.report.data.report.12.by.filter = \
select  a.BRANCH_CODE as BRANCH_NO, \
b.NAME as BRANCH_NAME, \
a.CUST_NO, \
a.STOCK_ACCOUNT, \
a.OPEN_DATE, \
a.CUST_NAME, \
a.STOCK_CODE, \
c.STOCK_NAME, \
round(cast(coalesce(a.STOCK_NUM,0) as decimal),0) as STOCK_NUM, \
round(cast(coalesce(STOCK_AMOUNT,0) as decimal),2) as STOCK_AMOUNT,\
round(cast(coalesce(a1.AVG_STOCK_AMOUNT,0) as decimal),2) as AVG_STOCK_AMOUNT \
from REPORT.RESTRICTED_STATISTICS a \
left join (select CUST_NO, \
STOCK_CODE, \
avg(STOCK_AMOUNT) as AVG_STOCK_AMOUNT \
from REPORT.RESTRICTED_STATISTICS \
where INIT_DATE between {0} and {1} \
group by CUST_NO,STOCK_CODE) a1 on a.CUST_NO=a1.CUST_NO and a.STOCK_CODE=a1.STOCK_CODE \
left join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE=b.ID \
left join UF20.STKCODE c on a.STOCK_CODE=c.STOCK_CODE and a.EXCHANGE_TYPE=c.EXCHANGE_TYPE \
where c.STOCK_TYPE in (''0'',''c'',''z'',''h'') \
and a.INIT_DATE = {1} \
{2} \
and a.EXCHANGE_TYPE in ({3}) \
{4}

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886813-\u65B0\u5F00\u6237\u60C5\u51B5\u7EDF\u8BA1\u62A5\u8868
# \u53C2\u6570fromDate toDate branchId
sel.report.data.report.13.by.filter = \
with open_cust_num as ( \
select BRANCH_CODE, \
count(distinct CUST_NO) as OPEN_CUST_NUM \
from REPORT.CLIENT_STATISTICS \
where INIT_DATE between {0} and {1} \
and OPEN_DATE between {0} and {1} \
{2} \
group by BRANCH_CODE), \
close_day as ( \
select BRANCH_CODE, \
sum(ASSET) as ASSET \
from REPORT.CLIENT_STATISTICS \
where INIT_DATE = {1} \
and OPEN_DATE between {0} and {1} \
{2} \
group by BRANCH_CODE), \
main as ( \
select BRANCH_CODE, \
sum(ASSET_AVG) as ASSET_AVG,\
sum(ASSET_EXCLUDE_FINANCE_AVG) as ASSET_EXCLUDE_FINANCE_AVG,\
sum(COMMISSION) as COMMISSION,\
sum(NET_COMMISSION) as NET_COMMISSION,\
sum(SF_AMOUNT) as SF_AMOUNT \
from ( \
select BRANCH_CODE, \
CUST_NO, \
sum(ASSET)/count(distinct INIT_DATE) as ASSET_AVG,\
sum(ASSET_EXCLUDE_FINANCE)/count(distinct INIT_DATE) as ASSET_EXCLUDE_FINANCE_AVG, \
sum(COMMISSION) as COMMISSION, \
sum(NET_COMMISSION) as NET_COMMISSION,\
sum(SF_AMOUNT) as SF_AMOUNT \
from REPORT.CLIENT_STATISTICS a \
where INIT_DATE between {0} and {1} \
and OPEN_DATE between {0} and {1} \
{2} \
GROUP BY BRANCH_CODE,CUST_NO) \
group by BRANCH_CODE) \
select c.ID as BRANCH_NO,\
c.NAME as BRANCH_NAME, \
coalesce(a2.OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
round(cast(coalesce(a.ASSET_AVG,0) as decimal),2) as ASSET_AVG, \
round(cast(coalesce(a.ASSET_EXCLUDE_FINANCE_AVG,0) as decimal),2) as ASSET_EXCLUDE_FINANCE_AVG, \
round(cast(coalesce(a1.ASSET,0) as decimal),2) as ASSET, \
round(cast(coalesce(a.COMMISSION,0) as decimal),2) as COMMISSION, \
round(cast(coalesce(a.NET_COMMISSION,0) as decimal),2) as NET_COMMISSION, \
round(cast(coalesce(a.SF_AMOUNT,0) as decimal),2) as SF_AMOUNT \
from main a \
left join close_day a1 on a.BRANCH_CODE=a1.BRANCH_CODE \
left join open_cust_num a2 on a.BRANCH_CODE=a2.BRANCH_CODE \
left join UF20_EDW.DIM_BRANCH c on a.BRANCH_CODE=c.ID

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886813-\u65B0\u5F00\u6237\u60C5\u51B5\u7EDF\u8BA1\u62A5\u8868-\u5F00\u6237\u6570\u4E0B\u94BB\u8868
# \u53C2\u6570fromDate toDate branchId
sel.report.data.report.1301.by.filter = \
select b.NAME as BRANCH_NAME, \
CUST_NO, \
CUST_NAME, \
OPEN_DATE, \
(case when OPEN_WAY = 0 then ''\u4E34\u67DC\u5F00\u6237'' \
when OPEN_WAY = 1 then ''\u89C1\u8BC1\u5F00\u6237'' \
when OPEN_WAY = 2 then ''\u7F51\u4E0A\u5F00\u6237'' \
else ''\u5176\u4ED6'' end) as OPEN_WAY, \
(case when INNER_TRANS_MARK = 1 then ''\u662F'' else ''\u5426'' end) as INNER_TRANS_MARK, \
(case when LIMIT_SALE_MARK = 1 then ''\u662F'' else ''\u5426'' end) as LIMIT_SALE_MARK, \
(case when REWARD_MARK = 1 then ''\u662F'' else ''\u5426'' end) as REWARD_MARK, \
(case when COOP_MARK = 1 then ''\u662F'' else ''\u5426'' end) as COOP_MARK, \
round(cast(coalesce(ASSET_RATIO*100,0) as decimal),2) as ASSET_RATIO \
from REPORT.OPEN_CLIENT_STATISTICS a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE=b.ID \
where OPEN_DATE between {0} and {1} \
{2}

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886814-\u8425\u4E1A\u90E8\u8D44\u4EA7\u5206\u6BB5\u67E5\u8BE2
# \u53C2\u6570endDate branchId assetSection
sel.report.data.report.14.by.filter = \
with asset_section as (select  cast(BUSINESSFLAG_CODE as int) as BUSINESSFLAG_CODE, \
BUSINESSFLAG_NAME \
from UF20_EDW.USER_DEFINE_CODE \
where TYPE_CODE = ''ZC00001'') \
select  AVG_ASSET_SECTION, \
c.BUSINESSFLAG_NAME as AVG_ASSET_SECTION_NAME, \
coalesce(sum(CUST_NUM),0) as CUST_NUM, \
round(cast((case when sum(CUST_NUM) = 0 or sum(CUST_NUM) is null then 0.0 \
when max(ALL_CUST_NUM) = 0 or max(ALL_CUST_NUM) is null then 9999999999.0 \
else cast(sum(CUST_NUM) as decimal)/cast(max(ALL_CUST_NUM)as decimal)*100 end) as decimal),2) as CUST_PROPORTION, \
round(cast(coalesce(sum(ASSET)/10000,0) as decimal),2) as ASSET, \
round(cast(coalesce(sum(AVG_ASSET)/10000,0) as decimal),2) as AVG_ASSET, \
round(cast((case when sum(ASSET) = 0 or sum(ASSET) is null then 0.0 \
when max(ALL_ASSET) = 0 or max(ALL_ASSET) is null then 9999999999.0 \
else sum(ASSET)/max(ALL_ASSET)*100 end) as decimal),2) as ASSET_PROPORTION, \
round(cast(coalesce(sum(COMMISSION)/10000,0) as decimal),2) as COMMISSION, \
round(cast((case when sum(COMMISSION) = 0 or sum(COMMISSION) is null then 0.0 \
when max(ALL_COMMISSION) = 0 or max(ALL_COMMISSION) is null then 9999999999.0 \
else sum(COMMISSION)/max(ALL_COMMISSION)*100 end) as decimal),2) as COMMISSION_PROPORTION, \
round(cast(coalesce(sum(AMOUNT)/10000,0) as decimal),2) as AMOUNT, \
round(cast((case when sum(AMOUNT) = 0 or sum(AMOUNT) is null then 0.0 \
when max(ALL_AMOUNT) = 0 or max(ALL_AMOUNT) is null then 9999999999.0 \
else sum(AMOUNT)/max(ALL_AMOUNT)*100 end) as decimal),2) as AMOUNT_PROPORTION, \
round(cast(coalesce(sum(LIMIT_SALE_STOCK_BALANCE)/10000,0) as decimal),2) as LIMIT_SALE_STOCK_BALANCE \
from REPORT.ASSET_SECTION_STATISTICS a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_NO = b.ID \
left join asset_section c on a.AVG_ASSET_SECTION = c.BUSINESSFLAG_CODE \
where INIT_MONTH = {0} \
{1} \
and AVG_ASSET_SECTION in ({2}) \
group by AVG_ASSET_SECTION,c.BUSINESSFLAG_NAME \
order by AVG_ASSET_SECTION

# ReportController
# \u7ECF\u8425\u62A5\u8868-\u62A5\u8868\u6570\u636E-\u62A5\u886815-\u878D\u8D44\u878D\u5238\u65E5\u5E38\u4E1A\u52A1\u7EDF\u8BA1
# \u53C2\u6570fromDate toDate branchId
sel.report.data.report.15.by.filter = \
with \
period_main as ( \
select  BRANCH_CODE, \
sum(MARGIN_AMOUNT) as MARGIN_AMOUNT, \
sum(ASSURE_AMOUNT) as ASSURE_AMOUNT, \
sum(CREDIT_AMOUNT) as CREDIT_AMOUNT, \
sum(COMMISSION) as COMMISSION, \
sum(ASSURE_COMMISSION) as ASSURE_COMMISSION, \
sum(CREDIT_COMMISSION) as CREDIT_COMMISSION, \
sum(NET_COMMISSION) as NET_COMMISSION, \
sum(ASSURE_NET_COMMISSION) as ASSURE_NET_COMMISSION, \
sum(CREDIT_NET_COMMISSION) as CREDIT_NET_COMMISSION, \
sum(MARKETING_STAFF_COMMISSION) as MARKETING_STAFF_COMMISSION, \
(case when sum(ASSURE_COMMISSION+CREDIT_COMMISSION) = 0 then 0.0000 \
when sum(ASSURE_AMOUNT+CREDIT_AMOUNT) = 0 then 9999999999.00 \
else sum(ASSURE_COMMISSION+CREDIT_COMMISSION)/sum(ASSURE_AMOUNT+CREDIT_AMOUNT)*1000 end) as STOCK_RATE, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM, \
avg(FINANCE_DEBIT_BALANCE) as FINANCE_DEBIT_BALANCE_AVG, \
avg(SECURITY_DEBIT_AMOUNT) as SECURITY_DEBIT_AMOUNT_AVG, \
avg(DEBIT_BALANCE) as DEBIT_BALANCE_AVG, \
avg(ASSET_BALANCE) as ASSET_BALANCE_AVG  \
from REPORT.MARGIN_TRADING_STATISTICS \
where INIT_DATE between {0} and {1} \
{2} \
group by BRANCH_CODE), \
day_close as ( \
select  BRANCH_CODE, \
FINANCE_DEBIT_BALANCE as FINANCE_DEBIT_BALANCE_CLOSE, \
SECURITY_DEBIT_AMOUNT as SECURITY_DEBIT_AMOUNT_CLOSE, \
DEBIT_BALANCE as DEBIT_BALANCE_CLOSE, \
ASSET_BALANCE as ASSET_BALANCE_CLOSE  \
from REPORT.MARGIN_TRADING_STATISTICS \
where INIT_DATE = {1} \
{2}), \
year_agg as ( \
select  BRANCH_CODE, \
sum(MARGIN_AMOUNT) as MARGIN_AMOUNT_Y, \
sum(ASSURE_AMOUNT) as ASSURE_AMOUNT_Y, \
sum(CREDIT_AMOUNT) as CREDIT_AMOUNT_Y, \
sum(COMMISSION) as COMMISSION_Y, \
sum(ASSURE_COMMISSION) as ASSURE_COMMISSION_Y, \
sum(CREDIT_COMMISSION) as CREDIT_COMMISSION_Y, \
sum(NET_COMMISSION) as NET_COMMISSION_Y, \
sum(ASSURE_NET_COMMISSION) as ASSURE_NET_COMMISSION_Y, \
sum(CREDIT_NET_COMMISSION) as CREDIT_NET_COMMISSION_Y, \
sum(MARKETING_STAFF_COMMISSION) as MARKETING_STAFF_COMMISSION_Y, \
(case when sum(ASSURE_COMMISSION+CREDIT_COMMISSION) = 0 then 0.0000 \
when sum(ASSURE_AMOUNT+CREDIT_AMOUNT) = 0 then 9999999999.00 \
else sum(ASSURE_COMMISSION+CREDIT_COMMISSION)/sum(ASSURE_AMOUNT+CREDIT_AMOUNT)*1000 end) as STOCK_RATE_Y, \
sum(OPEN_CUST_NUM) as OPEN_CUST_NUM_Y, \
avg(FINANCE_DEBIT_BALANCE) as FINANCE_DEBIT_BALANCE_AVG_Y, \
avg(SECURITY_DEBIT_AMOUNT) as SECURITY_DEBIT_AMOUNT_AVG_Y, \
avg(DEBIT_BALANCE) as DEBIT_BALANCE_AVG_Y, \
avg(ASSET_BALANCE) as ASSET_BALANCE_AVG_Y  \
from REPORT.MARGIN_TRADING_STATISTICS \
where INIT_DATE between {0} and {1} \
{2} \
group by BRANCH_CODE), \
total_cust_num as( \
select BRANCH_CODE, \
sum(open_cust_num) as OPEN_CUST_NUM_TOTAL \
from REPORT.MARGIN_TRADING_STATISTICS \
group by BRANCH_CODE) \
select  a.NAME as BRANCH_NAME, \
round(cast(coalesce(MARGIN_AMOUNT,0)/10000 as decimal),2) as MARGIN_AMOUNT, \
round(cast(coalesce(ASSURE_AMOUNT,0)/10000 as decimal),2) as ASSURE_AMOUNT, \
round(cast(coalesce(CREDIT_AMOUNT,0)/10000 as decimal),2) as CREDIT_AMOUNT, \
round(cast(coalesce(COMMISSION,0) as decimal),2) as COMMISSION, \
round(cast(coalesce(ASSURE_COMMISSION,0) as decimal),2) as ASSURE_COMMISSION, \
round(cast(coalesce(CREDIT_COMMISSION,0) as decimal),2) as CREDIT_COMMISSION, \
round(cast(coalesce(NET_COMMISSION,0) as decimal),2) as NET_COMMISSION, \
round(cast(coalesce(ASSURE_NET_COMMISSION,0) as decimal),2) as ASSURE_NET_COMMISSION, \
round(cast(coalesce(CREDIT_NET_COMMISSION,0) as decimal),2) as CREDIT_NET_COMMISSION, \
round(cast(coalesce(MARKETING_STAFF_COMMISSION,0) as decimal),2) as MARKETING_STAFF_COMMISSION, \
round(cast(coalesce(STOCK_RATE,0) as decimal),4) as STOCK_RATE, \
coalesce(OPEN_CUST_NUM,0) as OPEN_CUST_NUM, \
round(cast(coalesce(FINANCE_DEBIT_BALANCE_AVG,0)/10000 as decimal),2) as FINANCE_DEBIT_BALANCE_AVG, \
round(cast(coalesce(SECURITY_DEBIT_AMOUNT_AVG,0)/10000 as decimal),2) as SECURITY_DEBIT_AMOUNT_AVG, \
round(cast(coalesce(DEBIT_BALANCE_AVG,0)/10000 as decimal),2) as DEBIT_BALANCE_AVG, \
round(cast(coalesce(ASSET_BALANCE_AVG,0)/10000 as decimal),2) as ASSET_BALANCE_AVG, \
round(cast(coalesce(FINANCE_DEBIT_BALANCE_CLOSE,0)/10000 as decimal),2) as FINANCE_DEBIT_BALANCE_CLOSE, \
round(cast(coalesce(SECURITY_DEBIT_AMOUNT_CLOSE,0)/10000 as decimal),2) as SECURITY_DEBIT_AMOUNT_CLOSE, \
round(cast(coalesce(DEBIT_BALANCE_CLOSE,0)/10000 as decimal),2) as DEBIT_BALANCE_CLOSE, \
round(cast(coalesce(ASSET_BALANCE_CLOSE,0)/10000 as decimal),2) as ASSET_BALANCE_CLOSE, \
round(cast(coalesce(MARGIN_AMOUNT_Y,0)/10000 as decimal),2) as MARGIN_AMOUNT_Y, \
round(cast(coalesce(ASSURE_AMOUNT_Y,0)/10000 as decimal),2) as ASSURE_AMOUNT_Y, \
round(cast(coalesce(CREDIT_AMOUNT_Y,0)/10000 as decimal),2) as CREDIT_AMOUNT_Y, \
round(cast(coalesce(COMMISSION_Y,0) as decimal),2) as COMMISSION_Y, \
round(cast(coalesce(ASSURE_COMMISSION_Y,0) as decimal),2) as ASSURE_COMMISSION_Y, \
round(cast(coalesce(CREDIT_COMMISSION_Y,0) as decimal),2) as CREDIT_COMMISSION_Y, \
round(cast(coalesce(NET_COMMISSION_Y,0) as decimal),2) as NET_COMMISSION_Y, \
round(cast(coalesce(ASSURE_NET_COMMISSION_Y,0) as decimal),2) as ASSURE_NET_COMMISSION_Y, \
round(cast(coalesce(CREDIT_NET_COMMISSION_Y,0) as decimal),2) as CREDIT_NET_COMMISSION_Y, \
round(cast(coalesce(MARKETING_STAFF_COMMISSION_Y,0) as decimal),2) as MARKETING_STAFF_COMMISSION_Y, \
round(cast(coalesce(STOCK_RATE_Y,0) as decimal),4) as STOCK_RATE_Y, \
coalesce(OPEN_CUST_NUM_Y,0) as OPEN_CUST_NUM_Y, \
round(cast(coalesce(FINANCE_DEBIT_BALANCE_AVG_Y,0)/10000 as decimal),2) as FINANCE_DEBIT_BALANCE_AVG_Y, \
round(cast(coalesce(SECURITY_DEBIT_AMOUNT_AVG_Y,0)/10000 as decimal),2) as SECURITY_DEBIT_AMOUNT_AVG_Y, \
round(cast(coalesce(DEBIT_BALANCE_AVG_Y,0)/10000 as decimal),2) as DEBIT_BALANCE_AVG_Y, \
round(cast(coalesce(ASSET_BALANCE_AVG_Y,0)/10000 as decimal),2) as ASSET_BALANCE_AVG_Y, \
coalesce(OPEN_CUST_NUM_TOTAL,0) as OPEN_CUST_NUM_TOTAL \
from year_agg \
left join period_main on year_agg.BRANCH_CODE=period_main.BRANCH_CODE \
left join day_close on year_agg.BRANCH_CODE=day_close.BRANCH_CODE \
left join total_cust_num on year_agg.BRANCH_CODE=total_cust_num.BRANCH_CODE \
left join UF20_EDW.DIM_BRANCH a on year_agg.BRANCH_CODE=a.ID

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u7B5B\u9009-\u4EA7\u54C1\u7F16\u53F7
# \u65E0\u53C2\u6570
sel.management.filter.product = \
select distinct PROD_CODE \
from CASHCLIENT.CASHCLIENT_ASSET

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u4E1A\u52A1\u5206\u6790-\u5BA2\u6237\u7EDF\u8BA1-\u6309\u8D44\u4EA7\u533A\u95F4\u7EDF\u8BA1\u5BA2\u6237\u6570\u91CF&\u6309\u8D44\u4EA7\u533A\u95F4\u7EDF\u8BA1\u5BA2\u6237\u8D44\u4EA7\u5206\u5E03&\u6309\u8D44\u4EA7\u533A\u95F4\u5BA2\u6237\u6570\u91CF\u53CA\u8D44\u4EA7\u5206\u5E03\u7EDF\u8BA1
# \u53C2\u6570endDate prodCode
sel.business.statistics.01 = \
select (case when ASSET_SECTION = 1 then ''[00,10)'' \
when ASSET_SECTION = 2 then ''[10,50)'' \
when ASSET_SECTION = 3 then ''[50,100)'' \
when ASSET_SECTION = 4 then ''[100,500)'' \
when ASSET_SECTION = 5 then ''[500,1000)'' \
when ASSET_SECTION = 6 then ''[1000,+00)'' \
else ''\u65E0\u5206\u6BB5'' end) as ASSET_SECTION_NAME, \
count(distinct CUST_NO) as CUST_NUM, \
round(cast(sum(ASSET)/10000 as decimal),2) as ASSET \
from CASHCLIENT.CASHCLIENT_ASSET \
where INIT_DATE = {0} \
and PROD_CODE in ({1}) \
group by ASSET_SECTION \
order by ASSET_SECTION

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u4E1A\u52A1\u5206\u6790-\u5BA2\u6237\u7EDF\u8BA1-\u6309\u4EA7\u54C1\u4EFD\u989D\u533A\u95F4\u7EDF\u8BA1\u5BA2\u6237\u6570\u91CF &\u6309\u4EA7\u54C1\u4EFD\u989D\u533A\u95F4\u7EDF\u8BA1\u5BA2\u6237\u8D44\u4EA7\u5206\u5E03&\u6309\u4EA7\u54C1\u4EFD\u989D\u533A\u95F4\u5BA2\u6237\u6570\u91CF\u53CA\u8D44\u4EA7\u5206\u5E03\u7EDF\u8BA1
# \u53C2\u6570endDate prodCode
sel.business.statistics.02 = \
select (case when AMOUNT_SECTION = 1 then ''[00,10)'' \
when AMOUNT_SECTION = 2 then ''[10,50)'' \
when AMOUNT_SECTION = 3 then ''[50,100)'' \
when AMOUNT_SECTION = 4 then ''[100,500)'' \
when AMOUNT_SECTION = 5 then ''[500,1000)'' \
when AMOUNT_SECTION = 6 then ''[1000,+00)'' \
else ''\u65E0\u5206\u6BB5'' end) as AMOUNT_SECTION_NAME, \
count(distinct CUST_NO) as CUST_NUM, \
round(cast(sum(AMOUNT)/10000 as decimal),2) as ASSET \
from CASHCLIENT.CASHCLIENT_ASSET \
where INIT_DATE = {0} \
and PROD_CODE in ({1}) \
group by AMOUNT_SECTION \
order by AMOUNT_SECTION

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u4E1A\u52A1\u5206\u6790-\u7B7E\u7EA6\u8D8B\u52BF
# \u53C2\u6570startDate endDate prodCode
sel.business.trend = \
select INIT_DATE, \
sum(SIGN_NUM) as SIGN_NUM, \
sum(REMOVE_NUM) as REMOVE_NUM \
from CASHCLIENT.CASHCLIENT_REDEMPTION \
where INIT_DATE between {0} and {1} \
and PROD_CODE in ({2}) \
group by INIT_DATE \
order by INIT_DATE

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u4E1A\u52A1\u5206\u6790-\u73B0\u91D1\u7406\u8D22\u4EA7\u54C1\u4EFD\u989D\u53D8\u5316\uFF08\u4EBF\uFF09
# \u53C2\u6570startDate endDate prodCode
sel.business.change = \
select INIT_DATE, \
round(cast(sum(AMOUNT)/100000000 as decimal),2) as AMOUNT \
from CASHCLIENT.CASHCLIENT_ASSET \
where INIT_DATE between {0} and {1} \
and PROD_CODE in ({2}) \
group by INIT_DATE \
order by INIT_DATE

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u62A5\u8868\u6570\u636E-\u62A5\u886816-\u7533\u8D4E\u62A5\u8868
# \u53C2\u6570fromDate toDate prodCode
sel.business.data.report.16.by.filter = \
select INIT_DATE, \
round(cast(sum(PURCHASE_AMOUNT)/10000 as decimal),2) as PURCHASE_AMOUNT, \
round(cast(sum(REDEMPTION_AMOUNT)/10000 as decimal),2) as REDEMPTION_AMOUNT, \
round(cast(sum(MINUS_AMOUNT)/10000 as decimal),2) as MINUS_AMOUNT  \
from CASHCLIENT.CASHCLIENT_REDEMPTION \
where INIT_DATE between {0} and {1} \
and PROD_CODE in ({2}) \
group by INIT_DATE \
order by INIT_DATE desc

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u62A5\u8868\u6570\u636E-\u62A5\u886817-\u8D44\u4EA7\u53D8\u52A8
# \u53C2\u6570fromDate toDate prodCode
sel.business.data.report.17.by.filter = \
select  INIT_DATE, \
round(cast(sum(BANK_IN)/10000 as decimal),2) as BANK_IN, \
round(cast(sum(BANK_OUT)/10000 as decimal),2) as BANK_OUT, \
round(cast(sum(BANK_SUM)/10000 as decimal),2) as BANK_SUM, \
round(cast(sum(SECU_IN)/10000 as decimal),2) as SECU_IN, \
round(cast(sum(SECU_OUT)/10000 as decimal),2) as SECU_OUT, \
round(cast(sum(SECU_SUM)/10000 as decimal),2) as SECU_SUM,  \
round(cast(sum(REVERSE_IN)/10000 as decimal),2) as REVERSE_IN, \
round(cast(sum(REVERSE_OUT)/10000 as decimal),2) as REVERSE_OUT, \
round(cast(sum(REVERSE_SUM)/10000 as decimal),2) as REVERSE_SUM, \
round(cast(sum(FIN_PRODUCT_IN)/10000 as decimal),2) as FIN_PRODUCT_IN, \
round(cast(sum(FIN_PRODUCT_OUT)/10000 as decimal),2) as FIN_PRODUCT_OUT, \
round(cast(sum(FIN_PRODUCT_SUM)/10000 as decimal),2) as FIN_PRODUCT_SUM, \
round(cast(sum(OTHER_BUSINESS)/10000 as decimal),2) as OTHER_BUSINESS, \
round(cast(sum(NET_REDEMPTION)/10000 as decimal),2) as NET_REDEMPTION  \
from CASHCLIENT.CASHCLIENT_BUSINESS \
where INIT_DATE between {0} and {1} \
and PROD_CODE in ({2}) \
group by INIT_DATE \
order by INIT_DATE desc

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u7B5B\u9009-\u62A5\u886818-\u5BA2\u6237\u53F7
# \u65E0\u53C2\u6570
sel.business.filter.report.18.customer = \
select distinct CUST_NO, \
CUST_NAME, \
concat(concat(CUST_NO,' | '),CUST_NAME) as CUSTOMER \
from CASHCLIENT.CASHCLIENT_BUSINESS

# BusinessController
# \u73B0\u91D1\u7406\u8D22-\u62A5\u8868\u6570\u636E-\u62A5\u886818-\u5BA2\u6237\u5206\u6790
# \u53C2\u6570fromDate toDate prodCode index
sel.business.data.report.18.by.filter = \
select CUST_NAME, \
CUST_NO, \
BRANCH_NAME, \
BANK_IN, \
BANK_OUT, \
BANK_SUM, \
SECU_IN, \
SECU_OUT, \
SECU_SUM, \
REVERSE_IN, \
REVERSE_OUT, \
REVERSE_SUM, \
FIN_PRODUCT_IN, \
FIN_PRODUCT_OUT, \
FIN_PRODUCT_SUM, \
OTHER_BUSINESS, \
NET_REDEMPTION \
from (\
select  CUST_NAME, \
CUST_NO, \
b.NAME as BRANCH_NAME, \
round(cast(sum(BANK_IN)/10000 as decimal),2) as BANK_IN, \
round(cast(sum(BANK_OUT)/10000 as decimal),2) as BANK_OUT, \
round(cast(sum(BANK_SUM)/10000 as decimal),2) as BANK_SUM, \
round(cast(sum(SECU_IN)/10000 as decimal),2) as SECU_IN, \
round(cast(sum(SECU_OUT)/10000 as decimal),2) as SECU_OUT, \
round(cast(sum(SECU_SUM)/10000 as decimal),2) as SECU_SUM,  \
round(cast(sum(REVERSE_IN)/10000 as decimal),2) as REVERSE_IN,  \
round(cast(sum(REVERSE_OUT)/10000 as decimal),2) as REVERSE_OUT, \
round(cast(sum(REVERSE_SUM)/10000 as decimal),2) as REVERSE_SUM,  \
round(cast(sum(FIN_PRODUCT_IN)/10000 as decimal),2) as FIN_PRODUCT_IN, \
round(cast(sum(FIN_PRODUCT_OUT)/10000 as decimal),2) as FIN_PRODUCT_OUT, \
round(cast(sum(FIN_PRODUCT_SUM)/10000 as decimal),2) as FIN_PRODUCT_SUM, \
round(cast(sum(OTHER_BUSINESS)/10000 as decimal),2) as OTHER_BUSINESS, \
round(cast(sum(NET_REDEMPTION)/10000 as decimal),2) as NET_REDEMPTION \
from CASHCLIENT.CASHCLIENT_BUSINESS a \
inner join UF20_EDW.DIM_BRANCH b on a.BRANCH_CODE = b.ID \
where INIT_DATE between {0} and {1} \
and PROD_CODE in ({2}) \
{3} \
group by CUST_NAME,CUST_NO,b.NAME \
order by CUST_NAME,CUST_NO,b.NAME) \
where {4}

# RelationController
# \u5173\u8054\u67E5\u8BE2-\u62A5\u8868\u6570\u636E-\u62A5\u886819-\u5173\u8054\u65B9\u8BC1\u5238\u7ECF\u7EAA\u4E1A\u52A1\u67E5\u8BE2
# \u53C2\u6570fromDate toDate prodCode index
sel.relation.data.report.19.by.filter = \
with base1 as( \
select ID_NO, \
CUST_STATUS, \
MARGIN_TRADE_BALANCE \
FROM CASHCLIENT.RELATED_TRADE_STATISTICS \
WHERE INIT_DATE = {1} \
and ID_NO in ({2})), \
base2 as( \
select a.ID_NO, \
max(CUST_STATUS) as CUST_STATUS, \
sum(a.STOCK_COMMISSION) as STOCK_COMMISSION, \
sum(a.STOCK_AMOUNT) as STOCK_AMOUNT, \
(case when sum(a.STOCK_COMMISSION) = 0 or sum(a.STOCK_COMMISSION) is null then 0.0 \
when sum(a.STOCK_AMOUNT) = 0 or sum(a.STOCK_AMOUNT) is null then 9999999999.0 \
else sum(a.STOCK_COMMISSION)/sum(a.STOCK_AMOUNT)*1000 end) as STOCK_COMMISSION_RATE, \
sum(a.MARGIN_TRADE_INTEREST_EXPENSE) as MARGIN_TRADE_INTEREST_EXPENSE, \
sum(a.STOCK_COMMISSION) as COMMON_STOCK_COMMISSION, \
sum(a.OPEN_FUND_COMMISSION) as OPEN_FUND_COMMISSION  \
from CASHCLIENT.RELATED_TRADE_STATISTICS a \
where a.INIT_DATE between {0} and {1} \
and a.ID_NO in ({2}) \
group by a.ID_NO) \
select '' '' as CUST_NAME, \
base2.ID_NO, \
coalesce(base2.CUST_STATUS,'' '') as CUST_STATUS, \
round(cast(coalesce(base2.STOCK_COMMISSION,0) as decimal),2) as STOCK_COMMISSION, \
round(cast(coalesce(base2.STOCK_AMOUNT,0) as decimal),2) as STOCK_AMOUNT, \
round(cast(coalesce(base2.STOCK_COMMISSION_RATE,0) as decimal),4) as STOCK_COMMISSION_RATE, \
round(cast(coalesce(base1.MARGIN_TRADE_BALANCE,0) as decimal),2) as MARGIN_TRADE_BALANCE, \
round(cast(coalesce(base2.MARGIN_TRADE_INTEREST_EXPENSE,0) as decimal),2) as MARGIN_TRADE_INTEREST_EXPENSE, \
round(cast(coalesce(base2.COMMON_STOCK_COMMISSION,0) as decimal),2) as COMMON_STOCK_COMMISSION, \
round(cast(coalesce(base2.OPEN_FUND_COMMISSION,0) as decimal),2) as OPEN_FUND_COMMISSION \
from base2 \
left join base1 on base2.ID_NO = base1.ID_NO